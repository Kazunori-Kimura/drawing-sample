{"version":3,"sources":["components/Canvas/util/vector.ts","components/Canvas/util/common.ts","components/Canvas/util/event.ts","providers/AppSettingsProvider.tsx","providers/ConfigurationProvider.tsx","types/shape.ts","types/note.ts","providers/NoteSettingsProvider.tsx","components/Version.tsx","components/Header.tsx","components/Canvas/factory/guide.ts","components/Canvas/factory/common.ts","components/Canvas/factory/force.ts","components/Canvas/shape/MomentShape.ts","components/Canvas/shape/BeamShape.ts","components/Canvas/shape/ForceShape.ts","components/Canvas/shape/NodeShape.ts","components/Canvas/shape/TrapezoidShape.ts","components/Canvas/types.ts","components/Canvas/manager.ts","components/Canvas/popup/pins/pin_1.svg","components/Canvas/provider/PopupProvider.tsx","components/Canvas/core.tsx","components/Canvas/popup/ForceEditor.tsx","components/Canvas/popup/MomentEditor.tsx","components/Canvas/popup/pins/pin_2.svg","components/Canvas/popup/pins/pin_3.svg","components/Canvas/popup/pins/pin_4.svg","components/Canvas/popup/PinSelector.tsx","components/Canvas/popup/TrapezoidEditor.tsx","components/Canvas/popup/index.tsx","components/Canvas/index.tsx","types/common.ts","components/Note/shape/StructureRect.ts","components/Note/manager.ts","utils/coordinates.ts","components/Note/nav/CanvasNavigation.tsx","components/Note/Page.tsx","components/Note/index.tsx","components/MainContainer.tsx","components/Toolbox/CanvasToolbox.tsx","components/Toolbox/NoteToolbox.tsx","components/Toolbox/index.tsx","components/Layout.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["vX","Vector","vY","lerp","v1","v2","alpha","dir","clone","subtract","normalize","distance","mv","multiplyScalar","add","verticalNormalizeVector","v","y","x","dot","invert","data","JSON","parse","stringify","round","value","figure","n","result","Math","snapping","snapSize","i","snap","snapAngle","deg","roundDegree","getInsidePoints","start","end","direction","points","count","interval","point","push","intercectPoint","targetLine","pi","pj","slope1","intercept1","slope2","NaN","intercept2","isNaN","px","rangeX","sort","a","b","rangeY","err","console","error","getPointerPosition","event","e","type","indexOf","touches","clientX","clientY","compareCoords","isStrict","tolerance","abs","AppSettingsContext","createContext","undefined","AppSettingsProvider","children","useState","mode","setMode","pageSizeType","setPageSizeType","canvasProps","setCanvasProps","noteRef","useRef","canvasRef","callbackRef","editCanvas","useCallback","props","callback","state","zoom","pageZoom","current","closeCanvas","structure","getStructure","Provider","onChangeMode","onChangePageSize","ConfigurationContext","ConfigurationProvider","tool","setTool","NodePinTypes","isNode","item","id","name","isBeam","nodeI","nodeJ","isForce","beam","force","distanceI","isMoment","moment","isTrapezoid","forceI","forceJ","distanceJ","emptyStructure","version","unit","length","nodes","beams","forces","moments","trapezoids","NoteModes","PageSize","A3","width","height","A4","B4","B5","defaultCanvasProps","defaultDrawSettings","stroke","strokeWidth","eraser","defaultPageProps","size","viewport","structures","NoteSettingsContext","NoteSettingsProvider","settings","setSettings","onChangeDrawSettings","hash","process","substring","date","Version","Typography","variant","sx","ml","Header","AppBar","position","Toolbar","component","color","GuideLineColor","defaultLineOptions","defaultEdgeOptions","fill","originX","originY","centeredRotation","defaultLabelOptions","fontSize","fontFamily","textAlign","evented","selectable","createGuideLineByVectors","p1","p2","offset","verticalDir","vd","angle","angleDeg","verticalLineLeft","fabric","Line","GuideLineHeight","verticalLineRight","horizontalLine","edgeLeft","Triangle","top","left","GuideLineEdgeSize","edgeRight","guide","Group","labelAngle","vdir","labelPosition","label","Textbox","createGuideLine","arg1","arg2","arg3","Array","isArray","createGuideLineByPoints","Error","createBeamGuideLine","createGlobalGuideLineBySets","pointsX","pointsY","canvasHeight","guides","maxY","minX","Number","MAX_SAFE_INTEGER","arrX","arrY","hy1","min","GlobalGuideLineInterval","hg1","hy2","x1","x2","hg","vx1","max","vg1","vx2","y1","y2","vg2","createGlobalGuideLine","guidePointsX","Set","guidePointsY","forEach","createGlobalGuideLineByArray","unresponseShapeProps","labelBaseProps","defaultColor","createArrowByVectors","arrowWidth","arrowEdgeSize","options","onRotating","onScaling","onModified","verticalAngleDeg","line","edgeSize","edge","arrow","setControlsVisibility","bl","br","mb","mr","mt","tl","tr","mtr","createArrow","createArrowByPoints","ForceColor","defaultMomentProps","lockRotation","lockScalingX","lockScalingY","hasBorders","hasControls","defaultMomentImageProps","defaultMomentLabelProps","MomentShape","manager","params","image","longpressTimer","dragging","_readonly","vi","vj","dragPoint","draggableMin","MIN_SAFE_INTEGER","draggableMax","this","readonly","create","canvas","attachEvent","visible","beamMap","Circle","radius","IconSize","loadSVGFromURL","results","svg","util","groupSVGElements","set","scaleX","scaleY","flipY","copy","selected","remove","select","onlyRemoveFromCanvas","off","momentMap","list","filter","shape","setActiveObject","on","onSelected","bind","onDeselected","onMouseDown","onMouseUp","onDblClick","onMoving","onMoved","includes","target","clearTimeout","getBoundingRect","beforeTop","beforeLeft","setTimeout","afterTop","afterLeft","openMomentDialog","CanvasManager","LongpressInterval","dragDis","rad","PI","dist","cos","calcMovedPosition","distI","lp","BeamShape","relationBeams","nodeMap","attachEvents","createBeamByVectors","arg4","createBeamByPoints","dirty","rotate","updateGuide","updateBeamByVectors","updateBeamByPoints","forceMap","trapezoidMap","nodeBeamMap","beamId","nodeId","update","iy","ix","ratio","jx","jy","replaceNodes","removingBeams","modifiedBeams","nodeIds","Object","values","nodeShape","beamShape","replacedI","replacedJ","modified","calcForceAverage","calcTrapezoidAverage","entries","removedNodeId","some","node","updateParts","updateGlobalGuidelines","onSelect","onDeselect","onMouseDownBefore","onRotated","onScaled","currentBeam","absolutePointer","calcRatio","forceId","uuid","ForceShape","momentId","removeUnconnectedNodes","setVisibleParts","pin","calcPoints","completeDrag","rotateDeg","scale","defaultForceLabelProps","head","originalAngle","forceAverage","forceLength","calcLength","tail","openForceDialog","currentAngle","f","calcForce","Pins","free","pinX","pinZ","fixX","fix","NodeShape","createNode","loadPin","updatePosition","updateByParams","visiblePin","PinSize","pinType","objects","setPinProperties","openNodeDialog","pointer","ni","nj","getCenterPoint","sy","ns","TrapezoidColor","defaultTrapezoidArrowOptions","defaultTrapezoidLineOptions","lockMovementX","lockMovementY","defaultTrapezoidLabelOptions","TrapezoidShape","arrows","labelI","labelJ","selectedShapes","linePoints","draggingEdge","draggingDirection","draggingPosition","draggingLength","addToCanvas","isGlobal","average","trapezoidAverage","vI","bi","bj","slope","intercept","insideArrows","pu","map","arrowI","arrowJ","createLine","li","lj","createTrapezoidLabel","removeFromCanvas","bringToFront","shapes","edges","delete","openTrapezoidDialog","dj","di","dragLength","updateLine","transform","checkDraggingEdge","calcDraggableRange","moveArrow","degree","isPathStart","isPathEnd","defaultGridLineProps","excludeFromExport","excludeExport","canvasDom","open","_tool","gridSize","_props","_data","openPopup","eventType","hasSelected","pinching","panning","lastPos","globalGuideLines","zoomStartScale","_initialized","getBoundingClientRect","Canvas","selection","isDrawingMode","fireRightClick","stopContextMenu","setZoom","setViewportTransform","resize","drawBackgroundGrid","trapezoid","renderAll","discardActiveObject","setBrush","setSelectableShapes","setWidth","setHeight","flatMap","toSVG","suppressPreamble","viewportTransform","getZoom","reduce","prev","lines","hl","h","vl","entry","find","editable","selectableNode","eventedNode","selectableBeam","eventedBeam","selectableForce","eventedForce","selectableMoment","eventedMoment","selectableTrapezoid","eventedTrapezoid","brush","freeDrawingBrush","Boolean","PencilBrush","diffX","diffY","vpt","canvasWidth","getWidth","getHeight","pageWidth","pageHeight","py","requestRenderAll","onMouseMove","onCreatePath","onCreateObject","onTouchDrag","onTouchGesture","onMouseWheel","clickedShapeType","button","self","Point","zoomToPoint","fitViewport","evt","deltaY","offsetX","offsetY","preventDefault","stopPropagation","path","s","isSVGPath","addNodeIfNotExists","addBeamIfNotExists","vs","ve","trapezoidId","clear","dispose","_path","PopupContext","PopupProvider","popupType","setPopupType","popupPosition","setPopupPosition","popupParams","setPopupParams","callbackFunc","close","CanvasCore","ref","canvasSize","useContext","managerRef","useImperativeHandle","toCanvasProps","useLayoutEffect","useEffect","forwardRef","ForceEditor","onChange","onClose","setValue","setError","handleSubmit","currentTarget","checkValidity","num","parseFloat","handleChange","errorMessage","Paper","Stack","spacing","p","autoComplete","noValidate","onSubmit","TextField","margin","required","fullWidth","InputProps","endAdornment","InputAdornment","helperText","justifyContent","Button","onClick","ConnectedForceEditor","useMemo","MomentEditor","ConnectedMomentEditor","_extends","assign","arguments","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","keys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgPin1","_ref","svgRef","title","titleId","viewBox","xmlns","d","_circle","_circle2","_line","ForwardRef","SvgPin2","cx","cy","r","SvgPin3","_line2","_line3","_line4","_line5","SvgPin4","PinButtons","icon","SvgIcon","defaultButtonProps","alignItems","PinSelector","setPin","_","newValue","ToggleButtonGroup","orientation","exclusive","ToggleButton","ConnectedPinSelector","validateForce","val","validateAngle","parseInt","TrapezoidEditor","setValues","errors","setErrors","attrs","value1","valid1","value2","valid2","value3","valid3","valid","parseFormValues","error1","error2","handleChangeIsGlobal","checked","toFormValues","FormControlLabel","control","Checkbox","ConnectedTrapezoidEditor","Popup","Box","zIndex","setSize","containerRef","observer","ResizeObserver","contentRect","observe","disconnect","backgroundColor","overscrollBehavior","CanvasTools","isPoint","defaultLayerOptions","hasRotatingPoint","erasable","defaultImageOptions","StructureRect","layer","createLayer","loadImage","calcCoords","selectedCanvasId","rect","Rect","loadSVGFromString","setOptions","opacity","updateCanvasState","clearCanvasState","coords","isShapeCoordinates","PageManager","drawData","setCanvasState","_mode","_settings","forceRenderTimer","pageSize","loadFromJSON","EraserBrush","getCanvasProps","canvasId","coordinates","view","items","pos","log","Background","styled","display","padding","Spacer","flex","CanvasNavigation","onEdit","onCopy","onDelete","onCancel","anchorEl","setAnchorEl","handleClickMore","handleCloseMenu","handleCopy","handleDelete","IconButton","Menu","MenuItem","Page","viewSize","drawSettings","onEditCanvas","onCloseCanvas","getActiveStructure","activeStructure","setActiveStructure","addStructureCanvas","addCanvas","removeStructureCanvas","removeCanvas","closingCanvas","handleEdit","activeCanvas","hideControls","Note","setViewSize","overflow","MainContainer","boxSizing","border","theme","palette","divider","borderRadius","ToolboxButtons","PanToolAlt","pen","ArrowDownward","Refresh","Texture","Delete","CanvasToolboxCore","CanvasToolbox","DrawModes","NoteModeButtons","edit","DrawModeButtons","AutoFixNormal","NoteToolboxCore","onClickAddCanvas","handleChangeMode","handleChangeTool","handleChangeStrokeWidth","handleChangeStroke","disabled","Slider","step","valueLabelDisplay","startIcon","AddBox","NoteToolbox","handleAddCanvas","Toolbox","Layout","windowRect","setWindowRect","fitWindowSize","window","innerHeight","innerWidth","addEventListener","removeEventListener","flexDirection","flexWrap","pt","createTheme","App","ThemeProvider","CssBaseline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c10be571.chunk.js","sourcesContent":["import Vector from 'victor';\n\nexport { Vector };\n\n// X方向のベクトル\nexport const vX = new Vector(1, 0);\n// Y方向のベクトル\nexport const vY = new Vector(0, 1);\n\n/**\n * v1 と v2 の間にある vp を取得する\n * @param v1\n * @param v2\n * @param alpha\n * @returns\n */\nexport const lerp = (v1: Vector, v2: Vector, alpha: number): Vector => {\n    if (alpha >= 1) {\n        return v2;\n    }\n    if (alpha <= 0) {\n        return v1;\n    }\n    const dir = v2.clone().subtract(v1).normalize();\n    const distance = v1.distance(v2);\n    const mv = dir.multiplyScalar(distance * alpha);\n    return v1.clone().add(mv);\n};\n\n/**\n * v1 と v2 に直交する単位ベクトルを返す\n * @param v1\n * @param v2\n * @returns\n */\nexport const verticalNormalizeVector = (v1: Vector, v2: Vector): Vector => {\n    const dir = v2.clone().subtract(v1).normalize();\n    const v = new Vector(dir.y, dir.x * -1).normalize();\n\n    const value = vY.dot(v);\n    if (value > 0) {\n        v.invert();\n    }\n\n    return v;\n};\n","import { Point } from '../types';\nimport { lerp, Vector } from './vector';\n\nexport const clone = <T>(data: T): T => {\n    return JSON.parse(JSON.stringify(data)) as T;\n};\n\nexport const round = (value: number, figure = 3): number => {\n    const n = 10 ** figure;\n    const result = Math.round(value * n) / n;\n    return result;\n};\n\nconst snapping = (value: number, snapSize = 25): number => {\n    const n = value / snapSize;\n    const i = Math.round(n) * snapSize;\n    return i;\n};\n\nexport const DEFAULT_SNAP_SIZE = 25;\n\n/**\n * 頂点をグリッドにスナップする\n * @param param0\n * @param snapSize\n * @returns\n */\nexport const snap = ([x, y]: [number, number], snapSize = DEFAULT_SNAP_SIZE): [number, number] => {\n    return [snapping(x, snapSize), snapping(y, snapSize)];\n};\n\nexport const DEFAULT_SNAP_ANGLE = 5;\nexport const snapAngle = (deg: number, snapSize = DEFAULT_SNAP_ANGLE): number => {\n    return snapping(deg, snapSize);\n};\n\n/**\n * 角度を 0 〜 360 の範囲に変換する\n * @param deg\n * @returns\n */\nexport const roundDegree = (deg: number): number => {\n    let value = deg;\n    if (0 > value) {\n        value += 360;\n    }\n    if (value >= 360) {\n        value -= 360;\n    }\n    if (0 > value || value >= 360) {\n        value = roundDegree(value);\n    }\n    return value;\n};\n\nconst InsideArrowCount = 10;\nconst InsideArrowInterval = 25;\nconst InsideArrowMinInterval = 10;\n\n/**\n * 開始点から終了点まで等間隔に点を取る\n * @param start\n * @param end\n * @param direction\n * @returns\n */\nexport const getInsidePoints = (start: Vector, end: Vector, direction: Vector): Vector[] => {\n    const points: Vector[] = [];\n    // 2点間の距離\n    const distance = start.distance(end);\n    // 分割数\n    let count = InsideArrowCount;\n    // 間隔\n    let interval = distance / (count + 1);\n    while (interval < InsideArrowInterval && count > 0) {\n        count--;\n        interval = distance / (count + 1);\n    }\n\n    if (count > 0) {\n        // 始点から interval の間隔で count 個 点を取る\n        for (let i = 1; i <= count; i++) {\n            const point = start.clone().add(direction.clone().multiplyScalar(interval * i));\n            points.push(point);\n        }\n    } else {\n        // 半分にしてみる\n        interval = distance / 2;\n        if (interval >= InsideArrowMinInterval) {\n            // 半分の位置に点を置く\n            const point = lerp(start, end, 0.5);\n            points.push(point);\n        }\n    }\n\n    return points;\n};\n\n/**\n * 開始点からある方向に伸ばした線が対象となる線と交わる点を取得する\n * @param targetLine 対象となる Line [始点、終点、傾き、切片]\n * @param start 開始点\n * @param dir 方向\n * @returns 交点（なければ null）\n */\nexport const intercectPoint = (\n    targetLine: [Vector, Vector, number, number],\n    start: Vector,\n    dir: Vector\n): Point | null => {\n    const [pi, pj, slope1, intercept1] = targetLine;\n    let point: Point | null = null;\n    try {\n        // dir の傾き\n        const end: Vector = start.clone().add(dir);\n        const slope2 = end.x - start.x !== 0 ? (end.y - start.y) / (end.x - start.x) : NaN;\n        // dir の切片\n        const intercept2 = isNaN(slope2) ? NaN : start.y - slope2 * start.x;\n\n        if (slope1 === slope2) {\n            // 平行なので交点なし\n            return null;\n        }\n\n        if (!isNaN(slope1) && !isNaN(slope2)) {\n            // どちらも垂直でない\n            const px = (intercept2 - intercept1) / (slope1 - slope2);\n            const py = slope1 * px + intercept1;\n\n            point = [px, py];\n        } else if (isNaN(slope1)) {\n            // 対象の Line が垂直\n            const px = pi.x;\n            const py = px * slope2 + intercept2;\n\n            point = [px, py];\n        } else if (isNaN(slope2)) {\n            // dir が垂直\n            const px = start.x;\n            const py = px * slope1 + intercept1;\n\n            point = [px, py];\n        }\n\n        // 交点が Line の内側？\n        if (point) {\n            const [x, y] = point;\n            const rangeX = [pi.x, pj.x].sort((a, b) => a - b);\n            const rangeY = [pi.y, pj.y].sort((a, b) => a - b);\n            if (x >= rangeX[0] && x <= rangeX[1] && y >= rangeY[0] && y <= rangeY[1]) {\n                return point;\n            }\n        }\n        return null;\n    } catch (err) {\n        console.error(err);\n    }\n\n    return null;\n};\n","import { Point } from '../../../types/common';\n\n/**\n * ポインタの位置を返す\n * @param event\n * @returns\n */\nexport const getPointerPosition = (event: fabric.IEvent<Event>): Point | undefined => {\n    if (event.e.type?.indexOf('touch') === 0) {\n        const { touches } = event.e as TouchEvent;\n        const { clientX, clientY } = touches[0];\n        return { x: clientX, y: clientY };\n    } else if (event.e.type?.indexOf('mouse') === 0) {\n        const { clientX, clientY } = event.e as MouseEvent;\n        return { x: clientX, y: clientY };\n    }\n    // touch でも mouse でもない Event の場合は undefined\n};\n\nexport type Coords = [number, number];\nexport const isCoords = (item: unknown): item is Coords => {\n    if (Array.isArray(item)) {\n        return item.length === 2 && item.every((e) => typeof e === 'number');\n    }\n    return false;\n};\nconst Tolerance = 3;\n\nexport const compareCoords = (a: Coords, b: Coords, isStrict = false): boolean => {\n    // 許容範囲\n    const tolerance = isStrict ? 0 : Tolerance;\n    return Math.abs(a[0] - b[0]) <= tolerance && Math.abs(a[1] - b[1]) <= tolerance;\n};\n","import {\n    createContext,\n    Dispatch,\n    RefObject,\n    SetStateAction,\n    useCallback,\n    useRef,\n    useState,\n} from 'react';\nimport { CanvasHandler } from '../components/Canvas';\nimport { clone } from '../components/Canvas/util';\nimport { NoteHandler } from '../components/Note';\nimport { AppMode } from '../types/common';\nimport { CommitStructureFunction, PageSizeType, StructureCanvasState } from '../types/note';\nimport { debug } from '../utils/logger';\n\ninterface Props {\n    children: React.ReactNode;\n}\n\ninterface IAppSettingsContext {\n    mode: AppMode;\n    onChangeMode: Dispatch<SetStateAction<AppMode>>;\n    pageSizeType: PageSizeType;\n    onChangePageSize: Dispatch<SetStateAction<PageSizeType>>;\n    canvasProps?: StructureCanvasState;\n    editCanvas: (props: StructureCanvasState, callback: CommitStructureFunction) => void;\n    closeCanvas: VoidFunction;\n    noteRef: RefObject<NoteHandler>;\n    canvasRef: RefObject<CanvasHandler>;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nexport const AppSettingsContext = createContext<IAppSettingsContext>(undefined!);\n\nconst AppSettingsProvider: React.VFC<Props> = ({ children }) => {\n    // アプリのモード (note | canvas)\n    const [mode, setMode] = useState<AppMode>('note');\n    // ノートのサイズ\n    const [pageSizeType, setPageSizeType] = useState<PageSizeType>('A4');\n    // キャンバスの描画情報\n    const [canvasProps, setCanvasProps] = useState<StructureCanvasState>();\n    // ノートの参照\n    const noteRef = useRef<NoteHandler>(null);\n    // キャンバスの参照\n    const canvasRef = useRef<CanvasHandler>(null);\n    // ノートへのコールバック関数\n    const callbackRef = useRef<CommitStructureFunction>();\n\n    /**\n     * キャンバスの編集開始\n     */\n    const editCanvas = useCallback(\n        (props: StructureCanvasState, callback: CommitStructureFunction) => {\n            setMode('canvas');\n            const state = clone(props);\n            state.zoom = state.zoom * state.pageZoom;\n            setCanvasProps(state);\n            callbackRef.current = callback;\n        },\n        []\n    );\n\n    /**\n     * キャンバスの編集完了\n     */\n    const closeCanvas = useCallback(() => {\n        if (canvasRef.current) {\n            // 更新した構造データを取得する\n            const structure = canvasRef.current.getStructure();\n            debug('- canvas closed: ', structure);\n\n            // 選択中のキャンバスのデータを更新\n            if (callbackRef.current) {\n                callbackRef.current(structure);\n            }\n        }\n\n        // 状態をリセット\n        setMode('note');\n        setCanvasProps(undefined);\n    }, []);\n\n    return (\n        <AppSettingsContext.Provider\n            value={{\n                mode,\n                onChangeMode: setMode,\n                pageSizeType,\n                onChangePageSize: setPageSizeType,\n                canvasProps,\n                editCanvas,\n                closeCanvas,\n                noteRef,\n                canvasRef,\n            }}\n        >\n            {children}\n        </AppSettingsContext.Provider>\n    );\n};\n\nexport default AppSettingsProvider;\n","import { createContext, useState } from 'react';\nimport { CanvasTool } from '../types/common';\n\ninterface Props {\n    children: React.ReactNode;\n}\n\ninterface IConfigurationContext {\n    tool: CanvasTool;\n    setTool: (tool: CanvasTool) => void;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nexport const ConfigurationContext = createContext<IConfigurationContext>(undefined!);\n\nconst ConfigurationProvider: React.VFC<Props> = ({ children }) => {\n    const [tool, setTool] = useState<CanvasTool>('pen');\n\n    return (\n        <ConfigurationContext.Provider value={{ tool, setTool }}>\n            {children}\n        </ConfigurationContext.Provider>\n    );\n};\n\nexport default ConfigurationProvider;\n","/**\n * 単位: 力\n */\nexport const ForceUnitValues = ['N', 'kN'] as const;\n\n/**\n * 単位: 長さ\n */\nexport const LengthUnitValues = ['mm', 'cm', 'm'] as const;\n\nexport type ForceUnitType = typeof ForceUnitValues[number];\nexport type LengthUnitType = typeof LengthUnitValues[number];\n\n/**\n * 単位\n */\nexport interface Unit {\n    force: ForceUnitType;\n    length: LengthUnitType;\n}\n\nexport const isUnit = (item: unknown): item is Unit => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return (\n            ForceUnitValues.some((v) => value.force === v) &&\n            LengthUnitValues.some((v) => value.length === v)\n        );\n    }\n    return false;\n};\n\n/**\n * 節点ピン\n */\nexport const NodePinTypes = ['free', 'pin', 'pinX', 'pinZ', 'fixX', 'fix'] as const;\nexport type NodePinType = typeof NodePinTypes[number];\n\nexport const isNodePinType = (item: unknown): item is NodePinType => {\n    if (typeof item === 'string') {\n        return NodePinTypes.some((type) => type === item);\n    }\n    return false;\n};\n\nexport interface ShapeBase {\n    id: string;\n    name: string;\n    [key: string]: unknown;\n}\nexport const isShape = (item: unknown): item is ShapeBase => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return typeof value.id === 'string' && typeof value.name === 'string';\n    }\n    return false;\n};\n\nexport interface Node extends ShapeBase {\n    x: number;\n    y: number;\n    pin?: NodePinType;\n}\n\nexport const isNode = (item: unknown): item is Node => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return (\n            typeof value.id === 'string' &&\n            typeof value.name === 'string' &&\n            typeof value.x === 'number' &&\n            typeof value.y === 'number'\n        );\n    }\n    return false;\n};\n\nexport interface Beam extends ShapeBase {\n    nodeI: string;\n    nodeJ: string;\n}\n\nexport const isBeam = (item: unknown): item is Beam => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return (\n            typeof value.id === 'string' &&\n            typeof value.name === 'string' &&\n            typeof value.nodeI === 'string' &&\n            typeof value.nodeJ === 'string'\n        );\n    }\n    return false;\n};\n\nexport interface Force extends ShapeBase {\n    beam: string;\n    force: number;\n    // i端からの距離 (0 〜 1)\n    distanceI: number;\n    // 角度、デフォルト 90度、-179 〜 180 度の間で指定 (-180 = 180)\n    angle?: number;\n}\nexport const isForce = (item: unknown): item is Force => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return (\n            typeof value.id === 'string' &&\n            typeof value.name === 'string' &&\n            typeof value.beam === 'string' &&\n            typeof value.force === 'number' &&\n            typeof value.distanceI === 'number'\n        );\n    }\n    return false;\n};\n\nexport interface Moment extends ShapeBase {\n    beam: string;\n    moment: number;\n    // i端からの距離 (0 〜 1)\n    distanceI: number;\n}\n\nexport const isMoment = (item: unknown): item is Moment => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return (\n            typeof value.id === 'string' &&\n            typeof value.name === 'string' &&\n            typeof value.beam === 'string' &&\n            typeof value.moment === 'number' &&\n            typeof value.distanceI === 'number'\n        );\n    }\n    return false;\n};\n\nexport interface Trapezoid extends ShapeBase {\n    beam: string;\n    // kN/m\n    forceI: number;\n    // kN/m\n    forceJ: number;\n    // i端からの距離 (0 〜 1, distanceI + distanceJ <= 1)\n    distanceI: number;\n    // j端からの距離 (0 〜 1, distanceI + distanceJ <= 1)\n    distanceJ: number;\n    // 角度、デフォルト 90度、-179 〜 180 度の間で指定 (-180 = 180)\n    angle?: number;\n    // 全体座標系に垂直か、部材に垂直か デフォルト false\n    isGlobal?: boolean;\n}\n\nexport const isTrapezoid = (item: unknown): item is Trapezoid => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return (\n            typeof value.id === 'string' &&\n            typeof value.name === 'string' &&\n            typeof value.beam === 'string' &&\n            typeof value.forceI === 'number' &&\n            typeof value.distanceI === 'number' &&\n            typeof value.forceJ === 'number' &&\n            typeof value.distanceJ === 'number'\n        );\n    }\n    return false;\n};\n\nexport interface Structure {\n    version: string;\n    unit: Unit;\n    nodes: Node[];\n    beams: Beam[];\n    forces: Force[];\n    moments: Moment[];\n    trapezoids: Trapezoid[];\n}\n\nexport const isStructure = (item: unknown): item is Structure => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return (\n            typeof value.version === 'string' &&\n            isUnit(value.unit) &&\n            Array.isArray(value.nodes) &&\n            value.nodes.every(isNode) &&\n            Array.isArray(value.beams) &&\n            value.beams.every(isBeam) &&\n            Array.isArray(value.forces) &&\n            value.forces.every(isForce) &&\n            Array.isArray(value.moments) &&\n            value.moments.every(isMoment) &&\n            Array.isArray(value.trapezoids) &&\n            value.trapezoids.every(isTrapezoid)\n        );\n    }\n    return false;\n};\n\nexport type StructureFieldType = keyof Omit<Structure, 'unit'>;\n\nexport const defaultUnit: Unit = {\n    force: 'kN',\n    length: 'm',\n};\n\nexport const emptyStructure: Structure = {\n    version: '0.0.0',\n    unit: defaultUnit,\n    nodes: [],\n    beams: [],\n    forces: [],\n    moments: [],\n    trapezoids: [],\n};\n\n// TODO: 未使用\nexport const ShapeTypes = ['node', 'beam', 'force', 'trapezoid', 'background'] as const;\nexport type ShapeType = typeof ShapeTypes[number];\nexport interface IShapeData extends ShapeBase {\n    type: ShapeType;\n    // SVGに変換する際に shape を対象外とする（背景グリッドなどに設定）\n    excludeExport?: boolean;\n}\n","import { DOMSize, ShapeCoordinates, SizePosition } from './common';\nimport { emptyStructure, isStructure, Structure } from './shape';\n\nconst NoteModes = ['select', 'edit'] as const;\nexport type NoteMode = typeof NoteModes[number];\nexport const isNoteMode = (item: unknown): item is NoteMode => {\n    if (typeof item === 'string') {\n        return NoteModes.some((mode) => mode === item);\n    }\n    return false;\n};\n\nexport const PageSizeTypes = ['A4', 'A3', 'B5', 'B4'] as const;\nexport type PageSizeType = typeof PageSizeTypes[number];\nexport const isPageSizeType = (item: unknown): item is PageSizeType => {\n    if (typeof item === 'string') {\n        return PageSizeTypes.some((value) => item === value);\n    }\n    return false;\n};\n\nexport const PageSize: Record<PageSizeType, DOMSize> = {\n    A3: {\n        width: 0,\n        height: 0,\n    },\n    A4: {\n        width: 2970,\n        height: 2100,\n    },\n    B4: {\n        width: 0,\n        height: 0,\n    },\n    B5: {\n        width: 0,\n        height: 0,\n    },\n};\n\nexport interface StructureCanvasProps extends SizePosition {\n    id: string;\n    data: Structure;\n    /**\n     * SVG文字列 fabric.loadSVGFromString でパースする\n     */\n    image?: string;\n    zoom: number;\n    viewport?: number[];\n}\nexport const isStructureCanvasProps = (item: unknown): item is StructureCanvasProps => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return (\n            typeof value.id === 'string' &&\n            isStructure(value.data) &&\n            typeof value.zoom === 'number'\n        );\n    }\n    return false;\n};\n\nexport const MinCanvasSize: DOMSize = {\n    width: 160,\n    height: 90,\n};\n\nexport const defaultCanvasProps: StructureCanvasProps = {\n    id: 'Canvas_1',\n    data: { ...emptyStructure },\n    x: 100,\n    y: 100,\n    ...MinCanvasSize,\n    zoom: 1,\n};\n\nexport interface DrawSettings {\n    stroke: string;\n    strokeWidth: number;\n    eraser?: boolean;\n}\nexport const defaultDrawSettings: DrawSettings = {\n    stroke: '#000000',\n    strokeWidth: 4,\n    eraser: false,\n};\n\nexport interface PageProps {\n    size: PageSizeType;\n    zoom: number;\n    viewport: number[];\n    /**\n     * 構造データ\n     */\n    structures: StructureCanvasProps[];\n    /**\n     * 描画データ fabric.Canvas.toJSON() で取得した文字列\n     * fabric.Canvas.loadFromJSON でパースする\n     */\n    drawData?: string;\n}\n\nexport const isPageProps = (item: unknown): item is PageProps => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return (\n            isPageSizeType(value.size) &&\n            typeof value.zoom === 'number' &&\n            Array.isArray(value.viewport) &&\n            value.viewport.every((v) => typeof v === 'number') &&\n            Array.isArray(value.structures) &&\n            value.structures.every(isStructureCanvasProps)\n        );\n    }\n\n    return false;\n};\n\nexport const defaultPageProps: PageProps = {\n    size: 'A4',\n    zoom: 1,\n    viewport: [1, 0, 0, 1, 0, 0],\n    structures: [\n        {\n            ...defaultCanvasProps,\n        },\n    ],\n};\n\n/**\n * キャンバスの更新完了時にノートに更新内容を引き渡すコールバック関数\n */\nexport type CommitStructureFunction = (structure: StructureCanvasProps) => void;\n\n/**\n * キャンバスのデータ + ナビゲーションの表示位置情報\n */\nexport interface StructureCanvasState extends StructureCanvasProps {\n    // 座標\n    coordinates: ShapeCoordinates;\n    pageZoom: number;\n}\n","import { createContext, Dispatch, SetStateAction, useState } from 'react';\nimport { defaultDrawSettings, DrawSettings, NoteMode } from '../types/note';\n\ninterface Props {\n    children: React.ReactNode;\n}\n\ninterface INoteSettingsContext {\n    mode: NoteMode;\n    settings: DrawSettings;\n    onChangeMode: Dispatch<SetStateAction<NoteMode>>;\n    onChangeDrawSettings: Dispatch<SetStateAction<DrawSettings>>;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nexport const NoteSettingsContext = createContext<INoteSettingsContext>(undefined!);\n\nconst NoteSettingsProvider: React.VFC<Props> = ({ children }) => {\n    const [mode, setMode] = useState<NoteMode>('select');\n    const [settings, setSettings] = useState<DrawSettings>(defaultDrawSettings);\n\n    return (\n        <NoteSettingsContext.Provider\n            value={{ mode, settings, onChangeMode: setMode, onChangeDrawSettings: setSettings }}\n        >\n            {children}\n        </NoteSettingsContext.Provider>\n    );\n};\n\nexport default NoteSettingsProvider;\n","import { Typography } from '@mui/material';\n\nconst hash = process.env.REACT_APP_GIT_COMMIT_HASH?.substring(0, 7) ?? '';\nconst date = process.env.REACT_APP_GIT_COMMIT_DATE ?? '';\nconst version = process.env.REACT_APP_PACKAGE_VERSION ?? '';\n\nconst Version: React.VFC = () => {\n    return (\n        <Typography\n            variant=\"caption\"\n            sx={{ ml: 2 }}\n        >{`ver ${version} (${hash}: ${date})`}</Typography>\n    );\n};\n\nexport default Version;\n","import { AppBar, Toolbar, Typography } from '@mui/material';\nimport Version from './Version';\n\nconst Header: React.VFC = () => {\n    return (\n        <AppBar position=\"static\">\n            <Toolbar variant=\"dense\">\n                <Typography component=\"h1\" variant=\"h6\" color=\"inherit\">\n                    Drawing Sample\n                </Typography>\n                <Version />\n            </Toolbar>\n        </AppBar>\n    );\n};\n\nexport default Header;\n","import { fabric } from 'fabric';\nimport { Node } from '../../../types/shape';\nimport { BeamPoints } from '../types';\nimport { Vector, verticalNormalizeVector, vX, vY } from '../util';\nimport { NodeShape } from './node';\n\ntype CreateGuideLineFunction = {\n    (points: BeamPoints, offset?: number): fabric.Group;\n    (v1: Vector, v2: Vector, offset?: number): fabric.Group;\n};\n\nconst GuideLineEdgeSize = 8;\nconst GuideLineColor = 'silver';\nconst GuideLineHeight = 14;\n\nconst defaultLineOptions: fabric.ILineOptions = {\n    stroke: GuideLineColor,\n    strokeWidth: 1,\n};\nconst defaultEdgeOptions: fabric.ITriangleOptions = {\n    width: GuideLineEdgeSize,\n    height: GuideLineEdgeSize,\n    stroke: GuideLineColor,\n    strokeWidth: 1,\n    fill: GuideLineColor,\n    originX: 'center',\n    originY: 'center',\n    centeredRotation: true,\n};\nconst defaultLabelOptions: fabric.ITextboxOptions = {\n    fill: GuideLineColor,\n    height: 10,\n    fontSize: 10,\n    fontFamily: 'sans-serif',\n    textAlign: 'center',\n    evented: false,\n    selectable: false,\n};\n\nexport const createGuideLineByVectors = (p1: Vector, p2: Vector, offset: number): fabric.Group => {\n    let v1 = p1.clone();\n    let v2 = p2.clone();\n    if (v1.x > v2.x || (v1.x === v2.x && v1.y > v2.y)) {\n        [v1, v2] = [v2, v1];\n    }\n\n    // 指定された線に直交する方向\n    const verticalDir = verticalNormalizeVector(v1, v2);\n\n    if (offset !== 0) {\n        const vd = verticalDir.clone();\n        // ベクトルの内積\n        const cos = vY.dot(vd);\n        if (cos >= 0) {\n            // 直交する方向が vY の方向であれば反転させる\n            vd.invert();\n        }\n        // offset の距離だけ離す\n        vd.multiplyScalar(offset);\n        v1.add(vd);\n        v2.add(vd);\n    }\n\n    // 距離\n    const distance = v1.distance(v2);\n    // 方向\n    const dir = v2.clone().subtract(v1).normalize();\n    const angle = dir.angleDeg();\n\n    // |<-->| こんな感じに描く\n    const verticalLineLeft = new fabric.Line(\n        [0, (-1 * GuideLineHeight) / 2, 0, GuideLineHeight / 2],\n        defaultLineOptions\n    );\n    const verticalLineRight = new fabric.Line(\n        [distance, (-1 * GuideLineHeight) / 2, distance, GuideLineHeight / 2],\n        defaultLineOptions\n    );\n    const horizontalLine = new fabric.Line([0, 0, distance, 0], defaultLineOptions);\n    const edgeLeft = new fabric.Triangle({\n        top: 0,\n        left: GuideLineEdgeSize / 2,\n        angle: -90,\n        ...defaultEdgeOptions,\n    });\n    const edgeRight = new fabric.Triangle({\n        top: 0,\n        left: distance - GuideLineEdgeSize / 2,\n        angle: 90,\n        ...defaultEdgeOptions,\n    });\n\n    const guide = new fabric.Group(\n        [verticalLineLeft, edgeLeft, horizontalLine, edgeRight, verticalLineRight],\n        {\n            top: v1.y,\n            left: v1.x,\n            originX: 'left',\n            originY: 'center',\n            angle,\n        }\n    );\n\n    let labelAngle = angle;\n    let vdir = verticalDir.invert();\n    let labelPosition = v1.clone().add(vdir.multiplyScalar(5));\n    if (vdir.dot(vY) === 0) {\n        // Y軸方向と直交する場合、下端を基準にラベルを描く\n        vdir = vX.clone();\n        labelAngle = -90;\n        labelPosition = v2.clone().add(vdir.multiplyScalar(5));\n    }\n\n    const label = new fabric.Textbox(`${Math.round(distance)} m`, {\n        top: labelPosition.y,\n        left: labelPosition.x,\n        width: distance,\n        angle: labelAngle,\n        ...defaultLabelOptions,\n    });\n\n    return new fabric.Group([guide, label], {\n        selectable: false,\n        evented: false,\n        data: { type: 'guide' },\n    });\n};\n\nexport const createGuideLineByPoints = (points: BeamPoints, offset: number): fabric.Group => {\n    const p1 = new Vector(points[0], points[1]);\n    const p2 = new Vector(points[2], points[3]);\n    return createGuideLineByVectors(p1, p2, offset);\n};\n\nexport const createGuideLine: CreateGuideLineFunction = (\n    arg1: BeamPoints | Vector,\n    arg2?: Vector | number,\n    arg3?: number\n): fabric.Group => {\n    let offset = 0;\n    if (Array.isArray(arg1)) {\n        if (typeof arg2 === 'number') {\n            offset = arg2;\n        }\n        return createGuideLineByPoints(arg1, offset);\n    } else if (arg2 && typeof arg2 !== 'number') {\n        if (typeof arg3 === 'number') {\n            offset = arg3;\n        }\n        return createGuideLineByVectors(arg1, arg2, offset);\n    }\n    throw new Error('invalid parameters');\n};\n\n/**\n * 梁要素の寸法線\n * @param points\n * @returns\n */\nexport const createBeamGuideLine = (points: BeamPoints): fabric.Group => {\n    return createGuideLine(points, 50);\n};\n\n/**\n * 分布荷重の寸法線\n */\nexport const createTrapezoidGuideLine = (\n    points: BeamPoints,\n    distanceI: number,\n    distanceJ: number\n): fabric.Group => {\n    const p1 = new Vector(points[0], points[1]);\n    const p2 = new Vector(points[2], points[3]);\n    const dir = p2.clone().subtract(p1).normalize();\n    const distance = p1.distance(p2);\n\n    const vi = p1.clone().add(dir.clone().multiplyScalar(distance * distanceI));\n    const vj = p1.clone().add(dir.clone().multiplyScalar(distance * (1 - distanceJ)));\n\n    return createGuideLine(vi, vj, 50);\n};\n\ntype CreateGlobalGuideLineFunction = {\n    (pointsX: Set<number>, pointsY: Set<number>, canvasHeight: number): fabric.Group[];\n    (nodes: Node[], canvasHeight: number): fabric.Group[];\n};\n\n/**\n * 全体の寸法線の間隔\n */\nconst GlobalGuideLineInterval = 25;\n\n/**\n * 全体の寸法線を作成する\n * @param pointsX\n * @param pointsY\n * @param canvasHeight\n * @returns\n */\nconst createGlobalGuideLineBySets = (\n    pointsX: Set<number>,\n    pointsY: Set<number>,\n    canvasHeight: number\n): fabric.Group[] => {\n    const guides: fabric.Group[] = [];\n\n    if (pointsX.size === 0 || pointsY.size === 0) {\n        return [];\n    }\n\n    let minX = Number.MAX_SAFE_INTEGER;\n    let maxY = 0;\n\n    const arrX = [...pointsX].sort((a, b) => a - b);\n    minX = arrX[0];\n    const arrY = [...pointsY].sort((a, b) => a - b);\n    maxY = arrY[arrY.length - 1];\n\n    // horizontal\n    if (minX !== arrX[arrX.length - 1]) {\n        // 全体\n        const hy1 = Math.min(maxY + GlobalGuideLineInterval * 2, canvasHeight - 10);\n        const hg1 = createGuideLine([minX, hy1, arrX[arrX.length - 1], hy1]);\n        guides.push(hg1);\n\n        // 内訳\n        const hy2 = hy1 - GlobalGuideLineInterval;\n        for (let i = 0; i < arrX.length - 1; i++) {\n            const x1 = arrX[i];\n            const x2 = arrX[i + 1];\n            if (x1 !== x2) {\n                const hg = createGuideLine([x1, hy2, x2, hy2]);\n                guides.push(hg);\n            }\n        }\n    }\n\n    // vertical\n    if (arrY[0] !== maxY) {\n        // 全体\n        const vx1 = Math.max(GlobalGuideLineInterval, minX - GlobalGuideLineInterval * 2);\n        const vg1 = createGuideLine([vx1, arrY[0], vx1, maxY]);\n        guides.push(vg1);\n\n        // 内訳\n        const vx2 = vx1 + GlobalGuideLineInterval;\n        for (let i = 0; i < arrY.length - 1; i++) {\n            const y1 = arrY[i];\n            const y2 = arrY[i + 1];\n            if (y1 !== y2) {\n                const vg2 = createGuideLine([vx2, y1, vx2, y2]);\n                guides.push(vg2);\n            }\n        }\n    }\n\n    return guides;\n};\n\nconst createGlobalGuideLineByArray = (nodes: Node[], canvasHeight: number): fabric.Group[] => {\n    const guidePointsX = new Set<number>();\n    const guidePointsY = new Set<number>();\n\n    nodes.forEach(({ x, y }) => {\n        guidePointsX.add(x);\n        guidePointsY.add(y);\n    });\n\n    return createGlobalGuideLineBySets(guidePointsX, guidePointsY, canvasHeight);\n};\n\n/**\n * 全体の寸法線を作成する\n * @param arg1\n * @param arg2\n * @param arg3\n * @returns\n */\nexport const createGlobalGuideLine: CreateGlobalGuideLineFunction = (\n    arg1: Set<number> | Node[],\n    arg2: Set<number> | number,\n    arg3?: number\n): fabric.Group[] => {\n    if (Array.isArray(arg1) && typeof arg2 === 'number') {\n        return createGlobalGuideLineByArray(arg1, arg2);\n    } else if (arg1 instanceof Set && arg2 instanceof Set && typeof arg3 === 'number') {\n        return createGlobalGuideLineBySets(arg1, arg2, arg3);\n    }\n    throw new Error('invalid parameters');\n};\n\n/**\n * 全体の寸法線を再作成する\n * @param canvas\n * @param nodeMap\n * @param guides\n */\nexport const recreateGlobalGuideLines = (\n    canvas: fabric.Canvas,\n    nodeMap: Record<string, NodeShape>,\n    guides: fabric.Group[]\n): void => {\n    const nodes = Object.values(nodeMap).map((shape) => shape.data);\n    const lines = createGlobalGuideLine(nodes, canvas.height ?? 0);\n    if (guides.length > 0) {\n        // 表示済みの寸法線を削除\n        canvas.remove(...guides);\n        // 配列をクリア\n        guides.length = 0;\n    }\n    // 全体の寸法線を表示\n    canvas.add(...lines);\n    guides.push(...lines);\n};\n","import { fabric } from 'fabric';\nimport { BeamPoints } from '../types';\nimport { Vector } from '../util';\nimport { BeamShape } from './beam';\nimport { ForceShape } from './force';\nimport { TrapezoidShape } from './trapezoid';\n\n/**\n * イベントに反応しない shape の共通設定\n */\nexport const unresponseShapeProps: fabric.IObjectOptions = {\n    // イベントに反応させない\n    evented: false,\n    selectable: false,\n};\n\n/**\n * ラベルのフォント設定\n */\nexport const labelBaseProps: fabric.ITextboxOptions = {\n    fontSize: 10,\n    fontFamily: 'sans-serif',\n    height: 10,\n};\n\n/**\n * 矢印の設定\n */\nexport interface ArrowOptions extends fabric.ILineOptions {\n    arrowWidth?: number;\n    arrowEdgeSize?: number;\n    onRotating?: (event: fabric.IEvent<Event>) => void;\n    onScaling?: (event: fabric.IEvent<Event>) => void;\n    onModified?: (event: fabric.IEvent<Event>) => void;\n}\n\n// 矢印の生成\ntype CreateArrowFunction = {\n    (points: BeamPoints, options?: ArrowOptions): fabric.Group;\n    (v1: Vector, v2: Vector, options?: ArrowOptions): fabric.Group;\n};\n\nconst defaultColor = 'black';\nconst defaultStrokeWidth = 2;\nconst defaultEdgeSize = 8;\n\nconst defaultLineOptions: fabric.ILineOptions = {\n    stroke: defaultColor,\n    strokeWidth: defaultStrokeWidth,\n    originX: 'center',\n    originY: 'bottom',\n    centeredRotation: false,\n};\nconst defaultEdgeOptions: fabric.ITriangleOptions = {\n    width: defaultEdgeSize,\n    height: defaultEdgeSize,\n    stroke: defaultColor,\n    strokeWidth: 1,\n    fill: defaultColor,\n    originX: 'center',\n    originY: 'center',\n    centeredRotation: true,\n};\n\nconst createArrowByVectors = (\n    v1: Vector,\n    v2: Vector,\n    { arrowWidth, arrowEdgeSize, onRotating, onScaling, onModified, ...options }: ArrowOptions = {}\n): fabric.Group => {\n    // 距離\n    const distance = v1.distance(v2);\n    // 方向\n    const dir = v2.clone().subtract(v1).normalize();\n    const angle = 180 - dir.verticalAngleDeg();\n\n    const line = new fabric.Line([0, 0, 0, distance * -1], {\n        strokeWidth: arrowWidth,\n        ...defaultLineOptions,\n        ...options,\n    });\n\n    const edgeSize = arrowEdgeSize ?? defaultEdgeSize;\n\n    const edge = new fabric.Triangle({\n        top: (edgeSize / 2) * -1,\n        left: 0,\n        angle: -180,\n        ...defaultEdgeOptions,\n        width: edgeSize,\n        height: edgeSize,\n        stroke: options.stroke,\n        fill: options.fill,\n    });\n\n    const arrow = new fabric.Group([line, edge], {\n        ...options,\n        top: v1.y,\n        left: v1.x,\n        originX: 'center',\n        originY: 'bottom',\n        centeredRotation: false,\n        angle,\n    });\n    arrow.setControlsVisibility({\n        bl: false,\n        br: false,\n        mb: false,\n        ml: false,\n        mr: false,\n        mt: true,\n        tl: false,\n        tr: false,\n        mtr: true,\n    });\n\n    return arrow;\n};\n\nconst createArrowByPoints = (points: BeamPoints, options?: ArrowOptions): fabric.Group => {\n    const p1 = new Vector(points[0], points[1]);\n    const p2 = new Vector(points[2], points[3]);\n    return createArrowByVectors(p1, p2, options);\n};\n\n/**\n * 矢印の作成 (始点を中心に回転・伸縮、始点に三角がくる)\n * @param arg1\n * @param arg2\n * @param arg3\n * @returns\n */\nexport const createArrow: CreateArrowFunction = (\n    arg1: BeamPoints | Vector,\n    arg2?: Vector | ArrowOptions,\n    arg3?: ArrowOptions\n): fabric.Group => {\n    if (Array.isArray(arg1)) {\n        return createArrowByPoints(arg1, arg2 as ArrowOptions);\n    } else if (arg2) {\n        return createArrowByVectors(arg1, arg2 as Vector, arg3);\n    }\n    throw new Error('invalid parameters');\n};\n\n/**\n * 梁要素の寸法線、集中荷重、分布荷重の表示・非表示を切り替える\n * @param shape\n * @param forceMap\n * @param trapezoidMap\n * @param visible\n */\nexport const setVisibledToBeamParts = (\n    shape: BeamShape,\n    forceMap: Record<string, ForceShape[]>,\n    trapezoidMap: Record<string, TrapezoidShape[]>,\n    visible = true\n): void => {\n    // 寸法線を非表示とする\n    if (shape.guide) {\n        shape.guide.visible = visible;\n    }\n    // 集中荷重を非表示とする\n    const forces = forceMap[shape.data.id];\n    if (forces) {\n        forces.forEach(({ force }) => {\n            force.visible = visible;\n        });\n    }\n    // 分布荷重を非表示とする\n    const trapezoids = trapezoidMap[shape.data.id];\n    if (trapezoids) {\n        trapezoids.forEach(({ arrows, line, labels, guide }) => {\n            arrows.forEach((arrow) => {\n                arrow.visible = visible;\n            });\n            line.visible = visible;\n            labels.forEach((label) => {\n                label.visible = visible;\n            });\n            if (guide) {\n                guide.visible = visible;\n            }\n        });\n    }\n};\n","import { fabric } from 'fabric';\nimport { Force } from '../../../types/shape';\nimport { lerp, Vector, verticalNormalizeVector } from '../util';\nimport { BeamShape } from './beam';\nimport { createArrow, labelBaseProps, unresponseShapeProps } from './common';\n\nexport type ForceShape = {\n    data: Force;\n    force: fabric.Group;\n    label: fabric.Textbox;\n};\n\n/**\n * 集中荷重の基本の長さ\n */\nconst ForceBaseLength = 30;\nconst ForceColor = 'orange';\n\nconst defaultForceLabelProps: fabric.ITextOptions = {\n    ...unresponseShapeProps,\n    ...labelBaseProps,\n    fill: ForceColor,\n    textAlign: 'left',\n};\n\n/**\n * 集中荷重の作成\n * @param force\n * @param points\n * @param ave\n */\nexport const createForce = (\n    force: Force,\n    points: [number, number, number, number],\n    ave: number,\n    readonly = false,\n    unit = 'kN'\n): ForceShape => {\n    // 梁要素の i端、j端\n    const pi = new Vector(points[0], points[1]);\n    const pj = new Vector(points[2], points[3]);\n    // 集中荷重の始点\n    const head = lerp(pi, pj, force.distanceI);\n    // 集中荷重の方向\n    const dir = verticalNormalizeVector(pi, pj);\n    // 大きさ\n    const ratio = force.force / ave;\n    const forceLength = isNaN(ratio) ? ForceBaseLength : ForceBaseLength * ratio;\n    // 集中荷重の終点\n    const tail = head.clone().add(dir.clone().multiplyScalar(forceLength));\n\n    // 矢印\n    const arrow = createArrow(head, tail, {\n        fill: ForceColor,\n        stroke: ForceColor,\n        name: force.id,\n        data: {\n            type: 'force',\n            ...force,\n        },\n        selectable: !readonly,\n        evented: !readonly,\n    });\n\n    // ラベルの基準位置\n    const beamDir = pj.clone().subtract(pi).normalize();\n    const labelPosition = head.clone().add(beamDir.clone().multiplyScalar(5));\n    const angle = dir.angleDeg();\n\n    const label = new fabric.Textbox(` ${force.force} ${unit}`, {\n        ...defaultForceLabelProps,\n        top: labelPosition.y,\n        left: labelPosition.x,\n        width: Math.max(forceLength, 140),\n        angle,\n        // デフォルトで非表示\n        visible: false,\n    });\n\n    return { data: force, force: arrow, label };\n};\n\n/**\n * 平均値を計算する\n * @param forces\n * @returns\n */\nexport const calcForceAverage = (forces: Force[]): number => {\n    let forceAverage = 0;\n    if (forces.length > 0) {\n        const { force: total } = forces.reduce((prev, current) => {\n            const item: Force = {\n                ...prev,\n                force: prev.force + current.force,\n            };\n            return item;\n        });\n        forceAverage = total / forces.length;\n    }\n\n    return forceAverage;\n};\n\n/**\n * 梁要素に紐づく集中荷重を再作成する\n * @param canvas\n * @param beamShape\n * @param forceMap\n */\nexport const recreateForces = (\n    canvas: fabric.Canvas,\n    beamShape: BeamShape,\n    forceMap: Record<string, ForceShape[]>,\n    forceAverage: number\n): void => {\n    const forces = forceMap[beamShape.data.id];\n    if (forces) {\n        const newForces: ForceShape[] = [];\n        forces.forEach((forceShape) => {\n            const data = forceShape.data;\n\n            // キャンバスから集中荷重を削除\n            canvas.remove(forceShape.force, forceShape.label);\n\n            const fs = createForce(data, beamShape.points, forceAverage);\n            newForces.push(fs);\n            // キャンバスに追加\n            canvas.add(fs.force);\n            canvas.add(fs.label);\n        });\n        forceMap[beamShape.data.id] = newForces;\n    }\n};\n\n/**\n * 集中荷重を更新する\n * @param canvas\n * @param forceShape\n * @param beamShape\n * @param forceAverage\n */\nexport const updateForce = (\n    canvas: fabric.Canvas,\n    data: Force,\n    forceShape: ForceShape,\n    beamShape: BeamShape,\n    forceAverage: number\n): void => {\n    // キャンバスから集中荷重を削除\n    canvas.remove(forceShape.force, forceShape.label);\n    // 集中荷重を再作成\n    const { force, label } = createForce(data, beamShape.points, forceAverage);\n    // ForceShape にセット\n    forceShape.force = force;\n    forceShape.label = label;\n    // キャンバスに追加\n    canvas.add(force, label);\n};\n\n/**\n * 集中荷重の削除\n * (NOTE: 集中荷重の平均値を再計算すること)\n * @param canvas\n * @param beamId\n * @param force\n * @param forceMap\n */\nexport const removeForce = (\n    canvas: fabric.Canvas,\n    force: ForceShape,\n    beamId: string,\n    forceMap: Record<string, ForceShape[]>\n): void => {\n    canvas.remove(force.force, force.label);\n\n    const forces = forceMap[beamId];\n    if (forces) {\n        // 削除対象の集中荷重を除外\n        const list = forces.filter((shape) => shape.data.id !== force.data.id);\n        forceMap[beamId] = list;\n    }\n};\n","import { fabric } from 'fabric';\nimport { Moment } from '../../../types/shape';\nimport { labelBaseProps, unresponseShapeProps } from '../factory';\nimport CanvasManager from '../manager';\nimport { compareCoords, lerp, round, Vector, vY } from '../util';\nimport { BeamShape } from './BeamShape';\n\nconst MomentColor = 'red';\nconst MomentIconURL = '/assets/images/moment.svg';\nconst IconSize = 24;\n\nconst defaultMomentProps: fabric.ICircleOptions = {\n    fill: 'transparent',\n    originX: 'center',\n    originY: 'center',\n    lockRotation: true,\n    lockScalingX: true,\n    lockScalingY: true,\n    hasBorders: false,\n    hasControls: false,\n};\n\nconst defaultMomentImageProps: fabric.IObjectOptions = {\n    originX: 'center',\n    originY: 'center',\n    selectable: false,\n    evented: false,\n};\n\n/**\n * ラベルの設定\n */\nconst defaultMomentLabelProps: fabric.ITextOptions = {\n    ...unresponseShapeProps,\n    ...labelBaseProps,\n    fill: MomentColor,\n    originX: 'center',\n    originY: 'top',\n    textAlign: 'center',\n};\n\nexport class MomentShape {\n    public data: Moment;\n    public moment: fabric.Circle;\n    public image: fabric.Object | undefined;\n    public label: fabric.Textbox;\n\n    private manager: CanvasManager;\n    private longpressTimer: NodeJS.Timer | undefined;\n    private dragging = false;\n    private _readonly = false;\n\n    // ドラッグ中に梁要素の Shape を保持する\n    // メモリリークを避けるため、ドラッグ完了後にクリアすること\n    private beam: BeamShape | undefined;\n    private vi = new Vector(0, 0);\n    private vj = new Vector(0, 0);\n\n    // ドラッグ中の位置\n    private position = new Vector(0, 0);\n    private dragPoint = new Vector(0, 0);\n    // ドラッグ可能な範囲\n    private draggableMin = Number.MIN_SAFE_INTEGER;\n    private draggableMax = Number.MAX_SAFE_INTEGER;\n\n    constructor(manager: CanvasManager, params: Moment) {\n        this.manager = manager;\n        this.data = params;\n\n        this._readonly = this.manager.readonly;\n\n        // 矢印、ラベル生成\n        [this.moment, this.label] = this.create();\n        this.manager.canvas.add(this.moment, this.label);\n\n        // イベント割当\n        this.attachEvent();\n    }\n\n    public get readonly(): boolean {\n        return this._readonly;\n    }\n    public set readonly(value: boolean) {\n        this._readonly = value;\n        // readonly時はイベントに反応しない\n        this.moment.selectable = !value;\n        this.moment.evented = !value;\n    }\n\n    public get visible(): boolean {\n        return this.moment.visible ?? true;\n    }\n\n    public set visible(value: boolean) {\n        this.moment.visible = value;\n        this.label.visible = value;\n    }\n\n    private create(): [fabric.Circle, fabric.Textbox] {\n        const { id, beam, distanceI } = this.data;\n        // 集中荷重の対象梁要素\n        const beamShape = this.manager.beamMap[beam];\n        const { points } = beamShape;\n\n        // 梁要素の i端、j端\n        const pi = new Vector(points[0], points[1]);\n        const pj = new Vector(points[2], points[3]);\n        // モーメント荷重の位置\n        const position = lerp(pi, pj, distanceI);\n\n        // アイコンと同サイズの円\n        const moment = new fabric.Circle({\n            ...defaultMomentProps,\n            name: id,\n            data: {\n                type: 'moment',\n                ...this.data,\n            },\n            top: position.y,\n            left: position.x,\n            radius: IconSize / 2,\n            selectable: !this.readonly,\n            evented: !this.readonly,\n        });\n\n        // アイコンを配置\n        fabric.loadSVGFromURL(`${process.env.PUBLIC_URL}${MomentIconURL}`, (results, options) => {\n            const svg = fabric.util.groupSVGElements(results, options);\n            svg.set({ stroke: MomentColor });\n            if (svg.type === 'path') {\n                this.image = new fabric.Group([svg]);\n            } else {\n                this.image = svg;\n            }\n\n            // プロパティの設定\n            this.image.set({\n                ...defaultMomentImageProps,\n                name: `image/${this.data.id}`,\n                data: {\n                    type: 'moment/image',\n                    ...this.data,\n                },\n                top: position.y,\n                left: position.x,\n                scaleX: IconSize / 64,\n                scaleY: IconSize / 64,\n                flipY: this.data.moment < 0, // マイナス値なら反転させる\n            });\n            // 表示\n            this.manager.canvas.add(this.image);\n        });\n\n        // ラベルの基準位置\n        const labelPosition = position.clone().add(vY.clone().multiplyScalar(IconSize / 2 + 5));\n\n        const label = new fabric.Textbox(`${this.data.moment} kN`, {\n            ...defaultMomentLabelProps,\n            top: labelPosition.y,\n            left: labelPosition.x,\n            width: 100,\n            // デフォルトで非表示\n            visible: false,\n        });\n\n        // ドラッグ時に使用するので位置を保持する\n        this.position.copy(position);\n\n        return [moment, label];\n    }\n\n    public update(params?: Moment): void {\n        if (params) {\n            this.data = params;\n        }\n\n        // ラベルが表示されていた場合、選択されていたとみなす\n        const selected = this.label.visible ?? false;\n\n        // キャンバスから削除\n        this.remove(true);\n\n        // 再作成\n        [this.moment, this.label] = this.create();\n        this.manager.canvas.add(this.moment, this.label);\n\n        // イベント割当\n        this.attachEvent();\n\n        if (selected) {\n            // 選択状態を復元する\n            this.select();\n        }\n    }\n\n    public remove(onlyRemoveFromCanvas = false): void {\n        // イベントを削除\n        this.moment.off();\n        // キャンバスから削除\n        this.manager.canvas.remove(this.moment, this.label);\n        if (this.image) {\n            this.manager.canvas.remove(this.image);\n        }\n\n        if (!onlyRemoveFromCanvas) {\n            const moments = this.manager.momentMap[this.data.beam];\n            if (moments) {\n                // 自身を配列から除去\n                const list = moments.filter((shape) => shape.data.id !== this.data.id);\n                this.manager.momentMap[this.data.beam] = list;\n            }\n        }\n    }\n\n    /**\n     * 選択\n     */\n    public select(): void {\n        this.manager.canvas.setActiveObject(this.moment);\n    }\n\n    // イベントハンドラ\n\n    private attachEvent() {\n        this.moment.on('selected', this.onSelected.bind(this));\n        this.moment.on('deselected', this.onDeselected.bind(this));\n        // クリック・長押し\n        this.moment.on('mousedown', this.onMouseDown.bind(this));\n        this.moment.on('mouseup', this.onMouseUp.bind(this));\n        this.moment.on('mousedblclick', this.onDblClick.bind(this));\n        // ドラッグ\n        this.moment.on('moving', this.onMoving.bind(this));\n        this.moment.on('moved', this.onMoved.bind(this));\n    }\n\n    private onSelected(): void {\n        this.label.visible = true;\n    }\n\n    private onDeselected(): void {\n        this.label.visible = false;\n    }\n\n    private onMouseDown(event: fabric.IEvent<Event>): void {\n        if (this.readonly) {\n            // 読み取り専用時は何もしない\n            return;\n        }\n\n        if (this.manager.tool === 'delete') {\n            this.remove();\n            return;\n        }\n\n        if (['select', 'moment'].includes(this.manager.tool) && event.target) {\n            // すでに長押しを実行中ならタイマーキャンセル\n            if (this.longpressTimer) {\n                clearTimeout(this.longpressTimer);\n                this.longpressTimer = undefined;\n            }\n\n            const shape = this.moment;\n            // 長押し前の現在位置を保持する\n            const { top: beforeTop, left: beforeLeft } = shape.getBoundingRect(true, true);\n\n            // 長押し判定\n            this.longpressTimer = setTimeout(() => {\n                // 長押し後の現在位置\n                const { top: afterTop, left: afterLeft } = shape.getBoundingRect(true, true);\n                // 位置が変わっていなければ longpress とする\n                if (compareCoords([beforeLeft, beforeTop], [afterLeft, afterTop])) {\n                    // ダイアログの表示\n                    this.manager.openMomentDialog(event, this);\n                }\n                this.longpressTimer = undefined;\n            }, CanvasManager.LongpressInterval);\n        }\n    } // end onMouseDown\n\n    private onMouseUp(event: fabric.IEvent<Event>): void {\n        if (this.longpressTimer) {\n            clearTimeout(this.longpressTimer);\n            this.longpressTimer = undefined;\n        }\n    }\n\n    private onDblClick(event: fabric.IEvent<Event>): void {\n        if (!this.readonly) {\n            // ダイアログの表示\n            this.manager.openMomentDialog(event, this);\n        }\n    }\n\n    private calcMovedPosition() {\n        if (this.beam) {\n            // ドラッグ位置\n            this.dragPoint.x = this.moment.left ?? 0;\n            this.dragPoint.y = this.moment.top ?? 0;\n\n            // 元の位置から現在位置までの長さ\n            const dragDis = this.position.distance(this.dragPoint);\n            // ドラッグの方向\n            const dragDir = this.dragPoint.clone().subtract(this.position).normalize();\n            // ドラッグの角度\n            const angle = 180 - dragDir.verticalAngleDeg();\n            // ドラッグ方向と梁要素のなす角度\n            const deg = this.beam.angle - angle;\n            const rad = (deg * Math.PI) / 180;\n            // ドラッグされた長さを梁要素上の長さに変換\n            let dist = dragDis * Math.cos(rad);\n\n            if (this.draggableMin > dist) {\n                dist = this.draggableMin;\n            } else if (this.draggableMax < dist) {\n                dist = this.draggableMax;\n            }\n\n            // 新しい位置\n            this.dragPoint\n                .copy(this.position)\n                .add(this.beam.direction.clone().multiplyScalar(dist));\n        }\n    }\n\n    private onMoving(event: fabric.IEvent<Event>): void {\n        if (['select', 'moment'].includes(this.manager.tool)) {\n            if (!this.dragging) {\n                // ラベルを非表示\n                this.label.visible = false;\n                // 対象の梁要素を取得\n                this.beam = this.manager.beamMap[this.data.beam];\n\n                // ドラッグ可能範囲を計算\n                [this.vi.x, this.vi.y] = [this.beam.points[0], this.beam.points[1]];\n                [this.vj.x, this.vj.y] = [this.beam.points[2], this.beam.points[3]];\n\n                this.draggableMin = this.vi.distance(this.position) * -1;\n                this.draggableMax = this.vj.distance(this.position);\n\n                // 初期位置を初期化\n                this.dragPoint.copy(this.position);\n\n                this.dragging = true;\n            }\n\n            // 位置の計算\n            this.calcMovedPosition();\n            // 移動\n            this.moment.left = this.dragPoint.x;\n            this.moment.top = this.dragPoint.y;\n            if (this.image) {\n                this.image.left = this.dragPoint.x;\n                this.image.top = this.dragPoint.y;\n            }\n        }\n    }\n\n    private onMoved(event: fabric.IEvent<Event>): void {\n        if (this.beam) {\n            // ドラッグ位置を計算\n            this.calcMovedPosition();\n            // i端からの距離を更新\n            const distI = this.vi.distance(this.dragPoint);\n            this.data.distanceI = round(distI / this.beam.length, 2);\n\n            // 位置を再計算\n            this.position.copy(\n                this.vi\n                    .clone()\n                    .add(\n                        this.beam.direction\n                            .clone()\n                            .multiplyScalar(this.beam.length * this.data.distanceI)\n                    )\n            );\n            this.moment.left = this.position.x;\n            this.moment.top = this.position.y;\n            if (this.image) {\n                this.image.left = this.position.x;\n                this.image.top = this.position.y;\n            }\n\n            // ラベル位置を更新\n            const lp = this.position.clone().add(vY.clone().multiplyScalar(IconSize / 2 + 5));\n            this.label.left = lp.x;\n            this.label.top = lp.y;\n            this.label.visible = true;\n        }\n\n        // ドラッグ終了\n        this.beam = undefined;\n        this.draggableMin = Number.MIN_SAFE_INTEGER;\n        this.draggableMax = Number.MAX_SAFE_INTEGER;\n        this.dragging = false;\n    }\n}\n","import { fabric } from 'fabric';\nimport { v4 as uuid } from 'uuid';\nimport { ForceShape, NodeShape } from '.';\nimport { Beam, Force, isBeam, Moment } from '../../../types/shape';\nimport { createBeamGuideLine } from '../factory';\nimport CanvasManager from '../manager';\nimport { BeamPoints } from '../types';\nimport { round, snap, Vector, vY } from '../util';\nimport { MomentShape } from './MomentShape';\n\nexport class BeamShape {\n    public data: Beam;\n    public beam: fabric.Line;\n    public guide?: fabric.Group;\n\n    public points: BeamPoints = [0, 0, 0, 0];\n    public direction: Vector = new Vector(0, 0);\n    public length = 1;\n    public angle = 0;\n\n    private manager: CanvasManager;\n    private dragging = false;\n    private _readonly = false;\n\n    private vi = new Vector(0, 0);\n    private vj = new Vector(0, 0);\n\n    // ドラッグ中に関連する節点、梁要素の Shape を保持する\n    // メモリリークを避けるため、ドラッグ完了後にクリアすること\n    private nodeI: NodeShape | undefined;\n    private nodeJ: NodeShape | undefined;\n    private relationBeams: BeamShape[] | undefined;\n\n    constructor(manager: CanvasManager, params: Beam) {\n        this.manager = manager;\n        this.data = params;\n\n        const nodeI = this.manager.nodeMap[params.nodeI];\n        const nodeJ = this.manager.nodeMap[params.nodeJ];\n        this._readonly = this.manager.readonly;\n\n        // 梁要素\n        this.beam = this.create([nodeI.data.x, nodeI.data.y, nodeJ.data.x, nodeJ.data.y], params, {\n            // readonly時はイベントに反応しない\n            selectable: !this.readonly,\n            evented: !this.readonly,\n        });\n\n        // 寸法線\n        this.guide = createBeamGuideLine(this.points);\n        this.guide.visible = false;\n\n        // キャンバスに追加\n        this.manager.canvas.add(this.beam, this.guide);\n\n        // イベント設定\n        this.attachEvents();\n    }\n\n    public get readonly(): boolean {\n        return this._readonly;\n    }\n    public set readonly(value: boolean) {\n        this._readonly = value;\n        // readonly時はイベントに反応しない\n        this.beam.selectable = !value;\n        this.beam.evented = !value;\n    }\n\n    private createBeamByVectors(\n        vi: Vector,\n        vj: Vector,\n        data: Beam,\n        options: fabric.ILineOptions\n    ): fabric.Line {\n        // 方向\n        this.direction = vj.clone().subtract(vi).normalize();\n        // 長さ\n        this.length = vi.distance(vj);\n        // 角度 (Vector では Y軸が上方向なので 上下反転させる)\n        this.angle = 180 - this.direction.verticalAngleDeg();\n\n        const beam = new fabric.Line([0, 0, 0, this.length], {\n            top: vi.y,\n            left: vi.x,\n            angle: this.angle,\n            // 始点を基準に回転させる\n            originX: 'center',\n            originY: 'bottom',\n            centeredRotation: false,\n            // 描画設定\n            stroke: 'black',\n            strokeWidth: 4,\n            ...options,\n            name: data.id,\n            data: {\n                type: 'beam',\n                ...data,\n            },\n        });\n        beam.setControlsVisibility({\n            bl: false,\n            br: false,\n            mb: false,\n            ml: false,\n            mr: false,\n            mt: true,\n            tl: false,\n            tr: false,\n            mtr: true,\n        });\n\n        this.points = [vi.x, vi.y, vj.x, vj.y];\n        this.vi = vi;\n        this.vj = vj;\n\n        return beam;\n    }\n\n    createBeamByPoints(points: BeamPoints, data: Beam, options: fabric.ILineOptions): fabric.Line {\n        const p1 = new Vector(points[0], points[1]);\n        const p2 = new Vector(points[2], points[3]);\n        return this.createBeamByVectors(p1, p2, data, options);\n    }\n\n    create(points: BeamPoints, data: Beam, options?: fabric.ILineOptions): fabric.Line;\n    create(vi: Vector, vj: Vector, data: Beam, options?: fabric.ILineOptions): fabric.Line;\n\n    create(\n        arg1: BeamPoints | Vector,\n        arg2: Vector | Beam,\n        arg3?: Beam | fabric.ILineOptions,\n        arg4?: fabric.ILineOptions\n    ): fabric.Line {\n        if (Array.isArray(arg1) && isBeam(arg2)) {\n            return this.createBeamByPoints(arg1, arg2, arg3 ?? {});\n        } else if (isBeam(arg3)) {\n            return this.createBeamByVectors(arg1 as Vector, arg2 as Vector, arg3, arg4 ?? {});\n        }\n        throw new Error('invalid parameters');\n    }\n\n    /**\n     * 寸法線を更新\n     */\n    private updateGuide() {\n        if (this.guide) {\n            this.manager.canvas.remove(this.guide);\n        }\n        this.guide = createBeamGuideLine(this.points);\n        this.guide.visible = false;\n        this.manager.canvas.add(this.guide);\n    }\n\n    private updateBeamByVectors(vi: Vector, vj: Vector): void {\n        // 方向\n        const direction = vj.clone().subtract(vi).normalize();\n        // 長さ\n        const length = vi.distance(vj);\n        // 角度 (Vector では Y軸が上方向なので 上下反転させる)\n        const angle = 180 - direction.verticalAngleDeg();\n\n        const points: BeamPoints = [vi.x, vi.y, vj.x, vj.y];\n\n        this.beam.scaleX = 1;\n        this.beam.scaleY = 1;\n        // dirty=true を指定していないと、一定の長さ以下の梁要素が描画できない\n        this.beam.dirty = true;\n        this.beam.top = vi.y;\n        this.beam.left = vi.x;\n        this.beam.height = length;\n        this.beam.rotate(angle);\n\n        // プロパティを更新\n        this.direction = direction;\n        this.length = length;\n        this.angle = angle;\n        this.points = points;\n        this.vi = vi;\n        this.vj = vj;\n\n        // 寸法線を更新\n        this.updateGuide();\n    }\n\n    private updateBeamByPoints(points: BeamPoints): void {\n        const p1 = new Vector(points[0], points[1]);\n        const p2 = new Vector(points[2], points[3]);\n        this.updateBeamByVectors(p1, p2);\n    }\n\n    update(): void;\n    update(points: BeamPoints): void;\n    update(vi: Vector, vj: Vector): void;\n\n    public update(arg1?: BeamPoints | Vector, arg2?: Vector): void {\n        if (Array.isArray(arg1)) {\n            this.updateBeamByPoints(arg1);\n            return;\n        } else if (arg1 && arg2) {\n            this.updateBeamByVectors(arg1, arg2);\n            return;\n        } else {\n            this.updateBeamByPoints(this.points);\n        }\n\n        throw new Error('invalid parameters');\n    }\n\n    /**\n     * 梁要素を削除する\n     * (NOTE: removeBeam 後、集中荷重と分布荷重の平均値を更新すること)\n     */\n    public remove(): void {\n        const { canvas, forceMap, trapezoidMap, beamMap, nodeBeamMap } = this.manager;\n        const beamId = this.data.id;\n\n        // 集中荷重を削除\n        const forces = forceMap[beamId];\n        if (forces) {\n            forces.forEach((shape) => {\n                shape.remove();\n            });\n            delete forceMap[beamId];\n        }\n        // 分布荷重を削除\n        const trapezoids = trapezoidMap[beamId];\n        if (trapezoids) {\n            trapezoids.forEach((shape) => {\n                shape.remove();\n            });\n            delete trapezoidMap[beamId];\n        }\n\n        // nodeBeamMap から梁要素を削除\n        [this.data.nodeI, this.data.nodeJ].forEach((nodeId) => {\n            const beams = nodeBeamMap[nodeId];\n            if (beams) {\n                // 削除対象の梁要素を除外\n                const list = beams.filter((shape) => shape.data.id !== beamId);\n                nodeBeamMap[nodeId] = list;\n            }\n        });\n\n        // 梁要素を削除\n        canvas.remove(this.beam);\n        if (this.guide) {\n            canvas.remove(this.guide);\n        }\n        delete beamMap[beamId];\n    }\n\n    /**\n     * 寸法線、集中荷重、分布荷重の表示・非表示を切り替える\n     * @param visible\n     */\n    public setVisibleParts(visible = true): void {\n        const { forceMap, trapezoidMap } = this.manager;\n        if (this.guide) {\n            this.guide.visible = visible;\n        }\n\n        // 集中荷重\n        const forces = forceMap[this.data.id];\n        if (forces) {\n            forces.forEach((shape) => {\n                shape.visible = visible;\n            });\n        }\n\n        // 分布荷重\n        const trapezoids = trapezoidMap[this.data.id];\n        if (trapezoids) {\n            trapezoids.forEach((shape) => {\n                shape.visible = visible;\n            });\n        }\n    }\n\n    /**\n     * 寸法線、集中荷重、分布荷重 を更新する\n     */\n    public updateParts(): void {\n        const { forceMap, trapezoidMap } = this.manager;\n        // 寸法線の更新\n        this.updateGuide();\n        // 集中荷重\n        const forces = forceMap[this.data.id];\n        if (forces) {\n            forces.forEach((shape) => {\n                shape.update();\n            });\n        }\n        // 分布荷重\n        const trapezoids = trapezoidMap[this.data.id];\n        if (trapezoids) {\n            trapezoids.forEach((shape) => {\n                shape.update();\n            });\n        }\n    }\n\n    /**\n     * i端の位置と長さ、角度からj端の位置を計算する\n     * @returns\n     */\n    private calcPoints(snapping = false): BeamPoints {\n        // i端の位置\n        let { top: iy = 0, left: ix = 0 } = this.beam;\n\n        if (snapping) {\n            [ix, iy] = snap([ix, iy], this.manager.snapSize);\n        }\n\n        this.vi.x = ix;\n        this.vi.y = iy;\n        // j端の位置を計算\n        this.vj.copy(this.vi);\n        this.vj.add(this.direction.clone().multiplyScalar(this.length));\n\n        return [this.vi.x, this.vi.y, this.vj.x, this.vj.y];\n    }\n\n    /**\n     * 指定座標を元に i端からの距離比を計算\n     * @param point\n     * @returns\n     */\n    public calcRatio(point: Vector): number {\n        // i端からクリック位置までの距離\n        const distance = this.vi.distance(point);\n        // i端からクリック位置の方向\n        const dir = point.clone().subtract(this.vi).normalize();\n        // クリック方向の角度\n        const angle = 180 - dir.verticalAngleDeg();\n        // クリック方向と梁要素のなす角度\n        const deg = this.angle - angle;\n        // ラジアンに変換\n        const rad = deg * (Math.PI / 180);\n        // 梁要素上の長さ\n        const length = distance * Math.cos(rad);\n        // 比率に変換\n        let ratio = round(length / this.length, 2);\n\n        // 0 〜 1 の範囲に修正\n        if (ratio < 0) {\n            ratio = 0;\n        }\n        if (ratio > 1) {\n            ratio = 1;\n        }\n\n        return ratio;\n    }\n\n    /**\n     * ドラッグ終了時の共通処理\n     */\n    private completeDrag() {\n        if (this.nodeI && this.nodeJ) {\n            const nodeI = this.nodeI;\n            const nodeJ = this.nodeJ;\n            const { nodeMap, nodeBeamMap, beamMap } = this.manager;\n            const [ix, iy, jx, jy] = this.points;\n\n            // 置き換える節点 (key: 削除される節点ID、value: 置き換える節点)\n            const replaceNodes: Record<string, NodeShape> = {};\n            // 削除する梁要素\n            const removingBeams: BeamShape[] = [];\n            // 更新された梁要素\n            const modifiedBeams: BeamShape[] = [this];\n\n            // 節点IDを配列にしておく\n            const nodeIds = [nodeI.data.id, nodeJ.data.id];\n\n            // 絶対に大丈夫だけど念の為に空配列を準備しておく\n            nodeIds.forEach((nodeId) => {\n                if (typeof nodeBeamMap[nodeId] === 'undefined') {\n                    nodeBeamMap[nodeId] = [];\n                }\n            });\n\n            // 梁要素をドラッグした結果、i端あるいはj端の節点が\n            // 別の節点と同一座標になった場合、同一座標の節点をドラッグ中の節点に置換する\n            Object.values(nodeMap).forEach((nodeShape) => {\n                // ドラッグした梁要素の i端/j端 は対象外\n                if (nodeIds.includes(nodeShape.data.id)) {\n                    return;\n                }\n                if (nodeShape.data.x === ix && nodeShape.data.y === iy) {\n                    // i端の節点と置き換える\n                    replaceNodes[nodeShape.data.id] = nodeI;\n                } else if (nodeShape.data.x === jx && nodeShape.data.y === jy) {\n                    // j端の節点と置き換える\n                    replaceNodes[nodeShape.data.id] = nodeJ;\n                }\n            });\n\n            // 梁要素の節点を置換する\n            Object.values(beamMap).forEach((beamShape) => {\n                // ドラッグした梁要素は除外\n                if (beamShape.data.id === this.data.id) {\n                    return;\n                }\n\n                // i端あるいはj端の同一座標の節点を置き換える\n                let replacedI = false;\n                let replacedJ = false;\n                if (replaceNodes[beamShape.data.nodeI]) {\n                    replacedI = true;\n                    beamShape.data.nodeI = replaceNodes[beamShape.data.nodeI].data.id;\n                }\n                if (replaceNodes[beamShape.data.nodeJ]) {\n                    replacedJ = true;\n                    beamShape.data.nodeJ = replaceNodes[beamShape.data.nodeJ].data.id;\n                }\n\n                if (replacedI && replacedJ) {\n                    // i端とj端の両方の節点を置換した\n                    // → ドラッグした梁要素と同じ位置にある梁要素なので削除する\n                    removingBeams.push(beamShape);\n                    return;\n                }\n\n                const points = beamShape.points;\n                let modified = false;\n                // i端あるいはj端がドラッグした梁要素と一致する\n                // → 再描画する\n                if (beamShape.data.nodeI === nodeI.data.id) {\n                    points[0] = ix;\n                    points[1] = iy;\n                    modified = true;\n                }\n                if (beamShape.data.nodeI === nodeJ.data.id) {\n                    points[0] = jx;\n                    points[1] = jy;\n                    modified = true;\n                }\n                if (beamShape.data.nodeJ === nodeI.data.id) {\n                    points[2] = ix;\n                    points[3] = iy;\n                    modified = true;\n                }\n                if (beamShape.data.nodeJ === nodeJ.data.id) {\n                    points[2] = jx;\n                    points[3] = jy;\n                    modified = true;\n                }\n                if (modified) {\n                    beamShape.update(points);\n\n                    // 更新した結果、長さが 0 になった梁要素を削除する\n                    if (beamShape.length === 0) {\n                        removingBeams.push(beamShape);\n                    } else {\n                        // 更新対象としてマーク\n                        modifiedBeams.push(beamShape);\n                    }\n                }\n            }); // end 梁要素の節点を置換\n\n            if (removingBeams.length > 0) {\n                // 梁要素の削除処理\n                removingBeams.forEach((beam) => {\n                    beam.remove();\n                });\n\n                // 集中荷重の平均値を更新\n                this.manager.calcForceAverage();\n                // 分布荷重の平均値を更新\n                this.manager.calcTrapezoidAverage();\n            }\n\n            // 節点の削除処理\n            Object.entries(replaceNodes).forEach(([removedNodeId, nodeShape]) => {\n                // nodeBeamMap の付け替え\n                const beams = nodeBeamMap[removedNodeId];\n                if (beams) {\n                    const list = nodeBeamMap[nodeShape.data.id] ?? [];\n                    beams.forEach((beamShape) => {\n                        if (list.some((beam) => beam.data.id !== beamShape.data.id)) {\n                            list.push(beamShape);\n                        }\n                    });\n                    nodeBeamMap[nodeShape.data.id] = list;\n                }\n\n                const node = nodeMap[removedNodeId];\n                if (node) {\n                    node.remove();\n                }\n            });\n\n            // 更新した梁要素について、集中荷重・分布荷重・寸法線を再生成する\n            modifiedBeams.forEach((beam) => {\n                beam.updateParts();\n            });\n\n            // 全体の寸法線を更新する\n            this.manager.updateGlobalGuidelines();\n        }\n        // ドラッグ終了\n        this.nodeI = undefined;\n        this.nodeJ = undefined;\n        this.relationBeams = undefined;\n        this.dragging = false;\n    } // end onDragEnd\n\n    // イベントハンドラ\n    private attachEvents() {\n        // 選択\n        this.beam.on('selected', this.onSelect.bind(this));\n        this.beam.on('deselected', this.onDeselect.bind(this));\n        // クリック\n        this.beam.on('mousedown', this.onMouseDown.bind(this));\n        this.beam.on('mousedown:before', this.onMouseDownBefore.bind(this));\n        // ドラッグ\n        this.beam.on('moving', this.onMoving.bind(this));\n        this.beam.on('moved', this.onMoved.bind(this));\n        // 回転\n        this.beam.on('rotating', this.onRotating.bind(this));\n        this.beam.on('rotated', this.onRotated.bind(this));\n        // 伸縮\n        this.beam.on('scaling', this.onScaling.bind(this));\n        this.beam.on('scaled', this.onScaled.bind(this));\n    }\n\n    private onSelect(event: fabric.IEvent<Event>): void {\n        if (this.guide) {\n            this.guide.visible = true;\n        }\n    }\n    private onDeselect(event: fabric.IEvent<Event>): void {\n        if (this.guide) {\n            this.guide.visible = false;\n        }\n    }\n\n    /**\n     * 分布荷重追加モード時、梁要素のクリック前に描画可能にする\n     */\n    private onMouseDownBefore(): void {\n        if (this.manager.tool === 'trapezoid') {\n            // 分布荷重の描画開始\n            this.manager.currentBeam = this.data.id;\n        }\n    }\n\n    private onMouseDown(event: fabric.IEvent<Event>): void {\n        if (event.absolutePointer) {\n            // クリック位置\n            const point = new Vector(event.absolutePointer.x, event.absolutePointer.y);\n            if (this.manager.tool === 'force') {\n                // クリックした位置に集中荷重を追加する\n                // i端からの距離 (比率)\n                const ratio = this.calcRatio(point);\n\n                // 集中荷重を作成\n                const forceId = uuid();\n                const force: Force = {\n                    id: forceId,\n                    name: forceId,\n                    beam: this.data.id,\n                    force: 10, // 初期値固定\n                    distanceI: ratio,\n                };\n                const shape = new ForceShape(this.manager, force);\n                if (typeof this.manager.forceMap[this.data.id] === 'undefined') {\n                    this.manager.forceMap[this.data.id] = [];\n                }\n                this.manager.forceMap[this.data.id].push(shape);\n\n                // 集中荷重の平均値を更新\n                this.manager.calcForceAverage();\n            } else if (this.manager.tool === 'moment') {\n                // クリックした位置にモーメント荷重を追加する\n                // i端からの距離 (比率)\n                const ratio = this.calcRatio(point);\n\n                const momentId = uuid();\n                const moment: Moment = {\n                    id: momentId,\n                    name: momentId,\n                    beam: this.data.id,\n                    moment: 10, // 初期値固定\n                    distanceI: ratio,\n                };\n                const shape = new MomentShape(this.manager, moment);\n                if (typeof this.manager.momentMap[this.data.id] === 'undefined') {\n                    this.manager.momentMap[this.data.id] = [];\n                }\n                this.manager.momentMap[this.data.id].push(shape);\n            } else if (this.manager.tool === 'delete') {\n                // 梁要素を削除\n                this.remove();\n                // 梁要素に紐付かない節点を削除\n                this.manager.removeUnconnectedNodes();\n                // 寸法線を更新\n                this.manager.updateGlobalGuidelines();\n                // 集中荷重、分布荷重の平均値を再計算\n                this.manager.calcForceAverage();\n                this.manager.calcTrapezoidAverage();\n            }\n        }\n    }\n\n    /**\n     * 梁要素のドラッグ\n     * @param event\n     */\n    private onMoving(event: fabric.IEvent<Event>): void {\n        if (this.manager.tool === 'select') {\n            if (!this.dragging) {\n                // 寸法線・集中荷重・分布荷重を非表示とする\n                this.setVisibleParts(false);\n\n                this.nodeI = this.manager.nodeMap[this.data.nodeI];\n                this.nodeJ = this.manager.nodeMap[this.data.nodeJ];\n                this.relationBeams = [];\n\n                const nodes = [this.nodeI, this.nodeJ];\n                nodes.forEach((node) => {\n                    // i端、j端の pin を非表示にする\n                    if (node && node.pin) {\n                        node.pin.visible = false;\n                    }\n\n                    // i端/j端に接続する梁要素\n                    const beams = this.manager.nodeBeamMap[node.data.id];\n                    beams.forEach((beam) => {\n                        if (beam.data.id !== this.data.id) {\n                            // 寸法線・集中荷重・分布荷重を非表示とする\n                            beam.setVisibleParts(false);\n                            this.relationBeams?.push(beam);\n                        }\n                    });\n                });\n            }\n\n            // 位置を計算\n            const [ix, iy, jx, jy] = this.calcPoints();\n\n            if (this.nodeI && this.nodeJ) {\n                // 節点を移動\n                this.nodeI.update(ix, iy, false);\n                this.nodeJ.update(jx, jy, false);\n\n                // 節点に紐づく梁要素を更新\n                this.relationBeams?.forEach((beamShape) => {\n                    const points = beamShape.points;\n                    if (beamShape.data.nodeI === this.nodeI?.data.id) {\n                        points[0] = ix;\n                        points[1] = iy;\n                    }\n                    if (beamShape.data.nodeI === this.nodeJ?.data.id) {\n                        points[0] = jx;\n                        points[1] = jy;\n                    }\n                    if (beamShape.data.nodeJ === this.nodeI?.data.id) {\n                        points[2] = ix;\n                        points[3] = iy;\n                    }\n                    if (beamShape.data.nodeJ === this.nodeJ?.data.id) {\n                        points[2] = jx;\n                        points[3] = jy;\n                    }\n                    beamShape.update(points);\n                });\n            }\n\n            this.dragging = true;\n        }\n    } // onMoving\n\n    private onMoved(event: fabric.IEvent<Event>): void {\n        if (this.manager.tool === 'select' && this.dragging && this.nodeI && this.nodeJ) {\n            // 位置を取得\n            const [ix, iy, jx, jy] = this.calcPoints(true);\n\n            // 梁要素を更新\n            this.update([ix, iy, jx, jy]);\n            // 節点の更新\n            this.nodeI?.update(ix, iy);\n            this.nodeJ?.update(jx, jy);\n\n            // ドラッグ完了\n            this.completeDrag();\n        }\n    } // end onMoved\n\n    /**\n     * rotate もドラッグの一形態とみなす\n     * @param event\n     */\n    private onRotating(event: fabric.IEvent<Event>): void {\n        if (this.manager.tool === 'select') {\n            if (!this.dragging) {\n                // 寸法線・集中荷重・分布荷重を非表示とする\n                this.setVisibleParts(false);\n\n                this.nodeI = this.manager.nodeMap[this.data.nodeI];\n                this.nodeJ = this.manager.nodeMap[this.data.nodeJ];\n                this.relationBeams = [];\n\n                // j端の pin を非表示にする\n                if (this.nodeJ.pin) {\n                    this.nodeJ.pin.visible = false;\n                }\n\n                // j端に接続する梁要素\n                const beams = this.manager.nodeBeamMap[this.nodeJ.data.id];\n                beams.forEach((beam) => {\n                    if (beam.data.id !== this.data.id) {\n                        // 寸法線・集中荷重・分布荷重を非表示とする\n                        beam.setVisibleParts(false);\n                        this.relationBeams?.push(beam);\n                    }\n                });\n            }\n\n            // j端の位置を取得\n            this.vj.copy(this.vi);\n            this.vj.add(\n                vY\n                    .clone()\n                    .invert()\n                    .multiplyScalar(this.length)\n                    .rotateDeg(this.beam.angle ?? 0)\n            );\n            const [jx, jy] = [this.vj.x, this.vj.y];\n            this.nodeJ?.update(jx, jy);\n\n            // 節点に紐づく梁要素の更新\n            this.relationBeams?.forEach((beamShape) => {\n                const points = beamShape.points;\n                if (beamShape.data.nodeI === this.nodeJ?.data.id) {\n                    points[0] = jx;\n                    points[1] = jy;\n                }\n                if (beamShape.data.nodeJ === this.nodeJ?.data.id) {\n                    points[2] = jx;\n                    points[3] = jy;\n                }\n                beamShape.update(points);\n            });\n\n            this.dragging = true;\n        }\n    } // end onRotating\n\n    private onRotated(event: fabric.IEvent<Event>): void {\n        if (this.manager.tool === 'select' && this.dragging) {\n            // j端の位置を取得\n            this.vj.copy(this.vi);\n            this.vj.add(\n                vY\n                    .clone()\n                    .invert()\n                    .multiplyScalar(this.length)\n                    .rotateDeg(this.beam.angle ?? 0)\n            );\n            const [jx, jy] = snap([this.vj.x, this.vj.y], this.manager.snapSize);\n            // j端の更新\n            this.vj.x = jx;\n            this.vj.y = jy;\n            this.nodeJ?.update(jx, jy);\n\n            // 梁要素の更新\n            this.update([this.vi.x, this.vi.y, jx, jy]);\n\n            // ドラッグ完了\n            this.completeDrag();\n        }\n    } // end onRotated\n\n    private onScaling(event: fabric.IEvent<Event>): void {\n        if (this.manager.tool === 'select') {\n            if (!this.dragging) {\n                // 寸法線・集中荷重・分布荷重を非表示とする\n                this.setVisibleParts(false);\n\n                this.nodeI = this.manager.nodeMap[this.data.nodeI];\n                this.nodeJ = this.manager.nodeMap[this.data.nodeJ];\n                this.relationBeams = [];\n\n                // j端の pin を非表示にする\n                if (this.nodeJ.pin) {\n                    this.nodeJ.pin.visible = false;\n                }\n\n                // j端に接続する梁要素\n                const beams = this.manager.nodeBeamMap[this.nodeJ.data.id];\n                beams.forEach((beam) => {\n                    if (beam.data.id !== this.data.id) {\n                        // 寸法線・集中荷重・分布荷重を非表示とする\n                        beam.setVisibleParts(false);\n                        this.relationBeams?.push(beam);\n                    }\n                });\n            }\n\n            // j端の位置を更新\n            const scale = this.beam.scaleY ?? 1;\n            const angle = this.beam.angle ?? 0;\n            this.vj.copy(this.vi);\n            this.vj.add(\n                vY\n                    .clone()\n                    .invert()\n                    .multiplyScalar(this.length * scale)\n                    .rotateDeg(angle)\n            );\n            const [jx, jy] = [this.vj.x, this.vj.y];\n            this.nodeJ?.update(jx, jy);\n\n            // 節点に紐づく梁要素の更新\n            this.relationBeams?.forEach((beamShape) => {\n                const points = beamShape.points;\n                if (beamShape.data.nodeI === this.nodeJ?.data.id) {\n                    points[0] = jx;\n                    points[1] = jy;\n                }\n                if (beamShape.data.nodeJ === this.nodeJ?.data.id) {\n                    points[2] = jx;\n                    points[3] = jy;\n                }\n                beamShape.update(points);\n            });\n\n            this.dragging = true;\n        }\n    } // end onScaling\n\n    private onScaled(event: fabric.IEvent<Event>): void {\n        if (this.manager.tool === 'select' && this.dragging) {\n            // j端の位置を取得\n            const scale = this.beam.scaleY ?? 1;\n            const angle = this.beam.angle ?? 0;\n            this.vj.copy(this.vi);\n            this.vj.add(\n                vY\n                    .clone()\n                    .invert()\n                    .multiplyScalar(this.length * scale)\n                    .rotateDeg(angle)\n            );\n            const [jx, jy] = snap([this.vj.x, this.vj.y], this.manager.snapSize);\n            // j端の更新\n            this.vj.x = jx;\n            this.vj.y = jy;\n            this.nodeJ?.update(jx, jy);\n\n            // 梁要素の更新\n            this.update([this.vi.x, this.vi.y, jx, jy]);\n\n            // ドラッグ完了\n            this.completeDrag();\n        }\n    }\n}\n","import { fabric } from 'fabric';\nimport { Force } from '../../../types/shape';\nimport { createArrow, labelBaseProps, unresponseShapeProps } from '../factory';\nimport CanvasManager from '../manager';\nimport { compareCoords, lerp, round, roundDegree, snapAngle, Vector } from '../util';\nimport { BeamShape } from './BeamShape';\n\n/**\n * 集中荷重の基本の長さ\n */\nconst ForceBaseLength = 30;\nconst ForceColor = 'orange';\n\nconst defaultForceLabelProps: fabric.ITextOptions = {\n    ...unresponseShapeProps,\n    ...labelBaseProps,\n    fill: ForceColor,\n    textAlign: 'left',\n};\n\nexport class ForceShape {\n    public data: Force;\n    public force: fabric.Group;\n    public label: fabric.Textbox;\n\n    private manager: CanvasManager;\n    private longpressTimer: NodeJS.Timer | undefined;\n    private dragging = false;\n    private _readonly = false;\n\n    private head: Vector = new Vector(0, 0);\n    // private tail: Vector = new Vector(0, 0);\n    private direction: Vector = new Vector(0, 1);\n    private length = 0;\n\n    // ドラッグ中に梁要素の Shape を保持する\n    // メモリリークを避けるため、ドラッグ完了後にクリアすること\n    private beam: BeamShape | undefined;\n    private vi = new Vector(0, 0);\n    private vj = new Vector(0, 0);\n\n    // rotate前の global な angle\n    private originalAngle = 0;\n    // ドラッグ中の位置\n    private position = new Vector(0, 0);\n    // ドラッグ可能な範囲\n    private draggableMin = Number.MIN_SAFE_INTEGER;\n    private draggableMax = Number.MAX_SAFE_INTEGER;\n\n    constructor(manager: CanvasManager, params: Force) {\n        this.manager = manager;\n        this.data = params;\n\n        this._readonly = this.manager.readonly;\n\n        // 矢印、ラベル生成\n        [this.force, this.label] = this.create();\n        this.manager.canvas.add(this.force, this.label);\n\n        // イベント割当\n        this.attachEvent();\n    }\n\n    public get readonly(): boolean {\n        return this._readonly;\n    }\n    public set readonly(value: boolean) {\n        this._readonly = value;\n        // readonly時はイベントに反応しない\n        this.force.selectable = !value;\n        this.force.evented = !value;\n    }\n\n    public get visible(): boolean {\n        return this.force.visible ?? true;\n    }\n\n    public set visible(value: boolean) {\n        this.force.visible = value;\n        this.label.visible = value;\n    }\n\n    /**\n     * 矢印の長さから集中荷重の大きさを計算\n     * @returns\n     */\n    private calcForce(): number {\n        if (this.manager.forceAverage === 0) {\n            return 10;\n        }\n\n        return Math.round((this.length / ForceBaseLength) * this.manager.forceAverage);\n    }\n\n    /**\n     * 集中荷重の大きさと平均値から矢印の長さを計算\n     * @returns\n     */\n    private calcLength(): number {\n        if (this.manager.forceAverage === 0) {\n            return ForceBaseLength;\n        }\n        const ratio = this.data.force / this.manager.forceAverage;\n        return ForceBaseLength * ratio;\n    }\n\n    private create(): [fabric.Group, fabric.Textbox] {\n        const { id, beam, distanceI, angle = 0 } = this.data;\n        // 集中荷重の対象梁要素\n        const beamShape = this.manager.beamMap[beam];\n        const { points } = beamShape;\n\n        // 梁要素の i端、j端\n        const pi = new Vector(points[0], points[1]);\n        const pj = new Vector(points[2], points[3]);\n        // 集中荷重の始点\n        const head = lerp(pi, pj, distanceI);\n        // 集中荷重の方向\n        const dir = beamShape.direction\n            .clone()\n            .rotateDeg(angle - 90)\n            .normalize();\n        // 大きさ\n        const forceLength = this.calcLength();\n        // 集中荷重の終点\n        const tail = head.clone().add(dir.clone().multiplyScalar(forceLength));\n\n        // 矢印\n        const arrow = createArrow(head, tail, {\n            fill: ForceColor,\n            stroke: ForceColor,\n            name: id,\n            data: {\n                ...this.data,\n                type: 'force',\n            },\n            selectable: !this.readonly,\n            evented: !this.readonly,\n        });\n\n        // ラベルの基準位置\n        const labelPosition = head.clone().add(beamShape.direction.clone().multiplyScalar(5));\n        const labelAngle = dir.angleDeg();\n\n        const label = new fabric.Textbox(` ${this.data.force} kN`, {\n            ...defaultForceLabelProps,\n            top: labelPosition.y,\n            left: labelPosition.x,\n            width: Math.max(forceLength, 140),\n            angle: labelAngle,\n            // デフォルトで非表示\n            visible: false,\n        });\n\n        // ドラッグ時に使用するので保持しておく\n        this.head.copy(head);\n        // this.tail.copy(tail);\n        this.direction.copy(dir);\n        this.length = forceLength;\n\n        return [arrow, label];\n    }\n\n    public update(params?: Force): void {\n        if (params) {\n            this.data = params;\n        }\n\n        // ラベルが表示されていた場合、集中荷重が選択されていたとみなす\n        const selected = this.label.visible ?? false;\n\n        // キャンバスから集中荷重を削除\n        this.manager.canvas.remove(this.force, this.label);\n        // 集中荷重を再作成\n        [this.force, this.label] = this.create();\n        this.manager.canvas.add(this.force, this.label);\n\n        // イベント割当\n        this.attachEvent();\n\n        if (selected) {\n            // 選択状態を復元する\n            this.select();\n        }\n    }\n\n    /**\n     * 集中荷重の削除\n     * (NOTE: 集中荷重の平均値を再計算すること)\n     */\n    public remove(): void {\n        // キャンバスから集中荷重を削除\n        this.manager.canvas.remove(this.force, this.label);\n\n        const forces = this.manager.forceMap[this.data.beam];\n        if (forces) {\n            // 自身を配列から除去\n            const list = forces.filter((shape) => shape.data.id !== this.data.id);\n            this.manager.forceMap[this.data.beam] = list;\n        }\n    }\n\n    /**\n     * 選択\n     */\n    public select(): void {\n        this.manager.canvas.setActiveObject(this.force);\n    }\n\n    // イベントハンドラ\n\n    private attachEvent() {\n        this.force.on('selected', this.onSelected.bind(this));\n        this.force.on('deselected', this.onDeselected.bind(this));\n        // クリック・長押し\n        this.force.on('mousedown', this.onMouseDown.bind(this));\n        this.force.on('mouseup', this.onMouseUp.bind(this));\n        this.force.on('mousedblclick', this.onDblClick.bind(this));\n        // ドラッグ\n        this.force.on('moving', this.onMoving.bind(this));\n        this.force.on('moved', this.onMoved.bind(this));\n        // 回転\n        this.force.on('rotating', this.onRotating.bind(this));\n        this.force.on('rotated', this.onRotated.bind(this));\n        // 伸縮\n        this.force.on('scaling', this.onScaling.bind(this));\n        this.force.on('scaled', this.onScaled.bind(this));\n    }\n\n    private onSelected(): void {\n        this.label.visible = true;\n    }\n\n    private onDeselected(): void {\n        this.label.visible = false;\n    }\n\n    private onMouseDown(event: fabric.IEvent<Event>): void {\n        if (this.readonly) {\n            // 読み取り専用時は何もしない\n            return;\n        }\n\n        if (this.manager.tool === 'delete') {\n            this.remove();\n            this.manager.calcForceAverage();\n            return;\n        }\n\n        if (['select', 'force'].includes(this.manager.tool) && event.target) {\n            // すでに長押しを実行中ならタイマーキャンセル\n            if (this.longpressTimer) {\n                clearTimeout(this.longpressTimer);\n                this.longpressTimer = undefined;\n            }\n\n            const shape = this.force;\n            // 長押し前の現在位置を保持する\n            const { top: beforeTop, left: beforeLeft } = shape.getBoundingRect(true, true);\n\n            // 長押し判定\n            this.longpressTimer = setTimeout(() => {\n                // 長押し後の現在位置\n                const { top: afterTop, left: afterLeft } = shape.getBoundingRect(true, true);\n                // 位置が変わっていなければ longpress とする\n                if (compareCoords([beforeLeft, beforeTop], [afterLeft, afterTop])) {\n                    // ダイアログの表示\n                    this.manager.openForceDialog(event, this);\n                }\n                this.longpressTimer = undefined;\n            }, CanvasManager.LongpressInterval);\n        }\n    } // end onMouseDown\n\n    private onMouseUp(event: fabric.IEvent<Event>): void {\n        if (this.longpressTimer) {\n            clearTimeout(this.longpressTimer);\n            this.longpressTimer = undefined;\n        }\n    }\n\n    private onDblClick(event: fabric.IEvent<Event>): void {\n        if (!this.readonly) {\n            // ダイアログの表示\n            this.manager.openForceDialog(event, this);\n        }\n    }\n\n    private onRotating(event: fabric.IEvent<Event>): void {\n        if (['select', 'force'].includes(this.manager.tool)) {\n            if (!this.dragging) {\n                // ラベルを非表示にする\n                this.label.visible = false;\n                // 現在の角度を保持\n                this.originalAngle = this.force.angle ?? 0;\n            }\n\n            this.dragging = true;\n        }\n    }\n\n    private onRotated(event: fabric.IEvent<Event>): void {\n        const currentAngle = this.force.angle ?? 0;\n\n        let deg = 0;\n        if (this.originalAngle === currentAngle) {\n            return;\n        } else if (this.originalAngle < currentAngle) {\n            deg = currentAngle - this.originalAngle;\n        } else if (this.originalAngle > currentAngle) {\n            deg = 360 - this.originalAngle + currentAngle;\n        }\n        // 0 <= deg < 360 に変換\n        deg = roundDegree(deg);\n        // 5° にスナップする\n        deg = snapAngle(deg, 5);\n\n        let angle = this.originalAngle + deg;\n        angle = roundDegree(angle);\n\n        // 矢印、ラベルを回す\n        this.force.angle = angle;\n        this.label.angle = angle - 90;\n        this.label.visible = true;\n\n        // 角度を保持\n        let value = (this.data.angle ?? 0) + deg;\n        value = roundDegree(value);\n        this.data.angle = value;\n\n        this.dragging = false;\n    }\n\n    private onScaling(event: fabric.IEvent<Event>): void {\n        if (['select', 'force'].includes(this.manager.tool)) {\n            this.dragging = true;\n        }\n    }\n\n    private onScaled(event: fabric.IEvent<Event>): void {\n        if (this.dragging) {\n            const scale = this.force.scaleY ?? 1;\n            const length = this.length * scale;\n\n            // 長さから集中荷重の大きさを計算\n            this.length = length;\n            const f = this.calcForce();\n            this.data.force = f;\n\n            // 矢印を作成しなおす\n            this.update();\n\n            // 選択\n            this.select();\n        }\n        this.dragging = false;\n    }\n\n    private calcMovedPosition() {\n        if (this.beam) {\n            // ドラッグ位置\n            this.position.x = this.force.left ?? 0;\n            this.position.y = this.force.top ?? 0;\n\n            // 元の位置から現在位置までの長さ\n            const dragDis = this.head.distance(this.position);\n            // ドラッグの方向\n            const dragDir = this.position.clone().subtract(this.head).normalize();\n            // ドラッグの角度\n            const angle = 180 - dragDir.verticalAngleDeg();\n            // ドラッグ方向と梁要素のなす角度\n            const deg = this.beam.angle - angle;\n            const rad = (deg * Math.PI) / 180;\n            // ドラッグされた長さを梁要素上の長さに変換\n            let dist = dragDis * Math.cos(rad);\n\n            if (this.draggableMin > dist) {\n                dist = this.draggableMin;\n            } else if (this.draggableMax < dist) {\n                dist = this.draggableMax;\n            }\n\n            // 集中荷重の位置\n            this.position.copy(this.head).add(this.beam.direction.clone().multiplyScalar(dist));\n        }\n    }\n\n    private onMoving(event: fabric.IEvent<Event>): void {\n        if (['select', 'force'].includes(this.manager.tool)) {\n            if (!this.dragging) {\n                // ラベルを非表示\n                this.label.visible = false;\n                // 対象の梁要素を取得\n                this.beam = this.manager.beamMap[this.data.beam];\n\n                // ドラッグ可能範囲を計算\n                [this.vi.x, this.vi.y] = [this.beam.points[0], this.beam.points[1]];\n                [this.vj.x, this.vj.y] = [this.beam.points[2], this.beam.points[3]];\n\n                this.draggableMin = this.vi.distance(this.head) * -1;\n                this.draggableMax = this.vj.distance(this.head);\n\n                // 初期位置を初期化\n                this.position.copy(this.head);\n\n                this.dragging = true;\n            }\n\n            // 位置の計算\n            this.calcMovedPosition();\n            // 集中荷重を移動\n            this.force.left = this.position.x;\n            this.force.top = this.position.y;\n        }\n    }\n\n    private onMoved(event: fabric.IEvent<Event>): void {\n        if (this.beam) {\n            // ドラッグ位置を計算\n            this.calcMovedPosition();\n            // i端からの距離を更新\n            const distI = this.vi.distance(this.position);\n            this.data.distanceI = round(distI / this.beam.length, 2);\n\n            // 位置を再計算\n            this.head.copy(\n                this.vi\n                    .clone()\n                    .add(\n                        this.beam.direction\n                            .clone()\n                            .multiplyScalar(this.beam.length * this.data.distanceI)\n                    )\n            );\n            this.force.left = this.head.x;\n            this.force.top = this.head.y;\n\n            // ラベル位置を更新\n            this.label.left = this.head.x;\n            this.label.top = this.head.y;\n            this.label.visible = true;\n        }\n        // ドラッグ終了\n        this.beam = undefined;\n        this.draggableMin = Number.MIN_SAFE_INTEGER;\n        this.draggableMax = Number.MAX_SAFE_INTEGER;\n        this.dragging = false;\n    }\n}\n","import { fabric } from 'fabric';\nimport { isNode, Node, NodePinType } from '../../../types/shape';\nimport CanvasManager from '../manager';\nimport { compareCoords, snap } from '../util';\nimport { BeamShape } from './BeamShape';\n\nconst Pins: Readonly<Record<NodePinType, string>> = {\n    free: '/assets/images/pins/pin_1.svg', // とりあえずダミーで指定\n    pin: '/assets/images/pins/pin_1.svg',\n    pinX: '/assets/images/pins/pin_2.svg',\n    pinZ: '/assets/images/pins/pin_2.svg',\n    fixX: '/assets/images/pins/pin_3.svg',\n    fix: '/assets/images/pins/pin_4.svg',\n};\nconst PinSize = 24;\nconst NodeRadius = 5;\n\nexport class NodeShape {\n    public data: Node;\n    public node: fabric.Circle;\n    public pin: fabric.Object | undefined;\n\n    private manager: CanvasManager;\n    private longpressTimer: NodeJS.Timer | undefined;\n    private dragging = false;\n    private _readonly = false;\n\n    constructor(manager: CanvasManager, params: Node) {\n        this.manager = manager;\n        this.data = params;\n\n        this.node = this.createNode(params);\n        // キャンバスに追加\n        this.manager.canvas.add(this.node);\n        // pin読み込み\n        this.loadPin();\n\n        this.attachEvents();\n    }\n\n    public update(): void;\n    public update(x: number, y: number, visiblePin?: boolean): void;\n    public update(params: Node, visiblePin?: boolean): void;\n\n    public update(arg1?: number | Node, arg2?: number | boolean, arg3?: boolean): void {\n        if (typeof arg1 === 'number' && typeof arg2 === 'number') {\n            this.updatePosition(arg1, arg2, arg3);\n            return;\n        } else if (isNode(arg1) && typeof arg2 !== 'number') {\n            this.updateByParams(arg1, arg2);\n            return;\n        } else if (typeof arg1 === 'undefined') {\n            const { x, y } = this.data;\n            this.updatePosition(x, y, true);\n        }\n        throw new Error('invalid parameters');\n    }\n\n    private updatePosition(x: number, y: number, visiblePin = true): void {\n        const params: Node = {\n            ...this.data,\n            x,\n            y,\n        };\n        this.updateByParams(params, visiblePin);\n    }\n\n    private updateByParams(params: Node, visiblePin = true): void {\n        const { x, y, pin } = params;\n        this.data = params;\n        this.node.top = y;\n        this.node.left = x;\n        this.node.data = {\n            ...params,\n            type: 'node',\n        };\n\n        if (pin) {\n            if (this.pin && this.pin.data.pin === pin) {\n                // pin の変更なし、位置のみ更新する\n                if (pin === 'pinZ') {\n                    this.pin.top = y + NodeRadius;\n                    this.pin.left = x;\n                } else {\n                    this.pin.top = y;\n                    this.pin.left = x + NodeRadius;\n                }\n                this.pin.visible = visiblePin;\n            } else {\n                // pin の再読み込み\n                this.loadPin(visiblePin);\n            }\n        }\n    }\n\n    public remove(): void {\n        this.manager.canvas.remove(this.node);\n        if (this.pin) {\n            this.manager.canvas.remove(this.pin);\n        }\n\n        const beams = this.manager.nodeBeamMap[this.data.id];\n        if (beams) {\n            beams.forEach((beam) => {\n                beam.remove();\n            });\n        }\n\n        delete this.manager.nodeMap[this.data.id];\n        delete this.manager.nodeBeamMap[this.data.id];\n    }\n\n    public get readonly(): boolean {\n        return this._readonly;\n    }\n    public set readonly(value: boolean) {\n        this._readonly = value;\n        // readonly時はイベントに反応しない\n        this.node.selectable = !value;\n        this.node.evented = !value;\n    }\n\n    private createNode(params: Node): fabric.Circle {\n        return new fabric.Circle({\n            name: params.id,\n            data: {\n                type: 'node',\n                ...params,\n            },\n            top: params.y,\n            left: params.x,\n            radius: NodeRadius,\n            fill: 'black',\n            originX: 'center',\n            originY: 'center',\n            // 選択してもコントロールを表示しない\n            hasBorders: false,\n            hasControls: false,\n            // readonly時はイベントに反応しない\n            selectable: !this.manager.readonly,\n            evented: !this.manager.readonly,\n        });\n    }\n\n    private setPinProperties(params: Node) {\n        if (this.pin) {\n            this.pin.name = `image/${params.id}`;\n            this.pin.data = {\n                ...params,\n                type: 'node/pin',\n            };\n            this.pin.originX = 'center';\n            this.pin.originY = 'top';\n            this.pin.centeredRotation = false;\n            this.pin.top = params.y + NodeRadius;\n            this.pin.left = params.x;\n            this.pin.scale(PinSize / 160);\n            // イベントに反応させない\n            this.pin.selectable = false;\n            this.pin.evented = false;\n            if (params.pin === 'pinZ') {\n                this.pin.top = params.y;\n                this.pin.left = params.x + NodeRadius;\n                this.pin.rotate(-90);\n            }\n        }\n    }\n\n    private loadPin(visiblePin = true): void {\n        const pinType = this.data.pin;\n\n        // 表示中の pin をクリア\n        if (this.pin) {\n            this.manager.canvas.remove(this.pin);\n            this.pin = undefined;\n        }\n\n        if (typeof pinType === 'undefined' || pinType === 'free') {\n            // pin を表示しない\n            return;\n        }\n\n        fabric.loadSVGFromURL(`${process.env.PUBLIC_URL}${Pins[pinType]}`, (objects, options) => {\n            const svg = fabric.util.groupSVGElements(objects, options);\n            if (svg.type === 'path') {\n                this.pin = new fabric.Group([svg]);\n            } else {\n                this.pin = svg;\n            }\n\n            // プロパティ設定\n            this.setPinProperties(this.data);\n            // 表示する\n            this.pin.visible = visiblePin;\n            this.manager.canvas.add(this.pin);\n        });\n    }\n\n    // イベントハンドラ\n    private attachEvents() {\n        this.node.on('mousedown', this.onMouseDown.bind(this));\n        this.node.on('mouseup', this.onMouseUp.bind(this));\n        this.node.on('mousedblclick', this.onDblClick.bind(this));\n        this.node.on('moving', this.onMoving.bind(this));\n        this.node.on('moved', this.onMoved.bind(this));\n    }\n\n    private onMouseDown(event: fabric.IEvent<Event>): void {\n        if (this.readonly) {\n            // 読み取り専用時は何もしない\n            return;\n        }\n\n        if (this.manager.tool === 'delete') {\n            this.remove();\n            // 梁要素に紐付かない節点を削除\n            this.manager.removeUnconnectedNodes();\n            // 寸法線を更新\n            this.manager.updateGlobalGuidelines();\n            // 集中荷重の平均値を再計算\n            this.manager.calcForceAverage();\n            // 分布荷重の平均値を再計算\n            this.manager.calcTrapezoidAverage();\n            return;\n        }\n\n        // すでに長押しを実行中ならタイマーキャンセル\n        if (this.longpressTimer) {\n            clearTimeout(this.longpressTimer);\n            this.longpressTimer = undefined;\n        }\n\n        if (this.manager.tool === 'select') {\n            const shape = this.node;\n            // 長押し前の現在位置を保持する\n            const { top: beforeTop, left: beforeLeft } = shape.getBoundingRect(true, true);\n\n            // 長押し判定\n            this.longpressTimer = setTimeout(() => {\n                // 長押し後の現在位置\n                const { top: afterTop, left: afterLeft } = shape.getBoundingRect(true, true);\n                // 位置が変わっていなければ longpress とする\n                if (compareCoords([beforeLeft, beforeTop], [afterLeft, afterTop])) {\n                    // ダイアログの表示\n                    this.manager.openNodeDialog(event, this);\n                }\n                this.longpressTimer = undefined;\n            }, CanvasManager.LongpressInterval);\n        }\n    }\n\n    private onMouseUp(event: fabric.IEvent<Event>): void {\n        if (this.longpressTimer) {\n            clearTimeout(this.longpressTimer);\n            this.longpressTimer = undefined;\n        }\n    }\n    private onDblClick(event: fabric.IEvent<Event>): void {\n        if (!this.readonly) {\n            // ダイアログの表示\n            this.manager.openNodeDialog(event, this);\n        }\n    }\n\n    /**\n     * ドラッグで節点の移動\n     * 梁要素（とそれに紐づく集中荷重、分布荷重）を追従して更新する\n     * @param event\n     */\n    private onMoving(event: fabric.IEvent<Event>): void {\n        if (!this.readonly && event.pointer) {\n            // ドラッグされた位置\n            const { x, y } = event.pointer;\n\n            const { nodeMap, nodeBeamMap } = this.manager;\n\n            if (!this.dragging) {\n                // ドラッグ開始\n                if (this.pin) {\n                    // pin を非表示\n                    this.pin.visible = false;\n                }\n            }\n\n            // この節点に紐づく梁要素\n            const beams = nodeBeamMap[this.data.id];\n            if (beams) {\n                beams.forEach((beamShape) => {\n                    // 梁要素の再描画\n                    const ni = nodeMap[beamShape.data.nodeI];\n                    const nj = nodeMap[beamShape.data.nodeJ];\n                    let [ix, iy, jx, jy] = [ni.data.x, ni.data.y, nj.data.x, nj.data.y];\n                    if (beamShape.data.nodeI === this.data.id) {\n                        // i端の移動\n                        ix = x;\n                        iy = y;\n                    } else if (beamShape.data.nodeJ === this.data.id) {\n                        jx = x;\n                        jy = y;\n                    }\n\n                    beamShape.update([ix, iy, jx, jy]);\n\n                    if (!this.dragging) {\n                        // 梁要素の集中荷重、分布荷重を非表示とする\n                        beamShape.setVisibleParts(false);\n                    }\n                });\n            }\n\n            this.dragging = true;\n        }\n    } // onMoving\n\n    /**\n     * ドラッグ終了\n     * @param event\n     */\n    private onMoved(event: fabric.IEvent<Event>): void {\n        if (!this.readonly && event.target) {\n            // 現在位置をスナップ\n            const { x, y } = event.target.getCenterPoint();\n            const [sx, sy] = snap([x, y], this.manager.snapSize);\n\n            // 節点の更新\n            this.update(sx, sy);\n\n            const { nodeBeamMap, nodeMap } = this.manager;\n            // この節点に紐づく梁要素\n            const beams = nodeBeamMap[this.data.id];\n            if (beams) {\n                // 削除対象の梁要素\n                const removingBeams: BeamShape[] = [];\n\n                beams.forEach((beamShape) => {\n                    const ni = nodeMap[beamShape.data.nodeI];\n                    const nj = nodeMap[beamShape.data.nodeJ];\n                    const [ix, iy, jx, jy] = [ni.data.x, ni.data.y, nj.data.x, nj.data.y];\n\n                    // 長さが 0 となった梁要素を削除するようマーク\n                    if (ix === jx && iy === jy) {\n                        removingBeams.push(beamShape);\n                        return;\n                    }\n\n                    // 梁要素の再描画\n                    beamShape.update([ix, iy, jx, jy]);\n                    // 集中荷重、分布荷重、寸法線を更新\n                    beamShape.updateParts();\n                });\n\n                if (removingBeams.length > 0) {\n                    // 長さ 0 となった梁要素を削除\n                    removingBeams.forEach((beam) => {\n                        beam.remove();\n                    });\n                    // 梁要素を削除したら集中荷重、分布荷重の平均値を更新\n                    this.manager.calcForceAverage();\n                    this.manager.calcTrapezoidAverage();\n                }\n            }\n\n            // 同一座標の節点が存在する場合にドラッグした節点とマージする\n            if (typeof this.manager.nodeBeamMap[this.data.id] === 'undefined') {\n                // 絶対に大丈夫だけど念の為に空配列を準備しておく\n                this.manager.nodeBeamMap[this.data.id] = [];\n            }\n\n            Object.values(this.manager.nodeMap).forEach((ns) => {\n                // この節点と同一座標の節点について\n                if (ns.data.id !== this.data.id && ns.data.x === sx && ns.data.y === sy) {\n                    // canvas から節点を除去\n                    this.manager.canvas.remove(ns.node);\n                    if (ns.pin) {\n                        this.manager.canvas.remove(ns.pin);\n                    }\n\n                    // 同一座標の節点に紐づく梁要素\n                    const beams = this.manager.nodeBeamMap[ns.data.id];\n                    if (beams) {\n                        beams.forEach((beamShape) => {\n                            // 節点を付け替え\n                            if (beamShape.data.nodeI === ns.data.id) {\n                                beamShape.data.nodeI = this.data.id;\n                            }\n                            if (beamShape.data.nodeJ === ns.data.id) {\n                                beamShape.data.nodeJ = this.data.id;\n                            }\n                            beamShape.beam.data = {\n                                type: 'beam',\n                                ...beamShape.data,\n                            };\n\n                            // マージされた節点に参照を移動する\n                            this.manager.nodeBeamMap[this.data.id].push(beamShape);\n                        });\n                    }\n\n                    // 節点を削除\n                    ns.remove();\n                }\n            });\n\n            // 全体の寸法線を更新する\n            this.manager.updateGlobalGuidelines();\n\n            // ドラッグ終了\n            this.dragging = false;\n        }\n    } // onMoved\n}\n","import { fabric } from 'fabric';\nimport { Trapezoid } from '../../../types/shape';\nimport { ArrowOptions, createArrow, createGuideLine } from '../factory';\nimport CanvasManager from '../manager';\nimport { BeamPoints } from '../types';\nimport {\n    compareCoords,\n    getInsidePoints,\n    intercectPoint,\n    lerp,\n    round,\n    roundDegree,\n    snapAngle,\n    Vector,\n    vX,\n    vY,\n} from '../util';\nimport { BeamShape } from './BeamShape';\n\nconst TrapezoidColor = 'pink';\n/**\n * 分布荷重の矢印の長さ\n */\nconst TrapezoidArrowBaseLength = 25;\n\nconst defaultTrapezoidArrowOptions: ArrowOptions = {\n    stroke: TrapezoidColor,\n    fill: TrapezoidColor,\n    arrowWidth: 2,\n    arrowEdgeSize: 8,\n};\n\n/**\n * 上側の線の設定\n */\nconst defaultTrapezoidLineOptions: fabric.ILineOptions = {\n    stroke: TrapezoidColor,\n    strokeWidth: 2,\n    hasControls: false,\n    hasBorders: false,\n    lockMovementX: true,\n    lockMovementY: true,\n    lockRotation: true,\n    lockScalingX: true,\n    lockScalingY: true,\n};\nconst defaultTrapezoidLabelOptions: fabric.ITextboxOptions = {\n    fill: TrapezoidColor,\n    fontSize: 10,\n    fontFamily: 'sans-serif',\n    height: 10,\n    selectable: false,\n    evented: false,\n};\n\nexport class TrapezoidShape {\n    public data: Trapezoid;\n    public forceI: fabric.Group;\n    public forceJ: fabric.Group;\n    public arrows: fabric.Group[];\n    public line: fabric.Line;\n    public labelI: fabric.Textbox;\n    public labelJ: fabric.Textbox;\n    public guide?: fabric.Group; // 寸法線\n\n    private manager: CanvasManager;\n    private longpressTimer: NodeJS.Timer | undefined;\n    private dragging = false;\n    private _readonly = false;\n\n    // 選択中のオブジェクト\n    private selectedShapes = new Set<string>();\n\n    // 分布荷重 i端の位置\n    private pi = new Vector(0, 0);\n    // 分布荷重 j端の位置\n    private pj = new Vector(0, 0);\n    // 分布荷重の方向\n    private direction = new Vector(0, 0);\n    // 分布荷重 上側の線\n    private linePoints: BeamPoints = [0, 0, 0, 0];\n\n    // ドラッグ中のi端/j端の矢印\n    private draggingEdge: 'i' | 'j' | undefined;\n\n    // ドラッグ中に梁要素の Shape を保持する\n    // メモリリークを避けるため、ドラッグ完了後にクリアすること\n    private beam: BeamShape | undefined;\n    // 梁要素のi端\n    private vi = new Vector(0, 0);\n    // 梁要素のj端\n    private vj = new Vector(0, 0);\n\n    // rotate前の global な angle\n    private originalAngle = 0;\n    // ドラッグ中の角度・位置・長さ\n    private draggingDirection = new Vector(0, 0);\n    private draggingPosition = new Vector(0, 0);\n    private draggingLength = 0;\n    // ドラッグ可能な範囲\n    private draggableMin = Number.MIN_SAFE_INTEGER;\n    private draggableMax = Number.MAX_SAFE_INTEGER;\n\n    constructor(manager: CanvasManager, params: Trapezoid) {\n        this.manager = manager;\n        this.data = params;\n        this._readonly = this.manager.readonly;\n\n        // fabricのオブジェクトを作成\n        [this.forceI, this.forceJ, this.arrows, this.line, this.labelI, this.labelJ, this.guide] =\n            this.create();\n\n        // キャンバスに追加\n        this.addToCanvas();\n        // イベント割当\n        this.attachEvents();\n    }\n\n    public get readonly(): boolean {\n        return this._readonly;\n    }\n    public set readonly(value: boolean) {\n        this._readonly = value;\n        // readonly時はイベントに反応しない\n        [this.forceI, this.forceJ, ...this.arrows, this.line].forEach(\n            (shape: fabric.Object | undefined) => {\n                if (shape) {\n                    shape.evented = value;\n                }\n            }\n        );\n    }\n\n    public get visible(): boolean {\n        return this.forceI.visible ?? true;\n    }\n    public set visible(value: boolean) {\n        this.forceI.visible = value;\n        this.forceJ.visible = value;\n        this.arrows.forEach((arrow) => (arrow.visible = value));\n        this.line.visible = value;\n        this.labelI.visible = value;\n        this.labelJ.visible = value;\n        if (this.guide) {\n            this.guide.visible = value;\n        }\n    }\n\n    public get evented(): boolean {\n        return this.forceI.evented ?? true;\n    }\n\n    public set evented(value: boolean) {\n        [this.forceI, this.forceJ, ...this.arrows, this.line].forEach((shape) => {\n            shape.evented = value;\n        });\n    }\n\n    public get selectable(): boolean {\n        return this.forceI.selectable ?? true;\n    }\n\n    public set selectable(value: boolean) {\n        [this.forceI, this.forceJ, ...this.arrows, this.line].forEach((shape) => {\n            shape.selectable = value;\n        });\n    }\n\n    private create(): [\n        fabric.Group,\n        fabric.Group,\n        fabric.Group[],\n        fabric.Line,\n        fabric.Textbox,\n        fabric.Textbox,\n        fabric.Group\n    ] {\n        const {\n            beam,\n            forceI,\n            forceJ,\n            distanceI,\n            distanceJ,\n            angle = 0,\n            isGlobal = false,\n        } = this.data;\n        const average = this.manager.trapezoidAverage;\n        const beamShape = this.manager.beamMap[beam];\n\n        // 梁要素のi端\n        const vI = new Vector(beamShape.points[0], beamShape.points[1]);\n\n        // 分布荷重の方向\n        let dir: Vector;\n        if (isGlobal) {\n            dir = vX\n                .clone()\n                .rotateDeg(angle - 90)\n                .normalize();\n        } else {\n            dir = beamShape.direction\n                .clone()\n                .rotateDeg(angle - 90)\n                .normalize();\n        }\n\n        // 分布荷重の下端の位置\n        const bi = vI\n            .clone()\n            .add(beamShape.direction.clone().multiplyScalar(beamShape.length * distanceI));\n        const bj = vI\n            .clone()\n            .add(beamShape.direction.clone().multiplyScalar(beamShape.length * (1 - distanceJ)));\n        // 分布荷重の上端の位置\n        const pi = bi.clone().add(dir.clone().multiplyScalar(this.calcLength(forceI, average)));\n        const pj = bj.clone().add(dir.clone().multiplyScalar(this.calcLength(forceJ, average)));\n\n        // 下端を等間隔に分割する点を取得\n        const points = getInsidePoints(bi, bj, beamShape.direction);\n        // 上端の傾き\n        const slope = pj.x - pi.x !== 0 ? (pj.y - pi.y) / (pj.x - pi.x) : NaN;\n        // 上端の切片\n        const intercept = isNaN(slope) ? NaN : pi.y - slope * pi.x;\n\n        // 内側の矢印位置\n        const insideArrows: BeamPoints[] = [];\n        points.forEach((point) => {\n            // 下端の点から上端に線を伸ばして交差する点\n            const pu = intercectPoint([pi, pj, slope, intercept], point, dir);\n            if (pu) {\n                const arrow: BeamPoints = [point.x, point.y, pu[0], pu[1]];\n                insideArrows.push(arrow);\n            }\n        });\n\n        // 内側の矢印\n        const arrows = insideArrows.map((arrow) => {\n            const shape = createArrow(arrow, {\n                ...defaultTrapezoidArrowOptions,\n                hasControls: false,\n                hasBorders: false,\n                lockMovementX: true,\n                lockMovementY: true,\n                lockRotation: true,\n                lockScalingX: true,\n                lockScalingY: true,\n                selectable: !this.readonly,\n                evented: !this.readonly,\n            });\n            return shape;\n        });\n        // i端\n        const arrowI = createArrow([bi.x, bi.y, pi.x, pi.y], {\n            ...defaultTrapezoidArrowOptions,\n            name: `${this.data.id}/i`,\n            data: {\n                type: 'trapezoid/i',\n                ...this.data,\n            },\n            selectable: !this.readonly,\n            evented: !this.readonly,\n        });\n        // j端\n        const arrowJ = createArrow([bj.x, bj.y, pj.x, pj.y], {\n            ...defaultTrapezoidArrowOptions,\n            name: `${this.data.id}/j`,\n            data: {\n                type: 'trapezoid/j',\n                ...this.data,\n            },\n            selectable: !this.readonly,\n            evented: !this.readonly,\n        });\n\n        // 上端\n        const line = this.createLine([pi.x, pi.y, pj.x, pj.y]);\n\n        // 寸法線\n        const guide = createGuideLine([bi.x, bi.y, bj.x, bj.y], 50);\n        guide.visible = false;\n\n        // i端側ラベル\n        const li = bi.clone().add(beamShape.direction.clone().multiplyScalar(5));\n        // j端側ラベル\n        const lj = bj.clone().add(beamShape.direction.clone().multiplyScalar(5));\n        // ラベルの角度\n        const labelAngle = dir.angleDeg();\n\n        const labelI = this.createTrapezoidLabel(`  ${forceI} kN/m`, li, labelAngle);\n        labelI.visible = false;\n        const labelJ = this.createTrapezoidLabel(`  ${forceJ} kN/m`, lj, labelAngle);\n        labelJ.visible = false;\n\n        // ドラッグ時に使用するデータを保持する\n        this.pi.copy(bi);\n        this.pj.copy(bj);\n        this.direction.copy(dir);\n\n        return [arrowI, arrowJ, arrows, line, labelI, labelJ, guide];\n    }\n\n    public update(params?: Trapezoid): void {\n        if (params) {\n            this.data = params;\n        }\n\n        // キャンバスから削除\n        this.removeFromCanvas();\n\n        // fabricのオブジェクトを作成\n        [this.forceI, this.forceJ, this.arrows, this.line, this.labelI, this.labelJ, this.guide] =\n            this.create();\n\n        // キャンバスに追加\n        this.addToCanvas();\n        // イベント割当\n        this.attachEvents();\n    }\n\n    private createLine(points: BeamPoints): fabric.Line {\n        // ドラッグ時に使用するので保持しておく\n        this.linePoints = points;\n\n        return new fabric.Line(points, {\n            ...defaultTrapezoidLineOptions,\n            selectable: !this.readonly,\n            evented: !this.readonly,\n            name: this.data.id,\n            data: {\n                type: 'trapezoid',\n                ...this.data,\n            },\n        });\n    }\n\n    private updateLine(): void;\n    private updateLine(points: BeamPoints): void;\n    /**\n     * 上端の線を更新する\n     */\n    private updateLine(points?: BeamPoints): void {\n        const average = this.manager.trapezoidAverage;\n        let li: Vector;\n        let lj: Vector;\n\n        if (points) {\n            li = new Vector(points[0], points[1]);\n            lj = new Vector(points[2], points[3]);\n        } else {\n            if (this.draggingEdge === 'i') {\n                li = this.draggingPosition\n                    .clone()\n                    .add(\n                        this.direction\n                            .clone()\n                            .multiplyScalar(this.calcLength(this.data.forceI, average))\n                    );\n                lj = this.pj\n                    .clone()\n                    .add(\n                        this.direction\n                            .clone()\n                            .multiplyScalar(this.calcLength(this.data.forceJ, average))\n                    );\n            } else if (this.draggingEdge === 'j') {\n                li = this.pi\n                    .clone()\n                    .add(\n                        this.direction\n                            .clone()\n                            .multiplyScalar(this.calcLength(this.data.forceI, average))\n                    );\n                lj = this.draggingPosition\n                    .clone()\n                    .add(\n                        this.direction\n                            .clone()\n                            .multiplyScalar(this.calcLength(this.data.forceJ, average))\n                    );\n            } else {\n                li = this.pi\n                    .clone()\n                    .add(\n                        this.direction\n                            .clone()\n                            .multiplyScalar(this.calcLength(this.data.forceI, average))\n                    );\n                lj = this.pj\n                    .clone()\n                    .add(\n                        this.direction\n                            .clone()\n                            .multiplyScalar(this.calcLength(this.data.forceJ, average))\n                    );\n            }\n\n            this.linePoints = [li.x, li.y, lj.x, lj.y];\n        }\n\n        this.manager.canvas.remove(this.line);\n        this.line = this.createLine([li.x, li.y, lj.x, lj.y]);\n        // ドラッグ中のみの描画、ドラッグ完了後に再作成されるので\n        // イベント割当は割愛\n        this.manager.canvas.add(this.line);\n    }\n\n    public remove(): void {\n        // キャンバスから削除\n        this.removeFromCanvas();\n\n        const trapezoids = this.manager.trapezoidMap[this.data.beam];\n        if (trapezoids) {\n            const list = trapezoids.filter((shape) => shape.data.id !== this.data.id);\n            this.manager.trapezoidMap[this.data.beam] = list;\n        }\n    }\n\n    private addToCanvas(): void {\n        this.manager.canvas.add(\n            this.forceI,\n            this.forceJ,\n            ...this.arrows,\n            this.line,\n            this.labelI,\n            this.labelJ\n        );\n        if (this.guide) {\n            this.manager.canvas.add(this.guide);\n        }\n        // 選択しやすいように i端、j端の矢印を最前面に持ってくる\n        this.forceI.bringToFront();\n        this.forceJ.bringToFront();\n    }\n\n    /**\n     * キャンバスから分布荷重を削除する\n     */\n    private removeFromCanvas(): void {\n        this.manager.canvas.remove(\n            this.forceI,\n            this.forceJ,\n            ...this.arrows,\n            this.line,\n            this.labelI,\n            this.labelJ\n        );\n        if (this.guide) {\n            this.manager.canvas.remove(this.guide);\n        }\n    }\n\n    /**\n     * 矢印の長さから分布荷重の大きさを計算\n     * @param length 矢印の長さ\n     * @returns\n     */\n    private calcForce(length: number): number {\n        if (this.manager.trapezoidAverage === 0) {\n            return 10;\n        }\n\n        return Math.round((length / TrapezoidArrowBaseLength) * this.manager.trapezoidAverage);\n    }\n\n    private calcLength(force: number, average: number): number {\n        if (isNaN(average) || average === 0) {\n            return TrapezoidArrowBaseLength;\n        }\n        return (force / average) * TrapezoidArrowBaseLength;\n    }\n\n    private createTrapezoidLabel(label: string, position: Vector, angle: number): fabric.Textbox {\n        return new fabric.Textbox(label, {\n            ...defaultTrapezoidLabelOptions,\n            top: position.y,\n            left: position.x,\n            angle,\n            width: 140,\n        });\n    }\n\n    /**\n     * ラベル、寸法線、中央の矢印の表示・非表示を切り替える\n     */\n    private setVisibleParts(visible = true) {\n        const shapes = [this.labelI, this.labelJ, ...this.arrows];\n        shapes.forEach((shape) => (shape.visible = visible));\n\n        if (this.guide) {\n            this.guide.visible = visible;\n        }\n    }\n\n    /**\n     * 選択\n     */\n    public select(): void {\n        let shape: fabric.Object = this.line;\n        if (this.draggingEdge) {\n            shape = this.draggingEdge === 'i' ? this.forceI : this.forceJ;\n        }\n\n        this.manager.canvas.setActiveObject(shape);\n    }\n\n    // イベントハンドラ\n\n    private attachEvents() {\n        const edges = [this.forceI, this.forceJ];\n        const shapes = [this.forceI, this.forceJ, ...this.arrows, this.line];\n\n        shapes.forEach((shape) => {\n            // 選択・選択解除\n            shape.on('selected', this.onSelected.bind(this));\n            shape.on('deselected', this.onDeselected.bind(this));\n            // クリック・長押し\n            shape.on('mousedown', this.onMouseDown.bind(this));\n            shape.on('mouseup', this.onMouseUp.bind(this));\n            shape.on('mousedblclick', this.onDblClick.bind(this));\n        });\n\n        edges.forEach((edge) => {\n            // ドラッグ\n            edge.on('moving', this.onMoving.bind(this));\n            edge.on('moved', this.onMoved.bind(this));\n            // 回転\n            edge.on('rotating', this.onRotating.bind(this));\n            edge.on('rotated', this.onRotated.bind(this));\n            // 伸縮\n            edge.on('scaling', this.onScaling.bind(this));\n            edge.on('scaled', this.onScaled.bind(this));\n        });\n    }\n\n    private onSelected(event: fabric.IEvent<Event>): void {\n        // 選択された項目を保持する\n        const name = event.target?.name;\n        if (name) {\n            this.selectedShapes.add(name);\n        }\n\n        this.labelI.visible = true;\n        this.labelJ.visible = true;\n        if (this.guide) {\n            this.guide.visible = true;\n        }\n    }\n\n    private onDeselected(event: fabric.IEvent<Event>): void {\n        // 選択解除\n        const name = event.target?.name;\n        if (name) {\n            this.selectedShapes.delete(name);\n        }\n        // すべての選択が解除されたら寸法線を隠す\n        if (this.selectedShapes.size === 0) {\n            this.labelI.visible = false;\n            this.labelJ.visible = false;\n            if (this.guide) {\n                this.guide.visible = false;\n            }\n        }\n    }\n\n    private onMouseDown(event: fabric.IEvent<Event>): void {\n        if (this.readonly) {\n            // 読み取り専用時は何もしない\n            return;\n        }\n\n        if (this.manager.tool === 'delete') {\n            this.remove();\n            this.manager.calcTrapezoidAverage();\n            return;\n        }\n\n        if (['select', 'trapezoid'].includes(this.manager.tool) && event.target) {\n            // すでに長押しを実行中ならタイマーキャンセル\n            if (this.longpressTimer) {\n                clearTimeout(this.longpressTimer);\n                this.longpressTimer = undefined;\n            }\n\n            const shape = event.target;\n            // 長押し前の現在位置を保持する\n            const { top: beforeTop, left: beforeLeft } = shape.getBoundingRect(true, true);\n\n            // 長押し判定\n            this.longpressTimer = setTimeout(() => {\n                // 長押し後の現在位置\n                const { top: afterTop, left: afterLeft } = shape.getBoundingRect(true, true);\n                // 位置が変わっていなければ longpress とする\n                if (compareCoords([beforeLeft, beforeTop], [afterLeft, afterTop])) {\n                    // ダイアログの表示\n                    this.manager.openTrapezoidDialog(event, this);\n                }\n                this.longpressTimer = undefined;\n            }, CanvasManager.LongpressInterval);\n        }\n    } // end onMouseDown\n\n    private onMouseUp(event: fabric.IEvent<Event>): void {\n        if (this.longpressTimer) {\n            clearTimeout(this.longpressTimer);\n            this.longpressTimer = undefined;\n        }\n    }\n\n    private onDblClick(event: fabric.IEvent<Event>): void {\n        if (!this.readonly) {\n            // ダイアログの表示\n            this.manager.openTrapezoidDialog(event, this);\n        }\n    }\n\n    /**\n     * ドラッグ可能範囲を計算\n     */\n    private calcDraggableRange() {\n        if (this.beam && this.draggingEdge) {\n            // 梁要素のi端、j端\n            [this.vi.x, this.vi.y] = [this.beam.points[0], this.beam.points[1]];\n            [this.vj.x, this.vj.y] = [this.beam.points[2], this.beam.points[3]];\n\n            if (this.draggingEdge === 'i') {\n                // i端の移動可能範囲\n                // 最小値: 現在位置から i端側\n                this.draggableMin = this.vi.distance(this.pi) * -1;\n\n                // 最大値: 現在位置から j方向、distanceJ + 5% の地点まで\n                // (梁要素の長さに対して 5% を分布荷重の最小幅とする)\n                if (1 - (this.data.distanceJ + 0.05) < this.data.distanceI) {\n                    // j端側へは移動不可\n                    this.draggableMax = 0;\n                } else {\n                    const ratio = 1 - (this.data.distanceJ + 0.05);\n                    const dj = lerp(this.vi, this.vj, ratio);\n                    this.draggableMax = this.pi.distance(dj);\n                }\n            } else if (this.draggingEdge === 'j') {\n                // j端の移動可能範囲\n                // 最大値: 現在位置から j端側\n                this.draggableMax = this.vj.distance(this.pj);\n\n                // 最小値: 現在位置から i方向、distanceI + 5% の地点まで\n                if (1 - this.data.distanceJ < this.data.distanceI + 0.05) {\n                    // i端側へは移動不可\n                    this.draggableMin = 0;\n                } else {\n                    const di = lerp(this.vi, this.vj, this.data.distanceI + 0.05);\n                    this.draggableMin = this.pj.distance(di) * -1;\n                }\n            }\n        }\n    }\n\n    /**\n     * 梁要素に沿って移動する\n     * @param shape\n     */\n    private moveArrow(shape: fabric.Object, position: Vector) {\n        if (this.beam) {\n            // ドラッグ位置\n            this.draggingPosition.x = shape.left ?? 0;\n            this.draggingPosition.y = shape.top ?? 0;\n\n            // 元の位置から現在位置までの距離\n            const dragLength = position.distance(this.draggingPosition);\n            // ドラッグの方向\n            this.draggingDirection.copy(\n                this.draggingPosition.clone().subtract(position).normalize()\n            );\n            // ドラッグの角度\n            const angle = 180 - this.draggingDirection.verticalAngleDeg();\n            // ドラッグ方向と梁要素のなす角度\n            const deg = this.beam.angle - angle;\n            const rad = (deg * Math.PI) / 180;\n            // ドラッグされた長さを梁要素上の長さに変換\n            let dist = dragLength * Math.cos(rad);\n            // ドラッグ可能な範囲に修正\n            if (this.draggableMin > dist) {\n                dist = this.draggableMin;\n            } else if (this.draggableMax < dist) {\n                dist = this.draggableMax;\n            }\n\n            // 矢印の位置を更新\n            this.draggingPosition\n                .copy(position)\n                .add(this.beam.direction.clone().multiplyScalar(dist));\n            shape.left = this.draggingPosition.x;\n            shape.top = this.draggingPosition.y;\n\n            // 上端の線を更新\n            this.updateLine();\n        }\n    }\n\n    /**\n     * ドラッグしている要素が i端かj端かを判定する\n     * @param event\n     * @returns\n     */\n    private checkDraggingEdge(event: fabric.IEvent<Event>): 'i' | 'j' | undefined {\n        if (event.transform) {\n            // NOTE: 型定義に transform.target が存在しないので\n            // 強制的に変換する\n            const eventTransform = event.transform as unknown as Record<string, unknown>;\n            const eventTarget = eventTransform.target as fabric.Object;\n            // 移動中の矢印が i端/j端のどちらか？\n            switch (eventTarget.data?.type) {\n                case 'trapezoid/i':\n                    return 'i';\n                case 'trapezoid/j':\n                    return 'j';\n            }\n        }\n    }\n\n    private onMoving(event: fabric.IEvent<Event>): void {\n        if (['select', 'trapezoid'].includes(this.manager.tool) && event.transform) {\n            if (!this.dragging) {\n                // ラベル、寸法線、中央の矢印を非表示にする\n                this.setVisibleParts(false);\n                // 対象の梁要素を取得\n                this.beam = this.manager.beamMap[this.data.beam];\n\n                // ドラッグしているのが i端かj端か？\n                this.draggingEdge = this.checkDraggingEdge(event);\n\n                if (this.draggingEdge) {\n                    // ドラッグ可能範囲を計算\n                    this.calcDraggableRange();\n\n                    this.dragging = true;\n                }\n            }\n\n            // 矢印の移動\n            if (this.draggingEdge === 'i') {\n                this.moveArrow(this.forceI, this.pi);\n            } else if (this.draggingEdge === 'j') {\n                this.moveArrow(this.forceJ, this.pj);\n            }\n        }\n    }\n\n    private onMoved(event: fabric.IEvent<Event>): void {\n        if (this.beam && this.dragging) {\n            // 最終的なドラッグ位置を計算\n            if (this.draggingEdge === 'i') {\n                this.moveArrow(this.forceI, this.pi);\n\n                // distanceI を更新\n                const distance = this.vi.distance(this.draggingPosition);\n                this.data.distanceI = round(distance / this.beam.length, 2);\n            } else if (this.draggingEdge === 'j') {\n                this.moveArrow(this.forceJ, this.pj);\n\n                // distanceJ を更新\n                const distance = this.vj.distance(this.draggingPosition);\n                this.data.distanceJ = round(distance / this.beam.length, 2);\n            }\n\n            // 再描画\n            this.update();\n            // 移動した矢印を再選択する\n            this.select();\n        }\n        // ドラッグ終了\n        this.dragging = false;\n        this.beam = undefined;\n        this.draggableMin = Number.MIN_SAFE_INTEGER;\n        this.draggableMax = Number.MAX_SAFE_INTEGER;\n        this.draggingEdge = undefined;\n    }\n\n    private onScaling(event: fabric.IEvent<Event>): void {\n        if (['select', 'trapezoid'].includes(this.manager.tool) && event.transform) {\n            if (!this.dragging) {\n                // ラベル、寸法線、中央の矢印を非表示にする\n                this.setVisibleParts(false);\n                // ドラッグしているのが i端かj端か？\n                this.draggingEdge = this.checkDraggingEdge(event);\n\n                // 長さを保持する\n                if (this.draggingEdge === 'i') {\n                    this.draggingLength = this.forceI.height ?? 0;\n                } else if (this.draggingEdge === 'j') {\n                    this.draggingLength = this.forceJ.height ?? 0;\n                }\n\n                this.dragging = true;\n            }\n\n            let force: fabric.Object | undefined;\n            // 矢印とその位置を取得\n            if (this.draggingEdge === 'i') {\n                force = this.forceI;\n                this.draggingPosition.copy(this.pi);\n            } else if (this.draggingEdge === 'j') {\n                force = this.forceJ;\n                this.draggingPosition.copy(this.pj);\n            }\n\n            if (force) {\n                // 矢印のお尻の位置\n                const scale = force.scaleY ?? 1;\n                const length = this.draggingLength * scale;\n                this.draggingPosition.add(this.direction.clone().multiplyScalar(length));\n\n                // 上側の線を更新\n                if (this.draggingEdge === 'i') {\n                    this.linePoints[0] = this.draggingPosition.x;\n                    this.linePoints[1] = this.draggingPosition.y;\n                } else if (this.draggingEdge === 'j') {\n                    this.linePoints[2] = this.draggingPosition.x;\n                    this.linePoints[3] = this.draggingPosition.y;\n                }\n                this.updateLine(this.linePoints);\n            }\n        }\n    }\n    private onScaled(event: fabric.IEvent<Event>): void {\n        if (this.dragging) {\n            let force: fabric.Object | undefined;\n            // 矢印を取得\n            if (this.draggingEdge === 'i') {\n                force = this.forceI;\n            } else if (this.draggingEdge === 'j') {\n                force = this.forceJ;\n            }\n\n            if (force) {\n                const scale = force.scaleY ?? 1;\n                const length = this.draggingLength * scale;\n                // 長さから荷重の大きさを計算\n                const value = this.calcForce(length);\n                if (this.draggingEdge === 'i') {\n                    this.data.forceI = value;\n                } else if (this.draggingEdge === 'j') {\n                    this.data.forceJ = value;\n                }\n\n                // 分布荷重を再生成\n                this.update();\n                // ドラッグした要素を再選択\n                this.select();\n            }\n        }\n        // ドラッグ終了\n        this.dragging = false;\n        this.draggingEdge = undefined;\n    }\n\n    private onRotating(event: fabric.IEvent<Event>): void {\n        if (['select', 'trapezoid'].includes(this.manager.tool) && event.transform) {\n            if (!this.dragging) {\n                // ラベル、寸法線、中央の矢印を非表示にする\n                this.setVisibleParts(false);\n                // ドラッグしているのが i端かj端か？\n                this.draggingEdge = this.checkDraggingEdge(event);\n\n                // 現在の角度を保持する\n                // (同じ角度のはずだが、念の為にドラッグされている要素の角度を取得)\n                if (this.draggingEdge === 'i') {\n                    this.originalAngle = this.forceI.angle ?? 0;\n                } else if (this.draggingEdge === 'j') {\n                    this.originalAngle = this.forceJ.angle ?? 0;\n                }\n\n                this.dragging = true;\n            }\n\n            if (this.draggingEdge) {\n                // i端とj端の矢印の angle を一致させる\n                let angle = 0;\n                if (this.draggingEdge === 'i') {\n                    angle = this.forceI.angle ?? 0;\n                    this.forceJ.angle = angle;\n                } else if (this.draggingEdge === 'j') {\n                    angle = this.forceJ.angle ?? 0;\n                    this.forceI.angle = angle;\n                }\n                // i端の矢印のお尻の位置\n                const y = vY.clone().invert();\n                const li = this.pi.clone().add(\n                    y\n                        .clone()\n                        .multiplyScalar(this.forceI.height ?? 0)\n                        .rotateDeg(angle)\n                );\n                // j端の矢印のお尻の位置\n                const lj = this.pj.clone().add(\n                    y\n                        .clone()\n                        .multiplyScalar(this.forceJ.height ?? 0)\n                        .rotateDeg(angle)\n                );\n                // 上側の線を更新\n                this.linePoints = [li.x, li.y, lj.x, lj.y];\n                this.updateLine(this.linePoints);\n            }\n        }\n    }\n\n    private onRotated(event: fabric.IEvent<Event>): void {\n        if (this.dragging) {\n            // 角度を取得\n            let angle = 0;\n            if (this.draggingEdge === 'i') {\n                angle = this.forceI.angle ?? 0;\n            } else if (this.draggingEdge === 'j') {\n                angle = this.forceJ.angle ?? 0;\n            }\n\n            // 角度が変わっていなければ終了\n            if (this.originalAngle === angle) {\n                return;\n            }\n\n            // 元の位置から回転させた角度\n            let deg = 0;\n            if (angle - this.originalAngle > 0) {\n                deg = angle - this.originalAngle;\n            } else {\n                deg = 360 - this.originalAngle + angle;\n            }\n            // 5°にスナップ\n            deg = snapAngle(deg, 5);\n\n            // 角度を保持\n            let degree = (this.data.angle ?? 0) + deg;\n            degree = roundDegree(degree);\n            this.data.angle = degree;\n\n            // 再描画\n            this.update();\n            // 選択\n            this.select();\n        }\n        // ドラッグ終了\n        this.dragging = false;\n        this.draggingEdge = undefined;\n    }\n}\n","import { StructureCanvasProps } from '../../types/note';\n\nexport type BeamPoints = [number, number, number, number];\n\nexport interface Shape {\n    type: 'beams' | 'forces' | 'trapezoids';\n    id: string;\n}\n\nexport type Point = [number, number];\n\nexport interface CanvasCoreHandler {\n    getStructure: () => StructureCanvasProps;\n}\n\n/**\n * path:created イベント\n */\nexport interface PathEvent {\n    path: fabric.Path;\n}\n\nexport const isPathEvent = (item: unknown): item is PathEvent => {\n    if (item && typeof item === 'object') {\n        const temp = item as Record<string, unknown>;\n        return typeof temp.path === 'object';\n    }\n    return false;\n};\n\ntype PathStart = ['M' | 'm', number, number];\ntype PathMid = ['Q' | 'q', number, number, number, number];\ntype PathEnd = ['L' | 'l', number, number];\n\nexport type SVGPath = [PathStart, ...PathMid[], PathEnd];\nexport const isPathStart = (item: unknown): item is PathStart => {\n    if (Array.isArray(item) && item.length === 3) {\n        return (\n            (item[0] === 'M' || item[0] === 'm') &&\n            typeof item[1] === 'number' &&\n            typeof item[2] === 'number'\n        );\n    }\n    return false;\n};\nexport const isPathEnd = (item: unknown): item is PathEnd => {\n    if (Array.isArray(item) && item.length === 3) {\n        return (\n            (item[0] === 'L' || item[0] === 'l') &&\n            typeof item[1] === 'number' &&\n            typeof item[2] === 'number'\n        );\n    }\n    return false;\n};\nexport const isSVGPath = (item: unknown): item is SVGPath => {\n    if (Array.isArray(item)) {\n        if (item.length > 0) {\n            const s = item[0];\n            const e = item[item.length - 1];\n            return isPathStart(s) && isPathEnd(e);\n        }\n        return true;\n    }\n    return false;\n};\n","import { fabric } from 'fabric';\nimport { v4 as uuid } from 'uuid';\nimport { CanvasTool, DOMSize, EventType, ShapePosition } from '../../types/common';\nimport { StructureCanvasProps } from '../../types/note';\nimport {\n    Beam,\n    Force,\n    isForce,\n    isMoment,\n    isNode,\n    isTrapezoid,\n    Node,\n    Structure,\n    Trapezoid,\n} from '../../types/shape';\nimport { debug } from '../../utils/logger';\nimport { createGlobalGuideLine } from './factory';\nimport { OpenPopupFunction } from './popup/types';\nimport { BeamShape, ForceShape, NodeShape, TrapezoidShape } from './shape';\nimport { MomentShape } from './shape/MomentShape';\nimport { isPathEnd, isPathEvent, isPathStart, isSVGPath } from './types';\nimport { getPointerPosition, snap, Vector } from './util';\n\nexport interface CanvasManagerParameters extends StructureCanvasProps {\n    tool: CanvasTool;\n    readonly?: boolean;\n    snapSize?: number;\n    gridSize?: number;\n}\n\n/**\n * 背景のグリッド線の設定\n */\nconst defaultGridLineProps: fabric.ILineOptions = {\n    stroke: '#eee',\n    strokeWidth: 1,\n    // イベントに反応させない\n    evented: false,\n    hasControls: false,\n    selectable: false,\n    // 出力対象外\n    excludeFromExport: true,\n    data: {\n        type: 'background',\n        excludeExport: true,\n    },\n};\n\n/**\n * 梁要素追加時の色\n */\nconst StrokeBeam = '#0000ff';\n/**\n * 分布荷重追加時の色\n */\nconst StrokeTrapezoid = '#ff0000';\n\nclass CanvasManager {\n    public canvas: fabric.Canvas;\n    private _tool: CanvasTool = 'pen';\n    private _readonly = false;\n    public snapSize = 25;\n    public gridSize = 25;\n\n    private _props: StructureCanvasProps;\n    private _data: Structure;\n\n    /**\n     * ポップアップの表示\n     */\n    private openPopup: OpenPopupFunction;\n\n    /**\n     * イベント種類 (mouse | touch)\n     */\n    private eventType: EventType | undefined;\n\n    /**\n     * 要素選択の有無 (要素選択中はパン不可)\n     */\n    private hasSelected = false;\n\n    /**\n     * ピンチ中フラグ\n     */\n    private pinching = false;\n\n    /**\n     * パン中フラグ\n     */\n    private panning = false;\n\n    /**\n     * ドラッグ時のポインタ位置\n     */\n    private lastPos: ShapePosition | undefined;\n\n    /**\n     * 集中荷重の平均値\n     */\n    public forceAverage = 0;\n    /**\n     * 分布荷重の平均値\n     */\n    public trapezoidAverage = 0;\n    /**\n     * 節点\n     */\n    public nodeMap: Record<string, NodeShape> = {};\n    /**\n     * 梁要素\n     */\n    public beamMap: Record<string, BeamShape> = {};\n    /**\n     * 節点に紐づく梁要素\n     * key: 節点ID, value: 梁要素の配列\n     */\n    public nodeBeamMap: Record<string, BeamShape[]> = {};\n    /**\n     * beamId と force の矢印・ラベルの組み合わせ\n     */\n    public forceMap: Record<string, ForceShape[]> = {};\n    /**\n     * beamId と Moment の矢印・ラベルの組み合わせ\n     */\n    public momentMap: Record<string, MomentShape[]> = {};\n    /**\n     * beamId と trapezoid の矢印・ラベルの組み合わせ\n     */\n    public trapezoidMap: Record<string, TrapezoidShape[]> = {};\n    /**\n     * 全体の寸法線\n     */\n    public globalGuideLines: fabric.Group[] = [];\n\n    /**\n     * 長押しと判定する時間 (ms)\n     */\n    public static LongpressInterval: Readonly<number> = 1000;\n\n    /**\n     * ズーム開始時のscale\n     */\n    private zoomStartScale = 1;\n\n    private _initialized = false;\n\n    /**\n     * 分布荷重を追加する梁要素ID\n     * (追加後にクリアすること)\n     */\n    public currentBeam: string | undefined;\n\n    constructor(\n        canvasDom: HTMLCanvasElement,\n        params: CanvasManagerParameters,\n        open: OpenPopupFunction\n    ) {\n        debug('::: initialize CanvasManager :::', params);\n        const {\n            data,\n            zoom,\n            viewport,\n            tool,\n            readonly = false,\n            snapSize = 25,\n            gridSize = 25,\n        } = params;\n\n        const { width, height } = canvasDom.getBoundingClientRect();\n\n        // IDなどを確保\n        this._props = params;\n        this._data = data;\n\n        this.canvas = new fabric.Canvas(canvasDom, {\n            selection: true,\n            isDrawingMode: false,\n            fireRightClick: true, // 右クリックを有効にする\n            stopContextMenu: true, // 右クリックメニューを表示しない\n        });\n\n        this.canvas.setZoom(zoom);\n        if (viewport) {\n            this.canvas.setViewportTransform(viewport);\n        }\n        // キャンバスのサイズを設定\n        this.resize({ width, height });\n\n        this.snapSize = snapSize;\n        this.gridSize = gridSize;\n\n        this.openPopup = open;\n\n        // 背景の描画\n        this.drawBackgroundGrid();\n        // 初期化処理\n        const { nodes, beams, forces, moments, trapezoids } = data;\n\n        // 平均値\n        this.calcForceAverage(forces);\n        this.calcTrapezoidAverage(trapezoids);\n\n        // 節点の作成\n        nodes.forEach((node) => {\n            const shape = new NodeShape(this, node);\n            this.nodeMap[node.id] = shape;\n        });\n\n        // 梁要素の作成\n        beams.forEach((beam) => {\n            const shape = new BeamShape(this, beam);\n            // 参照を保持する\n            this.beamMap[beam.id] = shape;\n            if (typeof this.nodeBeamMap[beam.nodeI] === 'undefined') {\n                this.nodeBeamMap[beam.nodeI] = [shape];\n            } else {\n                this.nodeBeamMap[beam.nodeI].push(shape);\n            }\n            if (typeof this.nodeBeamMap[beam.nodeJ] === 'undefined') {\n                this.nodeBeamMap[beam.nodeJ] = [shape];\n            } else {\n                this.nodeBeamMap[beam.nodeJ].push(shape);\n            }\n        });\n\n        // 集中荷重の作成\n        forces.forEach((force) => {\n            const shape = new ForceShape(this, force);\n            // 参照を保持する\n            if (typeof this.forceMap[force.beam] === 'undefined') {\n                this.forceMap[force.beam] = [shape];\n            } else {\n                this.forceMap[force.beam].push(shape);\n            }\n        });\n\n        // モーメント荷重の作成\n        moments.forEach((moment) => {\n            const shape = new MomentShape(this, moment);\n            // 参照を保持する\n            if (typeof this.momentMap[moment.beam] === 'undefined') {\n                this.momentMap[moment.beam] = [shape];\n            } else {\n                this.momentMap[moment.beam].push(shape);\n            }\n        });\n\n        // 分布荷重の作成\n        trapezoids.forEach((trapezoid) => {\n            const shape = new TrapezoidShape(this, trapezoid);\n            // 参照を保持する\n            if (typeof this.trapezoidMap[trapezoid.beam] === 'undefined') {\n                this.trapezoidMap[trapezoid.beam] = [shape];\n            } else {\n                this.trapezoidMap[trapezoid.beam].push(shape);\n            }\n        });\n\n        // 寸法線の作成\n        this.updateGlobalGuidelines();\n\n        // キャンバスイベント設定\n        this.attachEvent();\n\n        this.tool = tool;\n        this.readonly = readonly;\n\n        this.canvas.renderAll();\n        // 初期化完了\n        this._initialized = true;\n    } // end constructor\n\n    // --- properties ---\n\n    get tool(): CanvasTool {\n        return this._tool;\n    }\n\n    /**\n     * ツール選択に応じたモードの変更\n     * @param value\n     */\n    set tool(value: CanvasTool) {\n        this._tool = value;\n\n        // 選択を解除する\n        this.canvas.discardActiveObject();\n\n        // キャンバスの設定\n        if (value === 'select' || value === 'force' || value === 'delete') {\n            this.canvas.selection = value === 'select';\n        } else {\n            // pen, trapezoid\n            this.canvas.selection = false;\n            // ブラシの生成・更新\n            this.setBrush();\n        }\n\n        // オブジェクトの設定\n        this.setSelectableShapes();\n    }\n\n    get readonly(): boolean {\n        return this._readonly;\n    }\n\n    set readonly(value: boolean) {\n        this._readonly = value;\n        // 各オブジェクトの設定変更\n        this.setSelectableShapes();\n    }\n\n    get initialized(): boolean {\n        return this._initialized;\n    }\n\n    // --- public methods ---\n\n    /**\n     * canvas のリサイズ\n     * @param size\n     */\n    public resize(size: DOMSize): void {\n        const { width, height } = size;\n        this.canvas.setWidth(width);\n        this.canvas.setHeight(height);\n    }\n\n    /**\n     * 保持しているデータを整形して返す\n     * @returns\n     */\n    public toCanvasProps(): StructureCanvasProps {\n        const nodes = Object.values(this.nodeMap).map(({ data }) => data);\n        const beams = Object.values(this.beamMap).map(({ data }) => data);\n        const forces = Object.values(this.forceMap).flatMap((shapes) =>\n            shapes.map(({ data }) => data)\n        );\n        const moments = Object.values(this.momentMap).flatMap((shapes) =>\n            shapes.map(({ data }) => data)\n        );\n        const trapezoids = Object.values(this.trapezoidMap).flatMap((shapes) =>\n            shapes.map(({ data }) => data)\n        );\n\n        // 現在表示されている内容を SVG にする\n        const image = this.canvas.toSVG({ suppressPreamble: true });\n\n        // viewport, zoom\n        const viewport = this.canvas.viewportTransform ?? this._props.viewport;\n        const zoom = this.canvas.getZoom();\n\n        const data: StructureCanvasProps = {\n            ...this._props,\n            data: {\n                ...this._data,\n                nodes,\n                beams,\n                forces,\n                moments,\n                trapezoids,\n            },\n            image,\n            zoom,\n            viewport,\n        };\n\n        return data;\n    }\n\n    /**\n     * ポップアップの表示\n     * @param event\n     * @param shape\n     */\n    public openNodeDialog(event: fabric.IEvent<Event>, shape: NodeShape): void {\n        // ポインタの位置を取得する\n        const point = getPointerPosition(event);\n        if (point) {\n            const { x: left, y: top } = point;\n            // ダイアログを表示\n            this.openPopup(\n                'nodes',\n                { top, left },\n                shape.data as unknown as Record<string, unknown>,\n                (values: Record<string, unknown>) => {\n                    if (isNode(values)) {\n                        // 節点を更新\n                        shape.update(values);\n                    }\n                }\n            );\n        }\n    }\n\n    /**\n     * ポップアップの表示\n     * @param event\n     * @param shape\n     */\n    public openForceDialog(event: fabric.IEvent<Event>, shape: ForceShape): void {\n        const point = getPointerPosition(event);\n        if (point) {\n            const { x: left, y: top } = point;\n            // ダイアログを表示\n            this.openPopup(\n                'forces',\n                { top, left },\n                shape.data as unknown as Record<string, unknown>,\n                (values: Record<string, unknown>) => {\n                    if (isForce(values)) {\n                        // 集中荷重を更新\n                        shape.update(values);\n                    }\n                }\n            );\n        }\n    }\n\n    /**\n     * ポップアップの表示\n     * @param event\n     * @param shape\n     */\n    public openTrapezoidDialog(event: fabric.IEvent<Event>, shape: TrapezoidShape): void {\n        const point = getPointerPosition(event);\n        if (point) {\n            const { x: left, y: top } = point;\n            // ダイアログを表示\n            this.openPopup(\n                'trapezoids',\n                { top, left },\n                shape.data as unknown as Record<string, unknown>,\n                (values: Record<string, unknown>) => {\n                    if (isTrapezoid(values)) {\n                        // 分布荷重を更新\n                        shape.update(values);\n                    }\n                }\n            );\n        }\n    }\n\n    public openMomentDialog(event: fabric.IEvent<Event>, shape: MomentShape): void {\n        const point = getPointerPosition(event);\n        if (point) {\n            const { x: left, y: top } = point;\n            // ダイアログを表示\n            this.openPopup(\n                'moments',\n                { top, left },\n                shape.data as unknown as Record<string, unknown>,\n                (values: Record<string, unknown>) => {\n                    if (isMoment(values)) {\n                        // モーメント荷重を更新\n                        shape.update(values);\n                    }\n                }\n            );\n        }\n    }\n\n    /**\n     * 集中荷重の平均値\n     * @param forces\n     */\n    public calcForceAverage(forces?: Force[]): void {\n        let list = forces ?? [];\n        if (typeof forces === 'undefined') {\n            list = Object.values(this.forceMap).flatMap((shapes) =>\n                shapes.map((shape) => shape.data)\n            );\n        }\n\n        let forceAverage = 0;\n        if (list.length > 0) {\n            const { force: total } = list.reduce((prev, current) => {\n                const item: Force = {\n                    ...prev,\n                    force: prev.force + current.force,\n                };\n                return item;\n            });\n            forceAverage = total / list.length;\n        }\n\n        this.forceAverage = forceAverage;\n    }\n\n    /**\n     * 分布荷重の平均値\n     * @param trapezoids\n     */\n    public calcTrapezoidAverage(trapezoids?: Trapezoid[]): void {\n        let list = trapezoids ?? [];\n        if (typeof trapezoids === 'undefined') {\n            list = Object.values(this.trapezoidMap).flatMap((shapes) =>\n                shapes.map((shape) => shape.data)\n            );\n        }\n\n        let trapezoidAverage = 0;\n        if (list.length > 0) {\n            const total = list\n                .map(({ forceI, forceJ }) => forceI + forceJ)\n                .reduce((prev, current) => prev + current);\n            trapezoidAverage = total / (list.length * 2);\n        }\n\n        this.trapezoidAverage = trapezoidAverage;\n    }\n\n    /**\n     * 全体の寸法線の更新\n     */\n    public updateGlobalGuidelines(): void {\n        if (this.globalGuideLines.length > 0) {\n            // 表示済みの寸法線を削除\n            this.canvas.remove(...this.globalGuideLines);\n            // 念の為配列を初期化\n            this.globalGuideLines.length = 0;\n        }\n\n        // 全体の寸法線の作成\n        const nodes = Object.values(this.nodeMap).map((shape) => shape.data);\n        const lines = createGlobalGuideLine(nodes, this._props.height);\n\n        this.globalGuideLines.push(...lines);\n        this.canvas.add(...lines);\n    }\n\n    /**\n     * 梁要素に紐付かない節点を削除\n     */\n    public removeUnconnectedNodes(): void {\n        Object.entries(this.nodeBeamMap).forEach(([nodeId, beams]) => {\n            if (typeof beams === 'undefined' || beams.length === 0) {\n                // 節点に紐づく梁要素が存在しない\n                const node = this.nodeMap[nodeId];\n                if (node) {\n                    node.remove();\n                }\n                delete this.nodeBeamMap[nodeId];\n            }\n        });\n    }\n\n    // --- private methods ---\n    /**\n     * 背景の描画\n     */\n    private drawBackgroundGrid() {\n        const lines: fabric.Line[] = [];\n        const { height, width } = this._props;\n\n        for (let y = 0; y <= height; y += this.gridSize) {\n            const hl = new fabric.Line([0, y, width, y], { ...defaultGridLineProps });\n            lines.push(hl);\n        }\n\n        // 最下部\n        const h = new fabric.Line([0, height, width, height], { ...defaultGridLineProps });\n        lines.push(h);\n\n        for (let x = 0; x <= width; x += this.gridSize) {\n            const vl = new fabric.Line([x, 0, x, height], { ...defaultGridLineProps });\n            lines.push(vl);\n        }\n\n        // 右端\n        const v = new fabric.Line([width, 0, width, height], { ...defaultGridLineProps });\n        lines.push(v);\n\n        this.canvas.add(...lines);\n    }\n\n    /**\n     * 節点の追加\n     * @param x\n     * @param y\n     * @returns\n     */\n    private addNodeIfNotExists(x: number, y: number): string {\n        // 同一座標にすでに節点が存在する場合はその節点を使用\n        const entry = Object.entries(this.nodeMap).find(\n            ([, node]) => node.data.x === x && node.data.y === y\n        );\n        if (entry) {\n            const [nodeId] = entry;\n            return nodeId;\n        }\n\n        // 新しい節点を追加\n        const nodeId = uuid();\n        const node: Node = {\n            id: nodeId,\n            name: nodeId,\n            x,\n            y,\n        };\n\n        // 節点の作成\n        const shape = new NodeShape(this, node);\n        this.nodeMap[nodeId] = shape;\n\n        return nodeId;\n    }\n\n    /**\n     * 梁要素の追加\n     * @param nodeI\n     * @param nodeJ\n     * @returns\n     */\n    private addBeamIfNotExists(nodeI: string, nodeJ: string): string {\n        const nodes = [nodeI, nodeJ];\n        // i端, j端を同じくする梁要素が存在する？\n        const entry = Object.entries(this.beamMap).find(([, beam]) => {\n            return nodes.includes(beam.data.nodeI) && nodes.includes(beam.data.nodeJ);\n        });\n        if (entry) {\n            const [beamId] = entry;\n            return beamId;\n        }\n\n        const beamId = uuid();\n        const beam: Beam = {\n            id: beamId,\n            name: beamId,\n            nodeI,\n            nodeJ,\n        };\n\n        // 梁要素の作成\n        const shape = new BeamShape(this, beam);\n        this.beamMap[beamId] = shape;\n        nodes.forEach((node) => {\n            if (typeof this.nodeBeamMap[node] === 'undefined') {\n                this.nodeBeamMap[node] = [];\n            }\n            this.nodeBeamMap[node].push(shape);\n        });\n\n        return beamId;\n    }\n\n    /**\n     * ツール選択に応じたオブジェクトの設定\n     */\n    private setSelectableShapes(): void {\n        const editable = !this.readonly;\n\n        // 節点\n        const selectableNode = this.tool === 'select';\n        const eventedNode = editable && ['select', 'delete'].includes(this.tool);\n        // 梁要素\n        const selectableBeam = this.tool === 'select';\n        const eventedBeam = editable;\n        // 集中荷重\n        const selectableForce = ['select', 'force'].includes(this.tool);\n        const eventedForce = editable && ['select', 'force', 'delete'].includes(this.tool);\n        // モーメント荷重\n        const selectableMoment = ['select', 'moment'].includes(this.tool);\n        const eventedMoment = editable && ['select', 'moment', 'delete'].includes(this.tool);\n        // 分布荷重\n        const selectableTrapezoid = ['select', 'trapezoid'].includes(this.tool);\n        const eventedTrapezoid = editable && ['select', 'trapezoid', 'delete'].includes(this.tool);\n\n        // 節点\n        Object.values(this.nodeMap).forEach((shape) => {\n            shape.node.selectable = selectableNode;\n            shape.node.evented = eventedNode;\n        });\n        Object.entries(this.beamMap).forEach(([beamId, shape]) => {\n            // 梁要素\n            shape.beam.selectable = selectableBeam;\n            shape.beam.evented = eventedBeam;\n            // 集中荷重\n            const forces = this.forceMap[beamId];\n            if (forces) {\n                forces.forEach((shape) => {\n                    shape.force.selectable = selectableForce;\n                    shape.force.evented = eventedForce;\n                });\n            }\n            // モーメント荷重\n            const moments = this.momentMap[beamId];\n            if (moments) {\n                moments.forEach((shape) => {\n                    shape.moment.selectable = selectableMoment;\n                    shape.moment.evented = eventedMoment;\n                });\n            }\n            // 分布荷重\n            const trapezoids = this.trapezoidMap[beamId];\n            if (trapezoids) {\n                trapezoids.forEach((shape) => {\n                    shape.evented = eventedTrapezoid;\n                    shape.selectable = selectableTrapezoid;\n                });\n            }\n        });\n    }\n\n    /**\n     * 選択ツールに応じたペン設定\n     */\n    private setBrush(): void {\n        let brush = this.canvas.freeDrawingBrush;\n        if (!Boolean(brush)) {\n            // ブラシ未定義の場合は生成\n            brush = new fabric.PencilBrush(this.canvas);\n            this.canvas.freeDrawingBrush = brush;\n        }\n\n        // ツールに応じた色の設定\n        switch (this.tool) {\n            case 'pen':\n                brush.color = StrokeBeam;\n                break;\n            case 'trapezoid':\n                brush.color = StrokeTrapezoid;\n                break;\n            default:\n                brush.color = '#000'; // とりあえず黒\n                break;\n        }\n        // 線の太さ\n        brush.width = 2;\n    }\n\n    /**\n     * viewport の補正\n     */\n    private fitViewport(diffX?: number, diffY?: number): void {\n        const vpt = this.canvas.viewportTransform;\n        const zoom = this.canvas.getZoom();\n        const canvasWidth = this.canvas.getWidth();\n        const canvasHeight = this.canvas.getHeight();\n        const { width: pageWidth, height: pageHeight } = this._props;\n\n        if (vpt) {\n            let px = vpt[4];\n            let py = vpt[5];\n\n            // ページ幅がキャンバス幅に収まる\n            if (canvasWidth >= pageWidth * zoom) {\n                px = canvasWidth / 2 - (pageWidth * zoom) / 2;\n            } else {\n                if (typeof diffX === 'number') {\n                    px += diffX;\n                }\n\n                if (px >= 0) {\n                    px = 0;\n                } else if (px < canvasWidth - pageWidth * zoom) {\n                    px = canvasWidth - pageWidth * zoom;\n                }\n            }\n            // ページ高がキャンバス高に収まる\n            if (canvasHeight >= pageHeight * zoom) {\n                py = canvasHeight / 2 - (pageHeight * zoom) / 2;\n            } else {\n                if (typeof diffY === 'number') {\n                    py += diffY;\n                }\n\n                if (py >= 0) {\n                    py = 0;\n                } else if (py < canvasHeight - pageHeight * zoom) {\n                    py = canvasHeight - pageHeight * zoom;\n                }\n            }\n\n            vpt[4] = px;\n            vpt[5] = py;\n\n            this.canvas.requestRenderAll();\n        }\n    }\n\n    // --- events ---\n\n    private attachEvent() {\n        this.canvas.on('mouse:down:before', this.onMouseDownBefore.bind(this));\n        this.canvas.on('mouse:down', this.onMouseDown.bind(this));\n        this.canvas.on('mouse:move', this.onMouseMove.bind(this));\n        this.canvas.on('mouse:up', this.onMouseUp.bind(this));\n        this.canvas.on('selection:created', this.onSelect.bind(this));\n        this.canvas.on('selection:updated', this.onSelect.bind(this));\n        this.canvas.on('selection:cleared', this.onDeselect.bind(this));\n        this.canvas.on('path:created', this.onCreatePath.bind(this));\n        this.canvas.on('object:added', this.onCreateObject.bind(this));\n        this.canvas.on('touch:drag', this.onTouchDrag.bind(this));\n        this.canvas.on('touch:gesture', this.onTouchGesture.bind(this));\n        this.canvas.on('mouse:wheel', this.onMouseWheel.bind(this));\n    }\n\n    /**\n     * mouse down 前にタッチ本数などを元にフラグをセット\n     * @param event\n     */\n    private onMouseDownBefore(event: fabric.IEvent<Event>): void {\n        debug('mouse:down:before', event);\n\n        const clickedShapeType: string = event.target?.data?.type ?? 'canvas';\n\n        if (event.e.type.indexOf('touch') === 0) {\n            this.eventType = 'touch';\n\n            const { touches } = event.e as TouchEvent;\n            debug('- fingers=', touches.length);\n\n            if (touches.length === 1) {\n                if (this.tool === 'pen') {\n                    // 梁要素の追加モード\n                    this.canvas.isDrawingMode = true;\n                } else if (this.tool === 'trapezoid' && clickedShapeType === 'beam') {\n                    // 分布荷重の追加モードで梁要素にタッチした場合\n                    this.canvas.isDrawingMode = true;\n                } else {\n                    // 上記以外の場合は描画不可\n                    this.canvas.isDrawingMode = false;\n\n                    if (!this.hasSelected && !Boolean(event.target)) {\n                        // 要素未選択の場合はパン\n                        this.panning = true;\n                    }\n                }\n            } else {\n                this.canvas.isDrawingMode = false;\n            }\n\n            if (touches.length === 2) {\n                // ピンチ\n                this.pinching = true;\n            }\n            if (touches.length > 2) {\n                // 3本指以上でタッチ -> パン\n                this.panning = true;\n            }\n        } else if (event.e.type.indexOf('mouse') === 0) {\n            this.eventType = 'mouse';\n\n            const { button } = event.e as MouseEvent;\n            if (button === 0) {\n                // 左クリック時\n                if (this.tool === 'pen') {\n                    // 梁要素の追加モード\n                    this.canvas.isDrawingMode = true;\n                } else if (this.tool === 'trapezoid' && clickedShapeType === 'beam') {\n                    // 分布荷重の追加モードで梁要素にタッチした場合\n                    this.canvas.isDrawingMode = true;\n                } else {\n                    // 上記以外の場合は描画不可\n                    this.canvas.isDrawingMode = false;\n\n                    if (!this.hasSelected && !Boolean(event.target)) {\n                        // 要素未選択の場合はパン\n                        this.panning = true;\n                    }\n                }\n            }\n            if (button === 2) {\n                // 右クリック時\n                this.panning = true;\n            }\n        }\n\n        if (this.panning) {\n            // パンの際は範囲選択の矩形を表示しない\n            this.canvas.selection = false;\n        }\n    }\n\n    private onMouseDown(event: fabric.IEvent<Event>): void {\n        // ポインタ位置\n        this.lastPos = getPointerPosition(event);\n    }\n\n    /**\n     * ピンチイン・ピンチアウト\n     * @param event\n     */\n    private onTouchGesture(event: fabric.IGestureEvent<Event>): void {\n        if (this.pinching && event.e.type.indexOf('touch') === 0) {\n            const { touches } = event.e as TouchEvent;\n            if (touches && touches.length === 2 && event.self) {\n                if (event.self.state === 'start') {\n                    // イベント開始時の scale を保持\n                    this.zoomStartScale = this.canvas.getZoom();\n                }\n                let zoom = this.zoomStartScale * event.self.scale;\n                if (zoom > 20) {\n                    zoom = 20;\n                }\n                if (zoom < 0.1) {\n                    zoom = 0.1;\n                }\n\n                const point = new fabric.Point(event.self.x, event.self.y);\n                this.canvas.zoomToPoint(point, zoom);\n\n                this.fitViewport();\n            }\n        }\n    }\n\n    /**\n     * マウスホイールによるズームイン・ズームアウト\n     * @param event\n     */\n    private onMouseWheel(event: fabric.IEvent<Event>): void {\n        if (event.e.type.indexOf('wheel') === 0) {\n            const evt = event.e as WheelEvent;\n\n            const { deltaY, offsetX, offsetY } = evt;\n            let zoom = this.canvas.getZoom();\n            zoom *= 0.999 ** deltaY;\n\n            if (zoom > 20) {\n                zoom = 20;\n            }\n            if (zoom < 0.1) {\n                zoom = 0.1;\n            }\n\n            const point = new fabric.Point(offsetX, offsetY);\n            this.canvas.zoomToPoint(point, zoom);\n\n            evt.preventDefault();\n            evt.stopPropagation();\n\n            this.fitViewport();\n        }\n    }\n\n    private onTouchDrag(event: fabric.IEvent<Event>): void {\n        if (this.eventType === 'touch' && this.panning) {\n            const point = getPointerPosition(event);\n            if (point && this.lastPos) {\n                const { x, y } = point;\n                const diffX = x - this.lastPos.x;\n                const diffY = y - this.lastPos.y;\n                this.fitViewport(diffX, diffY);\n                this.lastPos = point;\n            }\n        }\n    }\n\n    private onMouseMove(event: fabric.IEvent<Event>): void {\n        if (this.eventType === 'mouse' && this.panning) {\n            // ポインタ位置\n            const point = getPointerPosition(event);\n            if (point && this.lastPos) {\n                const { x, y } = point;\n                const diffX = x - this.lastPos.x;\n                const diffY = y - this.lastPos.y;\n                this.fitViewport(diffX, diffY);\n\n                this.lastPos = point;\n            }\n        }\n    }\n\n    private onMouseUp(event: fabric.IEvent<Event>): void {\n        debug('mouse:up', event);\n\n        if (this.panning || this.pinching) {\n            const vpt = this.canvas.viewportTransform;\n            if (vpt) {\n                this.canvas.setViewportTransform(vpt);\n            }\n        }\n\n        // 複数選択を可能にする\n        this.canvas.selection = this.tool === 'select';\n        // 描画フラグをoff\n        this.canvas.isDrawingMode = false;\n        // ドラッグ中のフラグなどをクリア\n        this.panning = false;\n        this.pinching = false;\n        this.lastPos = undefined;\n    }\n\n    // 要素選択\n    private onSelect(): void {\n        this.hasSelected = true;\n    }\n\n    // 要素選択解除\n    private onDeselect(): void {\n        this.hasSelected = false;\n    }\n\n    /**\n     * パスが描かれたとき\n     * @param event\n     * @returns\n     */\n    private onCreatePath(event: fabric.IEvent<Event>): void {\n        if (isPathEvent(event)) {\n            const { path } = event.path;\n            if (path && isSVGPath(path) && path.length >= 2) {\n                // 始点と終点\n                const s = path[0];\n                const e = path[path.length - 1];\n                if (isPathStart(s) && isPathEnd(e)) {\n                    let [, ix, iy] = s;\n                    let [, jx, jy] = e;\n\n                    if (ix === jx && iy === jy) {\n                        // 同一座標の場合は何もしない\n                        return;\n                    }\n\n                    if (ix > jx || (ix === jx && iy > jy)) {\n                        // 始点と終点を入れ替え\n                        [ix, jx] = [jx, ix];\n                        [iy, jy] = [jy, iy];\n                    }\n\n                    if (this.tool === 'pen') {\n                        // スナップする\n                        [ix, iy] = snap([ix, iy], this.snapSize);\n                        [jx, jy] = snap([jx, jy], this.snapSize);\n\n                        // 節点の作成\n                        const nodeI = this.addNodeIfNotExists(ix, iy);\n                        const nodeJ = this.addNodeIfNotExists(jx, jy);\n                        // 梁要素の作成\n                        this.addBeamIfNotExists(nodeI, nodeJ);\n\n                        // 全体の寸法線を更新\n                        this.updateGlobalGuidelines();\n                    } else if (this.tool === 'trapezoid' && this.currentBeam) {\n                        // 梁要素を取得\n                        const beam = this.beamMap[this.currentBeam];\n\n                        if (beam) {\n                            // 始点、終点から i端/j端からの距離比を取得\n                            const vs = new Vector(ix, iy);\n                            const ve = new Vector(jx, jy);\n                            const distanceI = beam.calcRatio(vs);\n                            const distanceJ = 1 - beam.calcRatio(ve);\n                            // 分布荷重を作成\n                            const trapezoidId = uuid();\n                            const data: Trapezoid = {\n                                id: trapezoidId,\n                                name: trapezoidId,\n                                beam: beam.data.id,\n                                forceI: 10,\n                                forceJ: 10,\n                                distanceI,\n                                distanceJ,\n                            };\n                            const shape = new TrapezoidShape(this, data);\n\n                            if (typeof this.trapezoidMap[beam.data.id] === 'undefined') {\n                                this.trapezoidMap[beam.data.id] = [];\n                            }\n                            this.trapezoidMap[beam.data.id].push(shape);\n\n                            // 平均値を更新\n                            this.calcTrapezoidAverage();\n                        }\n\n                        // 分布荷重の追加終了\n                        this.canvas.isDrawingMode = false;\n                        this.currentBeam = undefined;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * 要素が追加されたとき\n     * @param event\n     */\n    private onCreateObject(event: fabric.IEvent<Event>): void {\n        // パスが追加されたら即削除する\n        if (event.target?.type === 'path') {\n            this.canvas.remove(event.target);\n        }\n    }\n\n    /**\n     * 保持しているデータを破棄する\n     */\n    public dispose(): void {\n        debug('::: dispose CanvasManager :::');\n        if (this._initialized) {\n            this.canvas.clear();\n            this.canvas.dispose();\n        }\n    }\n}\n\nexport default CanvasManager;\n","var _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgPin1(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"svg\",\n    viewBox: \"0 0 160 160\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M80 0 L30 80 L130 80 Z\",\n    strokeWidth: 6,\n    stroke: \"gray\",\n    fill: \"transparent\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgPin1);\nexport default __webpack_public_path__ + \"static/media/pin_1.92d54adc.svg\";\nexport { ForwardRef as ReactComponent };","import {\n    createContext,\n    Dispatch,\n    ReactNode,\n    SetStateAction,\n    useCallback,\n    useRef,\n    useState,\n} from 'react';\nimport {\n    OpenPopupFunction,\n    PopupCallbackFunction,\n    PopupParams,\n    PopupPosition,\n    PopupType,\n} from '../popup/types';\n\ninterface IPopupContext {\n    popupType?: PopupType;\n    setPopupType: Dispatch<SetStateAction<PopupType | undefined>>;\n    popupPosition: PopupPosition;\n    setPopupPosition: Dispatch<SetStateAction<PopupPosition>>;\n    open: OpenPopupFunction;\n    close: VoidFunction;\n    popupParams?: PopupParams;\n    callback?: PopupCallbackFunction;\n}\n\ninterface Props {\n    children: ReactNode;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nexport const PopupContext = createContext<IPopupContext>(undefined!);\n\nconst PopupProvider: React.VFC<Props> = ({ children }) => {\n    // ポップアップの種類\n    const [popupType, setPopupType] = useState<PopupType>();\n    // ポップアップの位置\n    const [popupPosition, setPopupPosition] = useState<PopupPosition>({ top: 0, left: 0 });\n    // パラメータ\n    const [popupParams, setPopupParams] = useState<PopupParams>({});\n    // コールバック\n    const callbackFunc = useRef<PopupCallbackFunction>();\n\n    const open = useCallback(\n        (\n            type: PopupType,\n            position: PopupPosition,\n            params?: PopupParams,\n            callback?: PopupCallbackFunction\n        ) => {\n            setPopupType(type);\n            setPopupPosition(position);\n            setPopupParams(params ?? {});\n            callbackFunc.current = callback;\n        },\n        []\n    );\n\n    const close = useCallback(() => {\n        setPopupType(undefined);\n        setPopupPosition({ top: 0, left: 0 });\n        setPopupParams({});\n        callbackFunc.current = undefined;\n    }, []);\n\n    const callback = useCallback((values: Record<string, unknown>) => {\n        if (callbackFunc.current) {\n            callbackFunc.current(values);\n        }\n    }, []);\n\n    return (\n        <PopupContext.Provider\n            value={{\n                popupType,\n                setPopupType,\n                popupPosition,\n                setPopupPosition,\n                open,\n                close,\n                popupParams,\n                callback,\n            }}\n        >\n            {children}\n        </PopupContext.Provider>\n    );\n};\n\nexport default PopupProvider;\n","import {\n    forwardRef,\n    useContext,\n    useEffect,\n    useImperativeHandle,\n    useLayoutEffect,\n    useRef,\n} from 'react';\nimport { CanvasTool, DOMSize } from '../../types/common';\nimport { defaultCanvasProps, StructureCanvasProps } from '../../types/note';\nimport CanvasManager from './manager';\nimport { PopupContext } from './provider/PopupProvider';\nimport { CanvasCoreHandler } from './types';\n\ninterface Props extends StructureCanvasProps {\n    canvasSize: DOMSize;\n    readonly?: boolean;\n    tool: CanvasTool;\n    snapSize?: number;\n    gridSize?: number;\n}\n\nconst CanvasCore: React.ForwardRefRenderFunction<CanvasCoreHandler, Props> = (\n    { canvasSize, ...props },\n    ref\n) => {\n    const { open } = useContext(PopupContext);\n\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    const managerRef = useRef<CanvasManager>();\n\n    useImperativeHandle(ref, () => ({\n        getStructure: () => {\n            if (managerRef.current) {\n                return managerRef.current.toCanvasProps();\n            }\n            return defaultCanvasProps;\n        },\n    }));\n\n    // 初期化\n    useLayoutEffect(() => {\n        if (canvasRef.current && canvasSize.width !== 0 && canvasSize.height !== 0) {\n            if (typeof managerRef.current === 'undefined') {\n                managerRef.current = new CanvasManager(canvasRef.current, props, open);\n            } else {\n                managerRef.current.resize(canvasSize);\n            }\n        }\n    }, [canvasSize, open, props]);\n\n    // ツールが変更された場合\n    useEffect(() => {\n        if (managerRef.current && managerRef.current.tool !== props.tool) {\n            managerRef.current.tool = props.tool;\n        }\n    }, [props.tool]);\n\n    return <canvas ref={canvasRef} width={canvasSize.width} height={canvasSize.height} />;\n};\n\nexport default forwardRef(CanvasCore);\n","import { Button, InputAdornment, Paper, Stack, TextField } from '@mui/material';\nimport { ChangeEvent, FormEvent, useCallback, useEffect, useMemo, useState } from 'react';\nimport { Force, isForce } from '../../../types/shape';\nimport { PopupBaseProps } from './types';\n\ntype Props = PopupBaseProps;\n\ninterface ForceEditorProps extends Omit<Props, 'values'> {\n    force: Force;\n}\n\nconst ForceEditor: React.VFC<ForceEditorProps> = ({ force, onChange, onClose }) => {\n    const [value, setValue] = useState('');\n    const [error, setError] = useState<string>();\n\n    const handleSubmit = useCallback(\n        (event: FormEvent<HTMLFormElement>) => {\n            event.preventDefault();\n\n            if (event.currentTarget.checkValidity() && typeof error === 'undefined') {\n                const num = parseFloat(value);\n                if (!isNaN(num)) {\n                    // 更新\n                    onChange &&\n                        onChange({\n                            ...force,\n                            force: num,\n                        });\n                    // ポップアップ閉じる\n                    onClose();\n                }\n            }\n        },\n        [error, onChange, onClose, value, force]\n    );\n\n    const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const { value } = event.currentTarget;\n        let errorMessage: string | undefined;\n        setValue(value);\n\n        // 必須\n        if (value.length === 0) {\n            errorMessage = '数値を入力してください';\n        }\n        // 数値？\n        const num = parseFloat(value);\n        if (isNaN(num)) {\n            errorMessage = '数値を入力してください';\n        }\n        if (0 > num || num > Number.MAX_SAFE_INTEGER) {\n            errorMessage = '0 より大きい値を入力してください';\n        }\n\n        setError(errorMessage);\n    }, []);\n\n    useEffect(() => {\n        setValue(`${force.force}`);\n        setError(undefined);\n    }, [force]);\n\n    return (\n        <Paper>\n            <Stack\n                direction=\"column\"\n                spacing={1}\n                sx={{ p: 1, width: 240 }}\n                component=\"form\"\n                autoComplete=\"off\"\n                noValidate\n                onSubmit={handleSubmit}\n            >\n                <TextField\n                    variant=\"outlined\"\n                    margin=\"dense\"\n                    size=\"small\"\n                    label=\"集中荷重\"\n                    value={value}\n                    required\n                    fullWidth\n                    onChange={handleChange}\n                    InputProps={{\n                        endAdornment: <InputAdornment position=\"end\">kN</InputAdornment>,\n                    }}\n                    error={Boolean(error)}\n                    helperText={error}\n                />\n                <Stack direction=\"row\" justifyContent=\"flex-end\" spacing={1}>\n                    <Button size=\"small\" onClick={onClose}>\n                        キャンセル\n                    </Button>\n                    <Button type=\"submit\" size=\"small\" variant=\"contained\">\n                        OK\n                    </Button>\n                </Stack>\n            </Stack>\n        </Paper>\n    );\n};\n\nconst ConnectedForceEditor: React.VFC<Props> = ({ values, ...props }) => {\n    const force = useMemo(() => {\n        if (isForce(values)) {\n            return values;\n        }\n        // 空の force を渡す\n        return {\n            id: '',\n            name: '',\n            beam: '',\n            force: 0,\n            distanceI: 0,\n        };\n    }, [values]);\n\n    return <ForceEditor {...props} force={force} />;\n};\n\nexport default ConnectedForceEditor;\n","import { Button, InputAdornment, Paper, Stack, TextField } from '@mui/material';\nimport { ChangeEvent, FormEvent, useCallback, useEffect, useMemo, useState } from 'react';\nimport { isMoment, Moment } from '../../../types/shape';\nimport { PopupBaseProps } from './types';\n\ntype Props = PopupBaseProps;\n\ninterface MomentEditorProps extends Omit<Props, 'values'> {\n    moment: Moment;\n}\n\nconst MomentEditor: React.VFC<MomentEditorProps> = ({ moment, onChange, onClose }) => {\n    const [value, setValue] = useState('');\n    const [error, setError] = useState<string>();\n\n    const handleSubmit = useCallback(\n        (event: FormEvent<HTMLFormElement>) => {\n            event.preventDefault();\n\n            if (event.currentTarget.checkValidity() && typeof error === 'undefined') {\n                const num = parseFloat(value);\n                if (!isNaN(num)) {\n                    // 更新\n                    onChange &&\n                        onChange({\n                            ...moment,\n                            moment: num,\n                        });\n                    // ポップアップ閉じる\n                    onClose();\n                }\n            }\n        },\n        [error, value, onChange, moment, onClose]\n    );\n\n    const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const { value } = event.currentTarget;\n        let errorMessage: string | undefined;\n        setValue(value);\n\n        // 必須\n        if (value.length === 0) {\n            errorMessage = '数値を入力してください';\n        }\n        // 数値？\n        const num = parseFloat(value);\n        if (isNaN(num)) {\n            errorMessage = '数値を入力してください';\n        }\n\n        setError(errorMessage);\n    }, []);\n\n    useEffect(() => {\n        setValue(`${moment.moment}`);\n        setError(undefined);\n    }, [moment]);\n\n    return (\n        <Paper>\n            <Stack\n                direction=\"column\"\n                spacing={1}\n                sx={{ p: 1, width: 240 }}\n                component=\"form\"\n                autoComplete=\"off\"\n                noValidate\n                onSubmit={handleSubmit}\n            >\n                <TextField\n                    variant=\"outlined\"\n                    margin=\"dense\"\n                    size=\"small\"\n                    label=\"モーメント荷重\"\n                    value={value}\n                    required\n                    fullWidth\n                    onChange={handleChange}\n                    InputProps={{\n                        endAdornment: <InputAdornment position=\"end\">kN</InputAdornment>,\n                    }}\n                    error={Boolean(error)}\n                    helperText={error}\n                />\n                <Stack direction=\"row\" justifyContent=\"flex-end\" spacing={1}>\n                    <Button size=\"small\" onClick={onClose}>\n                        キャンセル\n                    </Button>\n                    <Button type=\"submit\" size=\"small\" variant=\"contained\">\n                        OK\n                    </Button>\n                </Stack>\n            </Stack>\n        </Paper>\n    );\n};\n\nconst ConnectedMomentEditor: React.VFC<Props> = ({ values, ...props }) => {\n    const moment = useMemo(() => {\n        if (isMoment(values)) {\n            return values;\n        }\n        // 空の moment を渡す\n        return {\n            id: '',\n            name: '',\n            beam: '',\n            moment: 0,\n            distanceI: 0,\n        };\n    }, [values]);\n\n    return <MomentEditor {...props} moment={moment} />;\n};\n\nexport default ConnectedMomentEditor;\n","var _path, _circle, _circle2, _line;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgPin2(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"svg\",\n    viewBox: \"0 0 160 160\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M80 0 L30 80 L130 80 Z\",\n    strokeWidth: 6,\n    stroke: \"gray\",\n    fill: \"transparent\"\n  })), _circle || (_circle = /*#__PURE__*/React.createElement(\"circle\", {\n    stroke: \"gray\",\n    strokeWidth: 6,\n    fill: \"transparent\",\n    cx: 45,\n    cy: 115,\n    r: 20\n  })), _circle2 || (_circle2 = /*#__PURE__*/React.createElement(\"circle\", {\n    stroke: \"gray\",\n    strokeWidth: 6,\n    fill: \"transparent\",\n    cx: 115,\n    cy: 115,\n    r: 20\n  })), _line || (_line = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 30,\n    y1: 150,\n    x2: 130,\n    y2: 150,\n    stroke: \"gray\",\n    strokeWidth: 6\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgPin2);\nexport default __webpack_public_path__ + \"static/media/pin_2.2b2bb714.svg\";\nexport { ForwardRef as ReactComponent };","var _path, _circle, _circle2, _line;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgPin3(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"svg\",\n    viewBox: \"0 0 160 160\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M30 3 L30 80 L130 80 L130 3 Z\",\n    strokeWidth: 6,\n    stroke: \"gray\",\n    fill: \"transparent\"\n  })), _circle || (_circle = /*#__PURE__*/React.createElement(\"circle\", {\n    stroke: \"gray\",\n    strokeWidth: 6,\n    fill: \"transparent\",\n    cx: 45,\n    cy: 115,\n    r: 20\n  })), _circle2 || (_circle2 = /*#__PURE__*/React.createElement(\"circle\", {\n    stroke: \"gray\",\n    strokeWidth: 6,\n    fill: \"transparent\",\n    cx: 115,\n    cy: 115,\n    r: 20\n  })), _line || (_line = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 30,\n    y1: 150,\n    x2: 130,\n    y2: 150,\n    stroke: \"gray\",\n    strokeWidth: 6\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgPin3);\nexport default __webpack_public_path__ + \"static/media/pin_3.ed9f9bf0.svg\";\nexport { ForwardRef as ReactComponent };","var _line, _line2, _line3, _line4, _line5;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgPin4(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"svg\",\n    viewBox: \"0 0 160 160\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _line || (_line = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 0,\n    y1: 3,\n    x2: 160,\n    y2: 3,\n    stroke: \"gray\",\n    strokeWidth: 6\n  })), _line2 || (_line2 = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 20,\n    y1: 0,\n    x2: 0,\n    y2: 60,\n    stroke: \"gray\",\n    strokeWidth: 6\n  })), _line3 || (_line3 = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 60,\n    y1: 0,\n    x2: 40,\n    y2: 60,\n    stroke: \"gray\",\n    strokeWidth: 6\n  })), _line4 || (_line4 = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 100,\n    y1: 0,\n    x2: 80,\n    y2: 60,\n    stroke: \"gray\",\n    strokeWidth: 6\n  })), _line5 || (_line5 = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 140,\n    y1: 0,\n    x2: 120,\n    y2: 60,\n    stroke: \"gray\",\n    strokeWidth: 6\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgPin4);\nexport default __webpack_public_path__ + \"static/media/pin_4.962a4879.svg\";\nexport { ForwardRef as ReactComponent };","import CircleOutlinedIcon from '@mui/icons-material/CircleOutlined';\nimport {\n    Button,\n    Paper,\n    Stack,\n    SvgIcon,\n    ToggleButton,\n    ToggleButtonGroup,\n    ToggleButtonProps,\n    Typography,\n} from '@mui/material';\nimport {\n    FormEvent,\n    MouseEvent,\n    ReactElement,\n    useCallback,\n    useEffect,\n    useMemo,\n    useState,\n} from 'react';\nimport { isNode, isNodePinType, Node, NodePinType } from '../../../types/shape';\nimport { ReactComponent as PinIcon1 } from './pins/pin_1.svg';\nimport { ReactComponent as PinIcon2 } from './pins/pin_2.svg';\nimport { ReactComponent as PinIcon3 } from './pins/pin_3.svg';\nimport { ReactComponent as PinIcon4 } from './pins/pin_4.svg';\nimport { PopupBaseProps } from './types';\n\ntype Props = PopupBaseProps;\n\ninterface PinSelectorProps extends Omit<Props, 'values'> {\n    node: Node;\n}\n\ninterface PinButtonProps {\n    type: NodePinType;\n    icon: ReactElement;\n    label: string;\n}\n\nconst PinButtons: Readonly<Record<NodePinType, PinButtonProps>> = {\n    free: {\n        type: 'free',\n        icon: <CircleOutlinedIcon />,\n        label: '完全フリー',\n    },\n    pin: {\n        type: 'pin',\n        icon: (\n            <SvgIcon sx={{ width: 24 }} viewBox=\"0 0 160 160\">\n                <PinIcon1 />\n            </SvgIcon>\n        ),\n        label: '完全ピン',\n    },\n    pinX: {\n        type: 'pinX',\n        icon: (\n            <SvgIcon sx={{ width: 24 }} viewBox=\"0 0 160 160\">\n                <PinIcon2 />\n            </SvgIcon>\n        ),\n        label: 'ピンXローラー',\n    },\n    pinZ: {\n        type: 'pinZ',\n        icon: (\n            <SvgIcon sx={{ width: 24, transform: 'rotate(-90deg)' }} viewBox=\"0 0 160 160\">\n                <PinIcon2 />\n            </SvgIcon>\n        ),\n        label: 'ピンZローラー',\n    },\n    fixX: {\n        type: 'fixX',\n        icon: (\n            <SvgIcon sx={{ width: 24 }} viewBox=\"0 0 160 160\">\n                <PinIcon3 />\n            </SvgIcon>\n        ),\n        label: '固定Xローラー',\n    },\n    fix: {\n        type: 'fix',\n        icon: (\n            <SvgIcon sx={{ width: 24 }} viewBox=\"0 0 160 160\">\n                <PinIcon4 />\n            </SvgIcon>\n        ),\n        label: '完全固定',\n    },\n};\n\nconst defaultButtonProps: Partial<ToggleButtonProps> = {\n    sx: { justifyContent: 'flex-start', alignItems: 'center' },\n};\n\nconst PinSelector: React.VFC<PinSelectorProps> = ({ node, onChange, onClose }) => {\n    const [pin, setPin] = useState<NodePinType>();\n\n    const handleSubmit = useCallback(\n        (event: FormEvent) => {\n            event.preventDefault();\n\n            const values: Node = {\n                ...node,\n                pin,\n            };\n\n            // 無理くり Record<string, unknown> に変換して渡す\n            onChange && onChange(values as unknown as Record<string, unknown>);\n            onClose();\n        },\n        [node, onChange, onClose, pin]\n    );\n\n    const handleChange = useCallback((_: MouseEvent<HTMLElement>, newValue: string | null) => {\n        if (newValue !== null && isNodePinType(newValue)) {\n            setPin(newValue);\n        }\n    }, []);\n\n    useEffect(() => {\n        setPin(node.pin ?? 'free');\n    }, [node.pin]);\n\n    return (\n        <Paper>\n            <Stack\n                direction=\"column\"\n                spacing={1}\n                sx={{ p: 1, width: 240 }}\n                component=\"form\"\n                autoComplete=\"off\"\n                noValidate\n                onSubmit={handleSubmit}\n            >\n                <ToggleButtonGroup\n                    orientation=\"vertical\"\n                    value={pin}\n                    size=\"small\"\n                    exclusive\n                    fullWidth\n                    onChange={handleChange}\n                >\n                    {Object.entries(PinButtons).map(([key, { icon, label }]) => (\n                        <ToggleButton key={key} value={key} {...defaultButtonProps}>\n                            {icon}\n                            <Typography variant=\"caption\" sx={{ ml: 1 }}>\n                                {label}\n                            </Typography>\n                        </ToggleButton>\n                    ))}\n                </ToggleButtonGroup>\n                <Stack direction=\"row\" justifyContent=\"flex-end\" spacing={1}>\n                    <Button size=\"small\" onClick={onClose}>\n                        キャンセル\n                    </Button>\n                    <Button type=\"submit\" size=\"small\" variant=\"contained\">\n                        OK\n                    </Button>\n                </Stack>\n            </Stack>\n        </Paper>\n    );\n};\n\nconst ConnectedPinSelector: React.VFC<Props> = ({ values, ...props }) => {\n    const node = useMemo(() => {\n        if (isNode(values)) {\n            return values;\n        }\n        return {\n            id: '',\n            name: '',\n            x: 0,\n            y: 0,\n        };\n    }, [values]);\n\n    return <PinSelector {...props} node={node} />;\n};\n\nexport default ConnectedPinSelector;\n","import {\n    Button,\n    Checkbox,\n    FormControlLabel,\n    InputAdornment,\n    Paper,\n    Stack,\n    TextField,\n} from '@mui/material';\nimport { ChangeEvent, FormEvent, useCallback, useEffect, useMemo, useState } from 'react';\nimport { isTrapezoid, Trapezoid } from '../../../types/shape';\nimport { round } from '../util';\nimport { PopupBaseProps } from './types';\n\ntype Props = PopupBaseProps;\n\ninterface FormProps extends Omit<Props, 'values'> {\n    trapezoid: Trapezoid;\n}\n\ninterface TrapezoidAttrs {\n    forceI: number;\n    forceJ: number;\n    angle: number;\n    isGlobal: boolean;\n}\ninterface FormValues {\n    forceI: string;\n    forceJ: string;\n    angle: string;\n    isGlobal: boolean;\n}\n\ntype ValidateTuple = [value: number, valid: boolean, error: string];\n\n/**\n * 必須かつ 0以上の数値\n * @param value\n */\nconst validateForce = (value: string): ValidateTuple => {\n    if (value.length === 0) {\n        // 必須\n        return [NaN, false, '数値を入力してください'];\n    } else {\n        const val = parseFloat(value);\n        if (isNaN(val)) {\n            // 数値でない\n            return [NaN, false, '数値を入力してください'];\n        } else if (0 >= val && val > Number.MAX_SAFE_INTEGER) {\n            // 数値が範囲外\n            return [val, false, '0 以上の数値を入力してください'];\n        }\n        // OK\n        return [round(val, 3), true, ''];\n    }\n};\n\n/**\n * -180 から 180 の範囲の数値\n * -180 の場合は 180 とする\n * @param value\n */\nconst validateAngle = (value: string): ValidateTuple => {\n    if (value.length > 0) {\n        let val = parseInt(value, 10);\n        if (isNaN(val) || value.indexOf('.') >= 0) {\n            // 整数でない\n            return [NaN, false, '整数を入力してください'];\n        } else if (-180 > val || 180 < val) {\n            // 180 から 180 の範囲外\n            return [val, false, '-180 〜 180 で入力してください'];\n        }\n        if (val === -180) {\n            // -180 の場合は 180 とする\n            val = 180;\n        }\n        // OK\n        return [val, true, ''];\n    }\n    // 未指定の場合は 90 を返す\n    return [90, true, ''];\n};\n\nconst parseFormValues = (values: Partial<FormValues>): [boolean, TrapezoidAttrs] => {\n    const attrs: TrapezoidAttrs = {\n        forceI: 0,\n        forceJ: 0,\n        angle: 90,\n        isGlobal: false,\n    };\n\n    // forceI\n    const [value1, valid1] = validateForce(values.forceI ?? '');\n    const [value2, valid2] = validateForce(values.forceJ ?? '');\n    const [value3, valid3] = validateAngle(values.angle ?? '');\n    const valid = valid1 && valid2 && valid3;\n\n    attrs.forceI = value1;\n    attrs.forceJ = value2;\n    attrs.angle = value3;\n    attrs.isGlobal = values.isGlobal ?? false;\n\n    return [valid, attrs];\n};\n\nconst toFormValues = (trapezoid: Trapezoid): Partial<FormValues> => {\n    const values: Partial<FormValues> = {};\n\n    values.forceI = `${trapezoid.forceI}`;\n    values.forceJ = `${trapezoid.forceJ}`;\n    values.angle = `${trapezoid.angle ?? ''}`;\n    values.isGlobal = trapezoid.isGlobal;\n\n    return values;\n};\n\nconst TrapezoidEditor: React.VFC<FormProps> = ({ trapezoid, onChange, onClose }) => {\n    const [values, setValues] = useState<Partial<FormValues>>({});\n    const [errors, setErrors] = useState<Record<string, string>>({});\n\n    const handleSubmit = useCallback(\n        (event: FormEvent<HTMLFormElement>) => {\n            event.preventDefault();\n\n            if (event.currentTarget.checkValidity()) {\n                // エラーがあれば更新しない\n                const invalid = Object.values(errors).some((error) => error.length > 0);\n                if (!invalid) {\n                    // values を TrapezoidAttrs に変換する\n                    const [valid, attrs] = parseFormValues(values);\n                    if (valid) {\n                        // 更新\n                        onChange &&\n                            onChange({\n                                ...trapezoid,\n                                ...attrs,\n                            });\n                    }\n                    // ポップアップ閉じる\n                    onClose();\n                }\n            }\n        },\n        [errors, onChange, onClose, trapezoid, values]\n    );\n\n    const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const { name, value } = event.target;\n        let errorMessage = '';\n        switch (name) {\n            case 'forceI':\n            case 'forceJ':\n                // 必須かつ 0以上の数値\n                const [, valid1, error1] = validateForce(value);\n                if (!valid1) {\n                    errorMessage = error1;\n                }\n                break;\n            case 'angle':\n                const [, valid2, error2] = validateAngle(value);\n                if (!valid2) {\n                    errorMessage = error2;\n                }\n                break;\n        }\n\n        // エラー情報の更新\n        setErrors((state) => ({\n            ...state,\n            [name]: errorMessage,\n        }));\n\n        // 値を更新\n        setValues((state) => ({\n            ...state,\n            [name]: value,\n        }));\n    }, []);\n\n    const handleChangeIsGlobal = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const { checked } = event.target;\n        setValues((state) => ({\n            ...state,\n            isGlobal: checked,\n        }));\n    }, []);\n\n    useEffect(() => {\n        setValues(toFormValues(trapezoid));\n        setErrors({});\n    }, [trapezoid]);\n\n    return (\n        <Paper>\n            <Stack\n                direction=\"column\"\n                spacing={1}\n                sx={{ p: 1, width: 240 }}\n                component=\"form\"\n                autoComplete=\"off\"\n                noValidate\n                onSubmit={handleSubmit}\n            >\n                {/* forceI */}\n                <TextField\n                    variant=\"outlined\"\n                    margin=\"dense\"\n                    size=\"small\"\n                    label=\"I端側の荷重\"\n                    name=\"forceI\"\n                    value={values['forceI'] ?? ''}\n                    required\n                    fullWidth\n                    onChange={handleChange}\n                    InputProps={{\n                        endAdornment: <InputAdornment position=\"end\">kN/m</InputAdornment>,\n                    }}\n                    error={Boolean(errors['forceI'])}\n                    helperText={errors['forceI'] ?? ''}\n                />\n                {/* forceJ */}\n                <TextField\n                    variant=\"outlined\"\n                    margin=\"dense\"\n                    size=\"small\"\n                    label=\"J端側の荷重\"\n                    name=\"forceJ\"\n                    value={values['forceJ'] ?? ''}\n                    required\n                    fullWidth\n                    onChange={handleChange}\n                    InputProps={{\n                        endAdornment: <InputAdornment position=\"end\">kN/m</InputAdornment>,\n                    }}\n                    error={Boolean(errors['forceJ'])}\n                    helperText={errors['forceJ'] ?? ''}\n                />\n                {/* angle */}\n                <TextField\n                    variant=\"outlined\"\n                    margin=\"dense\"\n                    size=\"small\"\n                    label=\"角度\"\n                    name=\"angle\"\n                    value={values['angle'] ?? ''}\n                    fullWidth\n                    onChange={handleChange}\n                    InputProps={{\n                        endAdornment: <InputAdornment position=\"end\">°</InputAdornment>,\n                    }}\n                    error={Boolean(errors['angle'])}\n                    helperText={errors['angle'] ?? ''}\n                />\n                {/* isGlobal */}\n                <FormControlLabel\n                    label=\"全体座標系\"\n                    control={\n                        <Checkbox\n                            name=\"isGlobal\"\n                            size=\"small\"\n                            checked={values.isGlobal ?? false}\n                            onChange={handleChangeIsGlobal}\n                        />\n                    }\n                />\n                <Stack direction=\"row\" justifyContent=\"flex-end\" spacing={1}>\n                    <Button size=\"small\" onClick={onClose}>\n                        キャンセル\n                    </Button>\n                    <Button type=\"submit\" size=\"small\" variant=\"contained\">\n                        OK\n                    </Button>\n                </Stack>\n            </Stack>\n        </Paper>\n    );\n};\n\nconst ConnectedTrapezoidEditor: React.VFC<Props> = ({ values, ...props }) => {\n    const trapezoid = useMemo(() => {\n        if (isTrapezoid(values)) {\n            return values;\n        }\n        // 空データを返す\n        return {\n            id: '',\n            name: '',\n            beam: '',\n            forceI: 0,\n            distanceI: 0,\n            forceJ: 0,\n            distanceJ: 0,\n        };\n    }, [values]);\n\n    return <TrapezoidEditor {...props} trapezoid={trapezoid} />;\n};\n\nexport default ConnectedTrapezoidEditor;\n","import { Box } from '@mui/material';\nimport { useContext } from 'react';\nimport { PopupContext } from '../provider/PopupProvider';\nimport ForceEditor from './ForceEditor';\nimport MomentEditor from './MomentEditor';\nimport PinSelector from './PinSelector';\nimport TrapezoidEditor from './TrapezoidEditor';\n\nconst Popup: React.VFC = () => {\n    const { popupType, popupPosition, popupParams, close, callback } = useContext(PopupContext);\n\n    if (typeof popupType === 'undefined') {\n        return null;\n    }\n\n    return (\n        <Box\n            sx={{\n                position: 'fixed',\n                zIndex: 5000,\n                ...popupPosition,\n            }}\n        >\n            {popupType === 'forces' && (\n                <ForceEditor values={popupParams ?? {}} onClose={close} onChange={callback} />\n            )}\n            {popupType === 'trapezoids' && (\n                <TrapezoidEditor values={popupParams ?? {}} onClose={close} onChange={callback} />\n            )}\n            {popupType === 'nodes' && (\n                <PinSelector values={popupParams ?? {}} onClose={close} onChange={callback} />\n            )}\n            {popupType === 'moments' && (\n                <MomentEditor values={popupParams ?? {}} onClose={close} onChange={callback} />\n            )}\n        </Box>\n    );\n};\n\nexport default Popup;\n","import { Box } from '@mui/material';\nimport { forwardRef, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport { CanvasTool, DOMSize } from '../../types/common';\nimport { defaultCanvasProps, StructureCanvasProps } from '../../types/note';\nimport CanvasCore from './core';\nimport Popup from './popup';\nimport PopupProvider from './provider/PopupProvider';\nimport { CanvasCoreHandler } from './types';\n\ninterface Props extends StructureCanvasProps {\n    readonly?: boolean;\n    tool?: CanvasTool;\n}\n\nexport type CanvasHandler = CanvasCoreHandler;\n\nconst Canvas: React.ForwardRefRenderFunction<CanvasHandler, Props> = (\n    { tool = 'select', readonly = false, children, ...props },\n    ref\n) => {\n    // キャンバス表示領域\n    const [size, setSize] = useState<DOMSize>({ width: 0, height: 0 });\n    // キャンバスの親要素\n    const containerRef = useRef<HTMLDivElement>(null);\n    // キャンバス本体\n    const canvasRef = useRef<CanvasCoreHandler>(null);\n\n    useImperativeHandle(\n        ref,\n        () => ({\n            getStructure: () => {\n                if (canvasRef.current) {\n                    return canvasRef.current.getStructure();\n                }\n                return defaultCanvasProps;\n            },\n        }),\n        []\n    );\n\n    // 要素のリサイズを監視\n    useEffect(() => {\n        const observer = new ResizeObserver((entries) => {\n            const { width, height } = entries[0].contentRect;\n            setSize({\n                width,\n                height,\n            });\n        });\n\n        if (containerRef.current) {\n            observer.observe(containerRef.current);\n        }\n\n        return () => {\n            observer.disconnect();\n        };\n    }, []);\n\n    return (\n        <Box\n            ref={containerRef}\n            sx={{\n                width: 'auto',\n                height: '100%',\n                backgroundColor: '#ffffff',\n                overscrollBehavior: 'contain',\n            }}\n        >\n            <PopupProvider>\n                <CanvasCore\n                    ref={canvasRef}\n                    tool={tool}\n                    readonly={readonly}\n                    canvasSize={size}\n                    {...props}\n                />\n                <Popup />\n            </PopupProvider>\n        </Box>\n    );\n};\n\nexport default forwardRef(Canvas);\n","// --- app 共通 ---\nexport interface DOMSize {\n    width: number;\n    height: number;\n}\nexport interface DOMPosition {\n    top: number;\n    left: number;\n}\n\nexport interface ShapePosition {\n    x: number;\n    y: number;\n}\n\nexport type SizePosition = DOMSize & ShapePosition;\n\nexport const EventTypes = ['touch', 'mouse'] as const;\nexport type EventType = typeof EventTypes[number];\n\nexport const AppModes = ['note', 'canvas'] as const;\nexport type AppMode = typeof AppModes[number];\n\n// --- canvas関係 ---\n\nexport const CanvasTools = ['select', 'pen', 'force', 'moment', 'trapezoid', 'delete'] as const;\nexport type CanvasTool = typeof CanvasTools[number];\nexport const isCanvasTool = (item: unknown): item is CanvasTool => {\n    if (typeof item === 'string') {\n        return CanvasTools.some((tool) => tool === item);\n    }\n    return false;\n};\n\nexport const isNumberArray = (item: unknown): item is number[] => {\n    if (Array.isArray(item)) {\n        if (item.length === 0) {\n            return true;\n        }\n\n        return item.every((value) => typeof value === 'number');\n    }\n    return false;\n};\n\nexport const isLinePoints = (item: unknown): item is [number, number, number, number] => {\n    if (isNumberArray(item)) {\n        return item.length === 4;\n    }\n    return false;\n};\n\n// fabric の座標\nexport type Point = {\n    x: number;\n    y: number;\n};\n\nexport interface ShapeCoordinates {\n    tl: Point;\n    tr: Point;\n    bl: Point;\n    br: Point;\n}\n\nexport const isPoint = (item: unknown): item is Point => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return typeof value.x === 'number' && typeof value.y === 'number';\n    }\n    return false;\n};\n\nexport const isShapeCoordinates = (item: unknown): item is ShapeCoordinates => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return isPoint(value.tl) && isPoint(value.tr) && isPoint(value.bl) && isPoint(value.br);\n    }\n    return false;\n};\n","import { fabric } from 'fabric';\nimport { isShapeCoordinates, ShapeCoordinates } from '../../../types/common';\nimport { StructureCanvasProps } from '../../../types/note';\nimport PageManager from '../manager';\n\nconst defaultLayerOptions: fabric.IRectOptions = {\n    lockRotation: true,\n    fill: '#fff',\n    stroke: '#000',\n    strokeWidth: 1,\n    hasRotatingPoint: false,\n    erasable: false,\n};\nconst defaultImageOptions: fabric.IObjectOptions = {\n    // イベントに反応させない\n    selectable: false,\n    evented: false,\n    // 消しゴムで消せない\n    erasable: false,\n};\n\nclass StructureRect {\n    private manager: PageManager;\n    private data: StructureCanvasProps;\n    private layer: fabric.Rect;\n    private image?: fabric.Object;\n\n    private dragging = false;\n\n    constructor(manager: PageManager, props: StructureCanvasProps) {\n        this.manager = manager;\n        this.data = props;\n\n        // レイヤーの作成\n        this.layer = this.createLayer();\n        this.manager.canvas.add(this.layer);\n\n        // イメージの読み込み\n        this.loadImage();\n\n        // イベントの割当\n        this.attachEvents();\n    }\n\n    // --- public properties ---\n\n    /**\n     * 座標を返す\n     */\n    public get coordinates(): ShapeCoordinates {\n        return this.layer.calcCoords();\n    }\n\n    // --- public methods ---\n\n    public update(): void;\n    public update(data: StructureCanvasProps): void;\n\n    /**\n     * 更新処理\n     * @param data\n     */\n    public update(data?: StructureCanvasProps): void {\n        if (data) {\n            this.data = data;\n        }\n\n        // キャンバスから除去\n        this.remove();\n\n        // レイヤーの作成\n        this.layer = this.createLayer();\n        this.manager.canvas.add(this.layer);\n\n        // イメージの読み込み\n        this.loadImage();\n\n        // イベントの割当\n        this.attachEvents();\n    }\n\n    /**\n     * 削除処理\n     */\n    public remove(): void {\n        this.layer.off(); // イベント割当を全削除\n        this.manager.canvas.remove(this.layer);\n        if (this.image) {\n            this.manager.canvas.remove(this.image);\n        }\n    }\n\n    public getCanvasProps(): StructureCanvasProps {\n        return this.data;\n    }\n\n    /**\n     * リサイズのコントロールを非表示にする\n     */\n    public hideControls(): void {\n        this.layer.hasControls = false;\n        // 強制的に再描画\n        this.manager.canvas.renderAll();\n    }\n\n    public select(): void {\n        this.manager.canvas.setActiveObject(this.layer);\n        this.manager.selectedCanvasId = this.data.id;\n    }\n\n    // --- private methods ---\n\n    private createLayer(): fabric.Rect {\n        const rect = new fabric.Rect({\n            top: this.data.y,\n            left: this.data.x,\n            height: this.data.height,\n            width: this.data.width,\n            ...defaultLayerOptions,\n            name: this.data.id,\n            data: {\n                type: 'layer',\n            },\n        });\n        rect.setControlsVisibility({\n            bl: true,\n            br: true,\n            mb: true,\n            ml: true,\n            mr: true,\n            mt: true,\n            tl: true,\n            tr: true,\n            mtr: false,\n        });\n\n        return rect;\n    }\n\n    private loadImage(): void {\n        if (this.image) {\n            this.manager.canvas.remove(this.image);\n            this.image = undefined;\n        }\n\n        if (this.data.image) {\n            fabric.loadSVGFromString(this.data.image, (objects, options) => {\n                this.image = fabric.util.groupSVGElements(objects, options);\n                let scale = 1;\n                if (typeof options.width === 'number') {\n                    scale = this.data.width / options.width;\n                }\n\n                // プロパティ設定\n                this.image.setOptions({\n                    ...defaultImageOptions,\n                    top: this.layer.top,\n                    left: this.layer.left,\n                    scaleX: scale,\n                    scaleY: scale,\n                });\n\n                // キャンバスに追加\n                this.manager.canvas.add(this.image);\n                // 節点が一つでも存在すればレイヤーを透明にする\n                this.layer.opacity = this.data.data.nodes.length > 0 ? 0 : 1;\n                // レイヤーを最前面に持ってくる\n                this.layer.bringToFront();\n            });\n        }\n    }\n\n    // --- events ---\n\n    /**\n     * イベントの割当\n     */\n    private attachEvents() {\n        this.layer.on('selected', this.onSelected.bind(this));\n        this.layer.on('deselected', this.onDeselected.bind(this));\n        // 伸縮\n        this.layer.on('scaling', this.onScaling.bind(this));\n        this.layer.on('scaled', this.onScaled.bind(this));\n        // 移動\n        this.layer.on('moving', this.onMoving.bind(this));\n        this.layer.on('moved', this.onMoved.bind(this));\n    }\n\n    /**\n     * 選択されたらナビゲーションを表示する\n     * @param event\n     */\n    private onSelected(event: fabric.IEvent<Event>): void {\n        this.manager.updateCanvasState(this.data.id);\n    }\n\n    /**\n     * 選択が解除されたらナビゲーションを閉じる\n     * @param event\n     */\n    private onDeselected(event: fabric.IEvent<Event>): void {\n        // NOTE: ナビゲーションを閉じる処理は PageManager で実施\n    }\n\n    private onScaling(event: fabric.IEvent<Event>): void {\n        if (!this.dragging) {\n            // レイヤーを半透明にする (画像がなければそのまま)\n            this.layer.opacity = this.image ? 0.1 : 1;\n\n            this.dragging = true;\n        }\n    }\n\n    private onScaled(event: fabric.IEvent<Event>): void {\n        if (this.dragging) {\n            const scaleX = this.layer.scaleX ?? 1;\n            const scaleY = this.layer.scaleY ?? 1;\n            const width = this.data.width * scaleX;\n            const height = this.data.height * scaleY;\n\n            // scale をリセット\n            this.layer.scaleX = 1;\n            this.layer.scaleY = 1;\n            this.layer.width = width;\n            this.layer.height = height;\n\n            // 構造データを更新\n            this.data.width = width;\n            this.data.height = height;\n\n            // TODO: 画像を再生成する?\n\n            // 透明度を戻す\n            this.layer.opacity = this.image ? 0 : 1;\n\n            // ドラッグ終了\n            this.dragging = false;\n            // ナビゲーションの更新\n            this.onSelected(event);\n        }\n    }\n\n    private onMoving(event: fabric.IEvent<Event>): void {\n        if (!this.dragging) {\n            // ナビゲーションを閉じる\n            this.manager.clearCanvasState();\n\n            this.dragging = true;\n        }\n\n        // レイヤーの位置に画像を移動する\n        if (this.image) {\n            this.image.top = this.layer.top;\n            this.image.left = this.layer.left;\n        }\n    }\n\n    private onMoved(event: fabric.IEvent<Event>): void {\n        if (this.dragging) {\n            // ノート上での絶対座標を取得\n            const coords = this.layer.calcCoords(true);\n            if (isShapeCoordinates(coords)) {\n                this.data.x = coords.tl.x;\n                this.data.y = coords.tl.y;\n            }\n\n            // ナビゲーションを再表示\n            this.onSelected(event);\n\n            // ドラッグ終了\n            this.dragging = false;\n        }\n    }\n}\n\nexport default StructureRect;\n","import { fabric } from 'fabric';\nimport { v4 as uuid } from 'uuid';\nimport { EventType, Point, ShapePosition } from '../../types/common';\nimport {\n    defaultCanvasProps,\n    defaultDrawSettings,\n    DrawSettings,\n    NoteMode,\n    PageProps,\n    PageSize,\n    StructureCanvasProps,\n    StructureCanvasState,\n} from '../../types/note';\nimport { equalPoints } from '../../utils/coordinates';\nimport { debug } from '../../utils/logger';\nimport { clone, getPointerPosition } from '../Canvas/util';\nimport StructureRect from './shape/StructureRect';\n\ninterface Parameters extends PageProps {\n    setCanvasState: (props: StructureCanvasState) => void;\n    clearCanvasState: (closingCanvas?: boolean) => void;\n}\n\n/**\n * 背景のグリッド線の設定\n */\nconst defaultGridLineProps: fabric.ILineOptions = {\n    stroke: '#eee',\n    strokeWidth: 1,\n    // イベントに反応させない\n    evented: false,\n    hasControls: false,\n    selectable: false,\n    // 出力対象外\n    excludeFromExport: true,\n    // 消しゴムで消えないようにする\n    erasable: false,\n    data: {\n        type: 'background',\n        excludeExport: true,\n    },\n};\n\nclass PageManager {\n    public canvas: fabric.Canvas;\n    private _mode: NoteMode = 'edit';\n    private _readonly = false;\n\n    /**\n     * ページサイズ\n     */\n    private pageWidth = 0;\n    /**\n     * ページサイズ\n     */\n    private pageHeight = 0;\n\n    /**\n     * 背景グリッド線の感覚\n     */\n    private gridSize = 25;\n\n    /**\n     * 描画設定\n     */\n    private _settings: DrawSettings = defaultDrawSettings;\n\n    /**\n     * イベント種類 (mouse or touch)\n     */\n    private eventType: EventType | undefined;\n\n    /**\n     * 選択要素の有無（要素選択中はパン不可）\n     */\n    private hasSelected = false;\n\n    /**\n     * ピンチ中フラグ\n     */\n    private pinching = false;\n\n    /**\n     * パン中フラグ\n     */\n    private panning = false;\n\n    /**\n     * ドラッグ時のポインタ位置\n     */\n    private lastPos: ShapePosition | undefined;\n\n    /**\n     * 再描画タイマー\n     */\n    private forceRenderTimer: NodeJS.Timeout | undefined;\n\n    /**\n     * ズーム開始時のscale\n     */\n    private zoomStartScale = 1;\n\n    /**\n     * 構造データ\n     */\n    private structures: Record<string, StructureRect> = {};\n    /**\n     * 選択中の構造データキャンバス\n     */\n    public selectedCanvasId: string | undefined;\n\n    /**\n     * 構造データの情報を返す\n     */\n    private setCanvasState: (props: StructureCanvasState) => void;\n    /**\n     * 構造データの情報をクリアする\n     */\n    public clearCanvasState: (closingCanvas?: boolean) => void;\n\n    constructor(\n        canvasDom: HTMLCanvasElement,\n        { size, zoom, viewport, drawData, structures, setCanvasState, clearCanvasState }: Parameters\n    ) {\n        debug('::: initialize PageManager :::');\n\n        this.canvas = new fabric.Canvas(canvasDom, {\n            selection: true,\n            isDrawingMode: false,\n            fireRightClick: true, // 右クリックを有効にする\n            stopContextMenu: true, // 右クリックメニューを表示しない\n        });\n\n        this.canvas.setZoom(zoom);\n        this.canvas.setViewportTransform(viewport);\n\n        this.readonly = false;\n        this.mode = 'select';\n        const pageSize = PageSize[size];\n        this.pageHeight = pageSize.height;\n        this.pageWidth = pageSize.width;\n        this.gridSize = 25; // ひとまず固定で指定\n        this.setCanvasState = setCanvasState;\n        this.clearCanvasState = clearCanvasState;\n\n        // 背景のグリッド線を描画する\n        this.drawBackgroundGrid();\n\n        if (drawData) {\n            // 描画データが渡された場合は表示処理を行う\n            this.canvas.loadFromJSON(drawData, this.canvas.renderAll.bind(this.canvas));\n        }\n\n        // 構造データの配置\n        structures.forEach((structure) => {\n            const rect = new StructureRect(this, structure);\n            this.structures[structure.id] = rect;\n        });\n\n        // イベント割当\n        this.attachEvents();\n    }\n\n    // --- public properties ---\n\n    public get mode(): NoteMode {\n        return this._mode;\n    }\n\n    public set mode(value: NoteMode) {\n        this._mode = value;\n        // モード変更時の処理\n        this.canvas.selection = this._mode === 'select';\n    }\n\n    public get readonly(): boolean {\n        return this._readonly;\n    }\n\n    public set readonly(value: boolean) {\n        this._readonly = value;\n        this.canvas.selection = value ? false : this._mode === 'select';\n        // TODO: 読み取り専用時は完全に操作できないようにしたい\n    }\n\n    public get drawSettings(): DrawSettings {\n        return this._settings;\n    }\n\n    public set drawSettings(value: DrawSettings) {\n        // ブラシの設定を更新する\n        let brush = this.canvas.freeDrawingBrush;\n        if (!Boolean(brush) || this._settings.eraser !== value.eraser) {\n            // ブラシ未定義 あるいは 鉛筆と消しゴムを切り替えた場合は生成\n            if (value.eraser) {\n                // 消しゴム\n                brush = new fabric.EraserBrush(this.canvas);\n            } else {\n                // 鉛筆\n                brush = new fabric.PencilBrush(this.canvas);\n            }\n            this.canvas.freeDrawingBrush = brush;\n        }\n\n        const { stroke: color, strokeWidth: width } = value;\n        brush.color = color;\n        brush.width = width;\n\n        this._settings = { ...value };\n    }\n\n    /**\n     * 現在選択されている構造データを取得する\n     */\n    public get activeStructure(): StructureCanvasProps {\n        if (this.selectedCanvasId) {\n            return this.structures[this.selectedCanvasId].getCanvasProps();\n        }\n        return defaultCanvasProps;\n    }\n\n    /**\n     * 構造データを更新する\n     */\n    public set activeStructure(props: StructureCanvasProps) {\n        const structure = this.structures[props.id];\n        if (structure) {\n            // zoom の値を補正する\n            const pageZoom = this.canvas.getZoom();\n            const state = clone(props);\n            state.zoom = state.zoom / pageZoom;\n            // 更新・再描画\n            structure.update(state);\n            // Page.tsx の CanvasState を更新する\n            this.updateCanvasState();\n        }\n    }\n\n    /**\n     * 現在選択されているキャンバスを取得する\n     */\n    public get activeCanvas(): StructureRect | undefined {\n        if (this.selectedCanvasId) {\n            return this.structures[this.selectedCanvasId];\n        }\n    }\n\n    // --- public methods ---\n\n    public save(): void {\n        // TODO: 描画内容を保存する\n    }\n\n    public load(): void {\n        // TODO: 描画内容を読み込む\n    }\n\n    public clear(): void {\n        // TODO: ノートの全クリア\n    }\n\n    public undo(): void {\n        // TODO: 実装\n    }\n\n    public redo(): void {\n        // TODO: 実装\n    }\n\n    /**\n     * 構造データキャンバスのメニューを表示する\n     * @param canvasProps\n     * @param coordinates\n     */\n    public updateCanvasState(canvasId?: string): void {\n        if (canvasId) {\n            // ID を保持\n            this.selectedCanvasId = canvasId;\n        }\n\n        if (this.selectedCanvasId) {\n            const canvasProps = this.structures[this.selectedCanvasId].getCanvasProps();\n            const coordinates = this.structures[this.selectedCanvasId].coordinates;\n\n            // ズーム\n            const pageZoom = this.canvas.getZoom();\n\n            const params: StructureCanvasState = {\n                ...canvasProps,\n                coordinates,\n                pageZoom,\n            };\n\n            this.setCanvasState(params);\n        }\n    }\n\n    /**\n     * キャンバスのリサイズ\n     * @param view\n     */\n    public resize(view: DOMRect): void {\n        const { width, height } = view;\n        const zoom = this.canvas.getZoom();\n        this.canvas.setWidth(width * zoom);\n        this.canvas.setHeight(height * zoom);\n    }\n\n    /**\n     * 構造データの追加/コピー\n     * @param props\n     */\n    public addCanvas(props?: StructureCanvasProps): void {\n        const canvasProps = clone(props ?? defaultCanvasProps);\n        canvasProps.id = uuid();\n\n        // 位置が重ならないように調整\n        const items = Object.values(this.structures);\n        const pos: Point = {\n            x: canvasProps.x,\n            y: canvasProps.y,\n        };\n        while (items.some((rect) => equalPoints(pos, rect.coordinates.tl))) {\n            // 左上の座標が一致する要素が存在する場合、すこし位置をずらす\n            pos.x += 20;\n            pos.y += 20;\n        }\n\n        canvasProps.x = pos.x;\n        canvasProps.y = pos.y;\n\n        const rect = new StructureRect(this, canvasProps);\n        this.structures[canvasProps.id] = rect;\n\n        rect.select();\n    }\n\n    /**\n     * 構造データの削除\n     * @param props\n     */\n    public removeCanvas(props: string | StructureCanvasProps): void {\n        let canvasId: string;\n        if (typeof props === 'string') {\n            canvasId = props;\n        } else {\n            canvasId = props.id;\n        }\n\n        const structure = this.structures[canvasId];\n        if (structure) {\n            structure.remove();\n            delete this.structures[canvasId];\n            this.selectedCanvasId = undefined;\n        }\n    }\n\n    // --- private methods ---\n\n    /**\n     * 背景の描画\n     */\n    private drawBackgroundGrid() {\n        const lines: fabric.Line[] = [];\n\n        for (let y = 0; y <= this.pageHeight; y += this.gridSize) {\n            const hl = new fabric.Line([0, y, this.pageWidth, y], { ...defaultGridLineProps });\n            lines.push(hl);\n        }\n\n        // 最下部\n        const h = new fabric.Line([0, this.pageHeight, this.pageWidth, this.pageHeight], {\n            ...defaultGridLineProps,\n        });\n        lines.push(h);\n\n        for (let x = 0; x <= this.pageWidth; x += this.gridSize) {\n            const vl = new fabric.Line([x, 0, x, this.pageHeight], { ...defaultGridLineProps });\n            lines.push(vl);\n        }\n\n        // 右端\n        const v = new fabric.Line([this.pageWidth, 0, this.pageWidth, this.pageHeight], {\n            ...defaultGridLineProps,\n        });\n        lines.push(v);\n\n        this.canvas.add(...lines);\n    }\n\n    /**\n     * viewport の補正\n     */\n    private fitViewport(diffX?: number, diffY?: number): void {\n        const vpt = this.canvas.viewportTransform;\n        const zoom = this.canvas.getZoom();\n        const canvasWidth = this.canvas.getWidth();\n        const canvasHeight = this.canvas.getHeight();\n        if (vpt) {\n            let px = vpt[4];\n            let py = vpt[5];\n\n            // ページ幅がキャンバス幅に収まる\n            if (canvasWidth >= this.pageWidth * zoom) {\n                px = canvasWidth / 2 - (this.pageWidth * zoom) / 2;\n            } else {\n                if (typeof diffX === 'number') {\n                    px += diffX;\n                }\n\n                if (px >= 0) {\n                    px = 0;\n                } else if (px < canvasWidth - this.pageWidth * zoom) {\n                    px = canvasWidth - this.pageWidth * zoom;\n                }\n            }\n            // ページ高がキャンバス高に収まる\n            if (canvasHeight >= this.pageHeight * zoom) {\n                py = canvasHeight / 2 - (this.pageHeight * zoom) / 2;\n            } else {\n                if (typeof diffY === 'number') {\n                    py += diffY;\n                }\n\n                if (py >= 0) {\n                    py = 0;\n                } else if (py < canvasHeight - this.pageHeight * zoom) {\n                    py = canvasHeight - this.pageHeight * zoom;\n                }\n            }\n\n            vpt[4] = px;\n            vpt[5] = py;\n\n            this.canvas.requestRenderAll();\n        }\n    }\n\n    // --- events ---\n\n    private attachEvents(): void {\n        // イベント割当\n        this.canvas.on('mouse:down', this.onMouseDown.bind(this));\n        this.canvas.on('mouse:down:before', this.onMouseDownBefore.bind(this));\n        this.canvas.on('mouse:move', this.onMouseMove.bind(this));\n        this.canvas.on('mouse:up', this.onMouseUp.bind(this));\n        this.canvas.on('selection:created', this.onSelect.bind(this));\n        this.canvas.on('selection:updated', this.onSelect.bind(this));\n        this.canvas.on('selection:cleared', this.onDeselect.bind(this));\n        this.canvas.on('object:added', this.onCreateObject.bind(this));\n        this.canvas.on('touch:gesture', this.onTouchGesture.bind(this));\n        this.canvas.on('mouse:wheel', this.onMouseWheel.bind(this));\n        this.canvas.on('touch:drag', this.onTouchDrag.bind(this));\n    }\n\n    private onSelect(): void {\n        this.hasSelected = true;\n    }\n\n    private onDeselect(): void {\n        this.hasSelected = false;\n\n        // キャンバスが選択されている場合\n        if (this.selectedCanvasId) {\n            // キャンバスのヘッダーメニューを閉じる\n            this.clearCanvasState(false); // onCloseCanvas は呼ばない\n            this.selectedCanvasId = undefined;\n        }\n    }\n\n    /**\n     * mouse down 前にタッチ本数などを元にフラグをセット\n     * @param event\n     */\n    private onMouseDownBefore(event: fabric.IEvent<Event>): void {\n        debug('mouse:down:before', event);\n\n        if (event.e.type.indexOf('touch') === 0) {\n            this.eventType = 'touch';\n\n            const { touches } = event.e as TouchEvent;\n            debug('- fingers=', touches.length);\n\n            if (touches.length === 1) {\n                if (this.mode === 'edit') {\n                    this.canvas.isDrawingMode = true;\n                }\n                if (this.mode === 'select' && !this.hasSelected && !Boolean(event.target)) {\n                    this.panning = true;\n                }\n            } else {\n                this.canvas.isDrawingMode = false;\n\n                if (this.forceRenderTimer) {\n                    clearTimeout(this.forceRenderTimer);\n                }\n                // 100ms 後に再描画する\n                this.forceRenderTimer = setTimeout(() => {\n                    console.log('here!');\n                    this.canvas.renderAll();\n                    this.forceRenderTimer = undefined;\n                }, 100);\n            }\n\n            if (touches.length === 2) {\n                // ピンチ\n                this.pinching = true;\n            }\n            if (touches.length > 2) {\n                // 3本指以上でタッチ -> パン\n                this.panning = true;\n            }\n        } else if (event.e.type.indexOf('mouse') === 0) {\n            this.eventType = 'mouse';\n\n            const { button } = event.e as MouseEvent;\n            if (button === 0) {\n                // 左クリック時\n                if (this.mode === 'edit') {\n                    this.canvas.isDrawingMode = true;\n                }\n                if (this.mode === 'select' && !this.hasSelected && !Boolean(event.target)) {\n                    this.panning = true;\n                }\n            }\n            if (button === 2) {\n                // 右クリック時\n                this.panning = true;\n            }\n        }\n\n        if (this.panning) {\n            // パンの際は範囲選択の矩形を表示しない\n            this.canvas.selection = false;\n            // CanvasNavigation を非表示にする\n            this.clearCanvasState();\n        }\n    }\n\n    private onMouseDown(event: fabric.IEvent<Event>): void {\n        // ポインタ位置を保持する\n        this.lastPos = getPointerPosition(event);\n    }\n\n    /**\n     * ピンチイン・ピンチアウト\n     * @param event\n     */\n    private onTouchGesture(event: fabric.IGestureEvent<Event>): void {\n        if (this.pinching && event.e.type.indexOf('touch') === 0) {\n            const { touches } = event.e as TouchEvent;\n            if (touches && touches.length === 2 && event.self) {\n                if (event.self.state === 'start') {\n                    // イベント開始時の scale を保持\n                    this.zoomStartScale = this.canvas.getZoom();\n                }\n                let zoom = this.zoomStartScale * event.self.scale;\n                if (zoom > 20) {\n                    zoom = 20;\n                }\n                if (zoom < 0.1) {\n                    zoom = 0.1;\n                }\n\n                const point = new fabric.Point(event.self.x, event.self.y);\n                this.canvas.zoomToPoint(point, zoom);\n\n                this.fitViewport();\n            }\n        }\n    }\n\n    /**\n     * マウスホイールによるズームイン・ズームアウト\n     * @param event\n     */\n    private onMouseWheel(event: fabric.IEvent<Event>): void {\n        if (!this.readonly && event.e.type.indexOf('wheel') === 0 && event.pointer) {\n            const evt = event.e as WheelEvent;\n            const { deltaY } = evt;\n            let zoom = this.canvas.getZoom();\n            zoom *= 0.999 ** deltaY;\n\n            if (zoom > 20) {\n                zoom = 20;\n            }\n            if (zoom < 0.1) {\n                zoom = 0.1;\n            }\n\n            const point = event.pointer;\n            this.canvas.zoomToPoint(point, zoom);\n\n            evt.preventDefault();\n            evt.stopPropagation();\n\n            this.fitViewport();\n\n            // ナビゲーションの更新\n            this.updateCanvasState();\n        }\n    }\n\n    private onTouchDrag(event: fabric.IEvent<Event>): void {\n        if (this.eventType === 'touch' && this.panning) {\n            const point = getPointerPosition(event);\n            if (point && this.lastPos) {\n                const { x, y } = point;\n                const diffX = x - this.lastPos.x;\n                const diffY = y - this.lastPos.y;\n                this.fitViewport(diffX, diffY);\n                this.lastPos = point;\n            }\n        }\n    }\n\n    private onMouseMove(event: fabric.IEvent<Event>): void {\n        if (this.eventType === 'mouse' && this.panning) {\n            const point = getPointerPosition(event);\n            if (point && this.lastPos) {\n                const { x, y } = point;\n                const diffX = x - this.lastPos.x;\n                const diffY = y - this.lastPos.y;\n                this.fitViewport(diffX, diffY);\n                this.lastPos = point;\n            }\n        }\n    }\n\n    private onMouseUp(event: fabric.IEvent<Event>): void {\n        debug('mouse:up', event);\n\n        if (this.panning || this.pinching) {\n            const vpt = this.canvas.viewportTransform;\n            if (vpt) {\n                this.canvas.setViewportTransform(vpt);\n            }\n\n            // CanvasNavigationを再表示\n            this.updateCanvasState();\n        }\n\n        // selectモード時は複数選択を可能にする\n        this.canvas.selection = this.mode === 'select';\n        // 描画フラグをoff\n        this.canvas.isDrawingMode = false;\n        // ドラッグ中のフラグなどをクリア\n        this.panning = false;\n        this.pinching = false;\n        this.lastPos = undefined;\n    }\n\n    /**\n     * 要素が追加されたとき\n     * @param event\n     */\n    private onCreateObject(event: fabric.IEvent<Event>): void {\n        debug('object:added', event);\n        // TODO: UNDO/REDO のための履歴管理\n    }\n\n    // --- dispose ---\n\n    /**\n     * 保持しているデータを破棄する\n     */\n    public dispose(): void {\n        debug('::: dispose PageManager :::');\n        this.canvas.clear();\n        this.canvas.dispose();\n    }\n}\n\nexport default PageManager;\n","import { Point } from '../types/common';\n\nexport const equalPoints = (a: Point, b: Point): boolean => {\n    return a.x === b.x && a.y === b.y;\n};\n","import CloseIcon from '@mui/icons-material/Close';\nimport EditIcon from '@mui/icons-material/Edit';\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport { Box, IconButton, Menu, MenuItem, styled } from '@mui/material';\nimport { MouseEvent, useCallback, useMemo, useState } from 'react';\nimport { AppMode } from '../../../types/common';\nimport { StructureCanvasState } from '../../../types/note';\n\ninterface Props extends StructureCanvasState {\n    mode: AppMode;\n    onEdit?: VoidFunction;\n    onCopy?: VoidFunction;\n    onDelete?: VoidFunction;\n    onCancel?: VoidFunction;\n}\n\nconst Background = styled('div')({\n    display: 'flex',\n    alignItems: 'center',\n    width: '100%',\n    padding: '0 8',\n});\nconst Spacer = styled('div')({\n    flex: 1,\n});\n\nconst CanvasNavigation: React.VFC<Props> = ({\n    mode,\n    coordinates,\n    width,\n    pageZoom,\n    onEdit,\n    onCopy,\n    onDelete,\n    onCancel,\n}) => {\n    const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\n\n    const handleClickMore = useCallback((event: MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget);\n    }, []);\n\n    const handleCloseMenu = useCallback(() => {\n        setAnchorEl(null);\n    }, []);\n\n    const handleCopy = useCallback(() => {\n        onCopy && onCopy();\n        // メニューを閉じる\n        setAnchorEl(null);\n    }, [onCopy]);\n\n    const handleDelete = useCallback(() => {\n        onDelete && onDelete();\n        // メニューを閉じる\n        setAnchorEl(null);\n    }, [onDelete]);\n\n    const [top, left] = useMemo(() => {\n        let top = coordinates.tl.y - 34; // 34 はナビゲーションの高さ\n        const left = coordinates.tl.x;\n\n        if (top < 0) {\n            // ナビゲーションがキャンバスをはみ出す場合は\n            // 下側にナビゲーションを出す\n            top = coordinates.bl.y;\n        }\n\n        return [top, left];\n    }, [coordinates.bl.y, coordinates.tl.x, coordinates.tl.y]);\n\n    return (\n        <Box\n            sx={{\n                position: 'absolute',\n                top,\n                left,\n                width: width * pageZoom,\n            }}\n        >\n            <Background>\n                {mode === 'canvas' && (\n                    <IconButton size=\"small\" onClick={onCancel}>\n                        <CloseIcon />\n                    </IconButton>\n                )}\n                {mode === 'note' && (\n                    <>\n                        <IconButton size=\"small\" onClick={onEdit}>\n                            <EditIcon />\n                        </IconButton>\n                        <Spacer />\n                        <IconButton size=\"small\" onClick={handleClickMore}>\n                            <MoreVertIcon />\n                        </IconButton>\n                    </>\n                )}\n            </Background>\n            <Menu anchorEl={anchorEl} open={Boolean(anchorEl)} onClose={handleCloseMenu}>\n                <MenuItem onClick={handleCopy}>コピー</MenuItem>\n                <MenuItem onClick={handleDelete}>削除</MenuItem>\n            </Menu>\n        </Box>\n    );\n};\n\nexport default CanvasNavigation;\n","import {\n    forwardRef,\n    useCallback,\n    useEffect,\n    useImperativeHandle,\n    useLayoutEffect,\n    useRef,\n    useState,\n} from 'react';\nimport { AppMode } from '../../types/common';\nimport {\n    CommitStructureFunction,\n    DrawSettings,\n    NoteMode,\n    PageProps,\n    StructureCanvasProps,\n    StructureCanvasState,\n} from '../../types/note';\nimport PageManager from './manager';\nimport CanvasNavigation from './nav/CanvasNavigation';\n\ninterface Props extends PageProps {\n    mode: AppMode;\n    tool: NoteMode;\n    viewSize: DOMRect;\n    drawSettings: DrawSettings;\n    onEditCanvas?: (props: StructureCanvasState, callback: CommitStructureFunction) => void;\n    onCloseCanvas?: VoidFunction;\n}\n\nexport interface PageHandler {\n    getActiveStructure: () => StructureCanvasProps | undefined;\n    setActiveStructure: (props: StructureCanvasProps) => void;\n    addStructureCanvas: (props?: StructureCanvasProps) => void;\n    removeStructureCanvas: (props: StructureCanvasProps) => void;\n}\n\nconst Page: React.ForwardRefRenderFunction<PageHandler, Props> = (\n    { mode, tool, viewSize, drawSettings, onEditCanvas, onCloseCanvas, ...props },\n    ref\n) => {\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    const managerRef = useRef<PageManager>();\n\n    const [canvasProps, setCanvasProps] = useState<StructureCanvasState>();\n\n    useImperativeHandle(ref, () => ({\n        getActiveStructure: () => {\n            if (managerRef.current) {\n                return managerRef.current.activeStructure;\n            }\n        },\n        setActiveStructure: (props: StructureCanvasProps) => {\n            if (managerRef.current) {\n                managerRef.current.activeStructure = props;\n            }\n        },\n        addStructureCanvas: (props?: StructureCanvasProps) => {\n            if (managerRef.current) {\n                managerRef.current.addCanvas(props);\n            }\n        },\n        removeStructureCanvas: (props: StructureCanvasProps) => {\n            if (managerRef.current) {\n                managerRef.current.removeCanvas(props.id);\n            }\n        },\n    }));\n\n    /**\n     * 選択された構造データに編集メニューを表示する\n     */\n    const setCanvasState = useCallback((params: StructureCanvasState) => {\n        setCanvasProps(params);\n    }, []);\n\n    /**\n     * 編集メニューを閉じる\n     */\n    const clearCanvasState = useCallback(\n        (closingCanvas = true) => {\n            setCanvasProps(undefined);\n            if (closingCanvas) {\n                onCloseCanvas && onCloseCanvas();\n            }\n        },\n        [onCloseCanvas]\n    );\n\n    /**\n     * キャンバスの編集を開始する\n     */\n    const handleEdit = useCallback(() => {\n        if (onEditCanvas && canvasProps) {\n            if (managerRef.current) {\n                // リサイズのコントロールを非表示にする\n                managerRef.current.activeCanvas?.hideControls();\n            }\n\n            onEditCanvas(canvasProps, (data) => {\n                if (managerRef.current) {\n                    managerRef.current.activeStructure = data;\n                }\n            });\n        }\n    }, [canvasProps, onEditCanvas]);\n\n    const handleCopy = useCallback(() => {\n        if (managerRef.current) {\n            const data = managerRef.current.activeCanvas;\n            if (data) {\n                managerRef.current.addCanvas(data.getCanvasProps());\n            }\n        }\n    }, []);\n\n    const handleDelete = useCallback(() => {\n        if (managerRef.current) {\n            const data = managerRef.current.activeCanvas;\n            if (data) {\n                managerRef.current.removeCanvas(data.getCanvasProps());\n            }\n            setCanvasProps(undefined);\n        }\n    }, []);\n\n    // 初期化\n    useLayoutEffect(() => {\n        if (canvasRef.current && viewSize.width !== 0 && viewSize.height !== 0) {\n            if (typeof managerRef.current === 'undefined') {\n                managerRef.current = new PageManager(canvasRef.current, {\n                    ...props,\n                    setCanvasState,\n                    clearCanvasState,\n                });\n            }\n        }\n    }, [clearCanvasState, props, setCanvasState, viewSize.height, viewSize.width]);\n\n    // AppMode が変更された場合\n    useEffect(() => {\n        if (managerRef.current) {\n            // キャンバスモード時は readonly とする\n            managerRef.current.readonly = mode === 'canvas';\n        }\n    }, [mode]);\n\n    // NoteMode (ツール) が変更された場合\n    useEffect(() => {\n        if (managerRef.current) {\n            managerRef.current.mode = tool;\n        }\n    }, [tool]);\n\n    // 描画ツールが変更された場合\n    useEffect(() => {\n        if (managerRef.current) {\n            managerRef.current.drawSettings = drawSettings;\n        }\n    }, [drawSettings]);\n\n    // DOM要素のリサイズが発生した場合\n    useEffect(() => {\n        if (managerRef.current) {\n            managerRef.current.resize(viewSize);\n        }\n    }, [viewSize]);\n\n    return (\n        <>\n            <canvas ref={canvasRef} width={viewSize.width} height={viewSize.height} />\n            {canvasProps && (\n                <CanvasNavigation\n                    mode={mode}\n                    {...canvasProps}\n                    onEdit={handleEdit}\n                    onCopy={handleCopy}\n                    onDelete={handleDelete}\n                    onCancel={clearCanvasState}\n                />\n            )}\n        </>\n    );\n};\n\nexport default forwardRef(Page);\n","import { Box } from '@mui/material';\nimport { forwardRef, useContext, useEffect, useRef, useState } from 'react';\nimport { AppSettingsContext } from '../../providers/AppSettingsProvider';\nimport { NoteSettingsContext } from '../../providers/NoteSettingsProvider';\nimport { defaultPageProps } from '../../types/note';\nimport Page, { PageHandler } from './Page';\n\nexport type NoteHandler = PageHandler;\n\nconst Note: React.ForwardRefRenderFunction<NoteHandler> = (_, ref) => {\n    // キャンバスの親要素\n    const containerRef = useRef<HTMLDivElement>(null);\n    // 表示領域\n    const [viewSize, setViewSize] = useState<DOMRect>();\n\n    const { mode, editCanvas, closeCanvas } = useContext(AppSettingsContext);\n    const { mode: tool, settings } = useContext(NoteSettingsContext);\n\n    // 要素のリサイズを監視\n    useEffect(() => {\n        const observer = new ResizeObserver((entries) => {\n            const rect = entries[0].target.getBoundingClientRect();\n            setViewSize(rect);\n        });\n\n        if (containerRef.current) {\n            observer.observe(containerRef.current);\n        }\n\n        return () => {\n            observer.disconnect();\n        };\n    }, []);\n\n    return (\n        <Box\n            ref={containerRef}\n            sx={{\n                width: 'auto',\n                height: '100%',\n                backgroundColor: '#ffffff',\n                overscrollBehavior: 'contain',\n                overflow: 'hidden',\n            }}\n        >\n            {viewSize && (\n                <Page\n                    ref={ref}\n                    mode={mode}\n                    tool={tool}\n                    viewSize={viewSize}\n                    drawSettings={settings}\n                    onEditCanvas={editCanvas}\n                    onCloseCanvas={closeCanvas}\n                    {...defaultPageProps}\n                />\n            )}\n        </Box>\n    );\n};\n\nexport default forwardRef(Note);\n","import { Box } from '@mui/material';\nimport { useContext } from 'react';\nimport { AppSettingsContext } from '../providers/AppSettingsProvider';\nimport { ConfigurationContext } from '../providers/ConfigurationProvider';\nimport Canvas from './Canvas';\nimport Note from './Note';\n\nconst MainContainer: React.VFC = () => {\n    const { mode, canvasProps, canvasRef, noteRef } = useContext(AppSettingsContext);\n    const { tool } = useContext(ConfigurationContext);\n\n    return (\n        <Box\n            sx={{\n                position: 'relative',\n                boxSizing: 'border-box',\n                ml: 1,\n                mb: 1,\n                flex: 1,\n                border: (theme) => `1px solid ${theme.palette.divider}`,\n                borderRadius: 1,\n                overflow: 'hidden',\n            }}\n        >\n            <Note ref={noteRef} />\n            {canvasProps && (\n                <Box\n                    sx={{\n                        position: 'absolute',\n                        top: canvasProps.coordinates.tl.y,\n                        left: canvasProps.coordinates.tl.x,\n                        width: canvasProps.width * canvasProps.pageZoom,\n                        height: canvasProps.height * canvasProps.pageZoom,\n                    }}\n                >\n                    <Canvas\n                        ref={canvasRef}\n                        tool={tool}\n                        readonly={mode === 'note'}\n                        {...canvasProps}\n                    />\n                </Box>\n            )}\n        </Box>\n    );\n};\n\nexport default MainContainer;\n","import { ArrowDownward, Delete, Edit, PanToolAlt, Refresh, Texture } from '@mui/icons-material';\nimport { Stack, ToggleButton, ToggleButtonGroup, Typography } from '@mui/material';\nimport { MouseEvent, ReactElement, useCallback, useContext } from 'react';\nimport { ConfigurationContext } from '../../providers/ConfigurationProvider';\nimport { CanvasTool, isCanvasTool } from '../../types/common';\n\ninterface Props {\n    tool: CanvasTool;\n    onChange: (tool: CanvasTool) => void;\n}\n\ninterface ButtonProps {\n    tool: CanvasTool;\n    icon: ReactElement;\n    label: string;\n}\n\nconst ToolboxButtons: Readonly<Record<CanvasTool, ButtonProps>> = {\n    select: {\n        tool: 'select',\n        icon: <PanToolAlt />,\n        label: '選択',\n    },\n    pen: {\n        tool: 'pen',\n        icon: <Edit />,\n        label: '梁要素の描画',\n    },\n    force: {\n        tool: 'force',\n        icon: <ArrowDownward />,\n        label: '集中荷重の追加',\n    },\n    moment: {\n        tool: 'moment',\n        icon: <Refresh />,\n        label: 'モーメント荷重',\n    },\n    trapezoid: {\n        tool: 'trapezoid',\n        icon: <Texture />,\n        label: '分布荷重の追加',\n    },\n    delete: {\n        tool: 'delete',\n        icon: <Delete />,\n        label: '要素の削除',\n    },\n};\n\nconst CanvasToolboxCore: React.VFC<Props> = ({ tool, onChange }) => {\n    /**\n     * ツールの変更\n     */\n    const handleChange = useCallback(\n        (_: MouseEvent<HTMLElement>, newValue: string | null) => {\n            if (newValue !== null && isCanvasTool(newValue)) {\n                onChange(newValue);\n            }\n        },\n        [onChange]\n    );\n\n    return (\n        <Stack sx={{ width: 160 }} alignItems=\"flex-start\">\n            <Typography variant=\"caption\">Toolbox</Typography>\n            <ToggleButtonGroup\n                orientation=\"vertical\"\n                value={tool}\n                exclusive\n                fullWidth\n                onChange={handleChange}\n            >\n                {Object.entries(ToolboxButtons).map(([key, { icon, label }]) => (\n                    <ToggleButton\n                        key={key}\n                        value={key}\n                        sx={{ justifyContent: 'flex-start', alignItems: 'center' }}\n                    >\n                        {icon}\n                        <Typography variant=\"caption\" sx={{ ml: 1 }}>\n                            {label}\n                        </Typography>\n                    </ToggleButton>\n                ))}\n            </ToggleButtonGroup>\n        </Stack>\n    );\n};\n\nconst CanvasToolbox: React.VFC = () => {\n    const { tool, setTool } = useContext(ConfigurationContext);\n    return <CanvasToolboxCore tool={tool} onChange={setTool} />;\n};\n\nexport default CanvasToolbox;\n","import { AddBox, AutoFixNormal, Edit, PanToolAlt } from '@mui/icons-material';\nimport {\n    Button,\n    Slider,\n    Stack,\n    TextField,\n    ToggleButton,\n    ToggleButtonGroup,\n    Typography,\n} from '@mui/material';\nimport {\n    ChangeEvent,\n    Dispatch,\n    MouseEvent,\n    ReactElement,\n    SetStateAction,\n    useCallback,\n    useContext,\n} from 'react';\nimport { AppSettingsContext } from '../../providers/AppSettingsProvider';\nimport { NoteSettingsContext } from '../../providers/NoteSettingsProvider';\nimport { DrawSettings, isNoteMode, NoteMode } from '../../types/note';\n\ninterface Props {\n    mode: NoteMode;\n    settings: DrawSettings;\n    onChangeMode: Dispatch<SetStateAction<NoteMode>>;\n    onChangeDrawSettings: Dispatch<SetStateAction<DrawSettings>>;\n    onClickAddCanvas: VoidFunction;\n}\n\nconst DrawModes = ['pen', 'eraser'] as const;\ntype DrawMode = typeof DrawModes[number];\nconst isDrawMode = (item: unknown): item is DrawMode => {\n    if (typeof item === 'string') {\n        return DrawModes.some((mode) => mode === item);\n    }\n    return false;\n};\n\ninterface ButtonProps {\n    mode: NoteMode | DrawMode;\n    icon: ReactElement;\n    label: string;\n}\n\nconst NoteModeButtons: Readonly<Record<NoteMode, ButtonProps>> = {\n    select: {\n        mode: 'select',\n        icon: <PanToolAlt />,\n        label: '選択',\n    },\n    edit: {\n        mode: 'edit',\n        icon: <Edit />,\n        label: '描画',\n    },\n};\n\nconst DrawModeButtons: Readonly<Record<DrawMode, ButtonProps>> = {\n    pen: {\n        mode: 'pen',\n        icon: <Edit />,\n        label: 'ペンツール',\n    },\n    eraser: {\n        mode: 'eraser',\n        icon: <AutoFixNormal />,\n        label: '消しゴム',\n    },\n};\n\nconst MinStrokeWidth = 1;\nconst MaxStrokeWidth = 20;\nconst StrokeWidthStep = 1;\n\nconst NoteToolboxCore: React.VFC<Props> = ({\n    mode,\n    settings,\n    onChangeMode,\n    onChangeDrawSettings,\n    onClickAddCanvas,\n}) => {\n    /**\n     * モードの変更\n     */\n    const handleChangeMode = useCallback(\n        (_: MouseEvent<HTMLElement>, newValue: string | null) => {\n            if (newValue !== null && isNoteMode(newValue)) {\n                onChangeMode(newValue);\n            }\n        },\n        [onChangeMode]\n    );\n\n    /**\n     * 描画ツールの選択\n     */\n    const handleChangeTool = useCallback(\n        (_: MouseEvent<HTMLElement>, newValue: string | null) => {\n            if (newValue !== null && isDrawMode(newValue)) {\n                onChangeDrawSettings((state) => ({\n                    ...state,\n                    eraser: newValue === 'eraser',\n                }));\n            }\n        },\n        [onChangeDrawSettings]\n    );\n\n    const handleChangeStrokeWidth = useCallback(\n        (_: Event, value: number | number[]) => {\n            if (typeof value === 'number') {\n                onChangeDrawSettings((state) => ({\n                    ...state,\n                    strokeWidth: value,\n                }));\n            }\n        },\n        [onChangeDrawSettings]\n    );\n\n    const handleChangeStroke = useCallback(\n        (event: ChangeEvent<HTMLInputElement>) => {\n            if (event.target.checkValidity()) {\n                const { value } = event.target;\n                onChangeDrawSettings((state) => ({\n                    ...state,\n                    stroke: value,\n                }));\n            }\n        },\n        [onChangeDrawSettings]\n    );\n\n    return (\n        <Stack sx={{ width: 160 }} alignItems=\"flex-start\">\n            <Typography variant=\"caption\">Toolbox</Typography>\n            {/* 選択 / 編集の切り替え */}\n            <ToggleButtonGroup\n                orientation=\"vertical\"\n                value={mode}\n                exclusive\n                fullWidth\n                onChange={handleChangeMode}\n            >\n                {Object.entries(NoteModeButtons).map(([key, { icon, label }]) => (\n                    <ToggleButton\n                        key={key}\n                        value={key}\n                        sx={{ justifyContent: 'flex-start', alignItems: 'center' }}\n                    >\n                        {icon}\n                        <Typography variant=\"caption\" sx={{ ml: 1 }}>\n                            {label}\n                        </Typography>\n                    </ToggleButton>\n                ))}\n            </ToggleButtonGroup>\n            <Typography variant=\"caption\" sx={{ mt: 1 }}>\n                描画ツール\n            </Typography>\n            {/* eraser */}\n            <ToggleButtonGroup\n                orientation=\"vertical\"\n                value={settings.eraser ? 'eraser' : 'pen'}\n                exclusive\n                fullWidth\n                disabled={mode !== 'edit'}\n                onChange={handleChangeTool}\n            >\n                {Object.entries(DrawModeButtons).map(([key, { icon, label }]) => (\n                    <ToggleButton\n                        key={key}\n                        value={key}\n                        sx={{ justifyContent: 'flex-start', alignItems: 'center' }}\n                    >\n                        {icon}\n                        <Typography variant=\"caption\" sx={{ ml: 1 }}>\n                            {label}\n                        </Typography>\n                    </ToggleButton>\n                ))}\n            </ToggleButtonGroup>\n            {/* strokeWidth */}\n            <Typography variant=\"caption\" sx={{ mt: 1 }}>\n                太さ\n            </Typography>\n            <Slider\n                sx={{ ml: 1, mb: 2, boxSizing: 'border-box', width: 140 }}\n                value={settings.strokeWidth}\n                min={MinStrokeWidth}\n                max={MaxStrokeWidth}\n                step={StrokeWidthStep}\n                valueLabelDisplay=\"auto\"\n                disabled={mode !== 'edit'}\n                onChange={handleChangeStrokeWidth}\n            />\n            {/* stroke */}\n            <TextField\n                type=\"color\"\n                label=\"ペンの色\"\n                value={settings.stroke}\n                disabled={mode !== 'edit' || settings.eraser}\n                fullWidth\n                margin=\"dense\"\n                size=\"small\"\n                onChange={handleChangeStroke}\n            />\n            {/* 構造データの追加 */}\n            <Button\n                startIcon={<AddBox />}\n                variant=\"contained\"\n                fullWidth\n                sx={{ mt: 2 }}\n                onClick={onClickAddCanvas}\n            >\n                構造データ追加\n            </Button>\n        </Stack>\n    );\n};\n\nconst NoteToolbox: React.VFC = () => {\n    const { noteRef } = useContext(AppSettingsContext);\n    const props = useContext(NoteSettingsContext);\n\n    /**\n     * 構造データ追加\n     */\n    const handleAddCanvas = useCallback(() => {\n        noteRef.current?.addStructureCanvas();\n    }, [noteRef]);\n\n    return <NoteToolboxCore {...props} onClickAddCanvas={handleAddCanvas} />;\n};\n\nexport default NoteToolbox;\n","import { useContext } from 'react';\nimport { AppSettingsContext } from '../../providers/AppSettingsProvider';\nimport CanvasToolbox from './CanvasToolbox';\nimport NoteToolbox from './NoteToolbox';\n\nconst Toolbox: React.VFC = () => {\n    const { mode } = useContext(AppSettingsContext);\n    if (mode === 'canvas') {\n        return <CanvasToolbox />;\n    }\n    return <NoteToolbox />;\n};\n\nexport default Toolbox;\n","import { Box } from '@mui/material';\nimport { useCallback, useEffect, useState } from 'react';\nimport { DOMSize } from '../types/common';\nimport Header from './Header';\nimport MainContainer from './MainContainer';\nimport Toolbox from './Toolbox';\n\nconst Layout: React.VFC = () => {\n    const [windowRect, setWindowRect] = useState<DOMSize>({ width: 0, height: 0 });\n\n    const fitWindowSize = useCallback(() => {\n        const { innerHeight, innerWidth } = window;\n        setWindowRect({\n            height: innerHeight,\n            width: innerWidth,\n        });\n    }, []);\n\n    useEffect(() => {\n        fitWindowSize();\n        window.addEventListener('resize', fitWindowSize);\n\n        return () => {\n            window.removeEventListener('resize', fitWindowSize);\n        };\n    }, [fitWindowSize]);\n\n    return (\n        <Box sx={{ ...windowRect, overflow: 'hidden' }}>\n            <Header />\n            <Box\n                sx={{\n                    boxSizing: 'border-box',\n                    width: 'auto',\n                    height: 'calc(100% - 48px)',\n                    display: 'flex',\n                    flexDirection: 'row',\n                    flexWrap: 'nowrap',\n                    alignItems: 'stretch',\n                    pt: 1,\n                    px: 1,\n                }}\n            >\n                <Toolbox />\n                <MainContainer />\n            </Box>\n        </Box>\n    );\n};\n\nexport default Layout;\n","import { createTheme, CssBaseline, ThemeProvider } from '@mui/material';\nimport React from 'react';\nimport AppSettingsProvider from '../providers/AppSettingsProvider';\nimport ConfigurationProvider from '../providers/ConfigurationProvider';\nimport NoteSettingsProvider from '../providers/NoteSettingsProvider';\nimport Layout from './Layout';\n\nconst theme = createTheme();\n\nconst App: React.VFC = () => {\n    return (\n        <ThemeProvider theme={theme}>\n            <AppSettingsProvider>\n                <ConfigurationProvider>\n                    <NoteSettingsProvider>\n                        <CssBaseline />\n                        <Layout />\n                    </NoteSettingsProvider>\n                </ConfigurationProvider>\n            </AppSettingsProvider>\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}