{"version":3,"sources":["components/Canvas/util/vector.ts","components/Canvas/util/common.ts","components/Canvas/util/event.ts","providers/AppSettingsProvider.tsx","providers/ConfigurationProvider.tsx","types/shape.ts","types/note.ts","providers/NoteSettingsProvider.tsx","components/Version.tsx","components/Header.tsx","components/Canvas/factory/guide.ts","components/Canvas/factory/common.ts","components/Canvas/factory/force.ts","components/Canvas/shape/BeamShape.ts","components/Canvas/shape/ForceShape.ts","components/Canvas/shape/NodeShape.ts","components/Canvas/shape/TrapezoidShape.ts","components/Canvas/types.ts","components/Canvas/manager.ts","components/Canvas/popup/pins/pin_1.svg","components/Canvas/provider/PopupProvider.tsx","components/Canvas/core.tsx","components/Canvas/popup/ForceEditor.tsx","components/Canvas/popup/pins/pin_2.svg","components/Canvas/popup/pins/pin_3.svg","components/Canvas/popup/pins/pin_4.svg","components/Canvas/popup/PinSelector.tsx","components/Canvas/popup/TrapezoidEditor.tsx","components/Canvas/popup/index.tsx","components/Canvas/index.tsx","types/common.ts","components/Note/shape/StructureRect.ts","components/Note/manager.ts","utils/coordinates.ts","components/Note/nav/CanvasNavigation.tsx","components/Note/Page.tsx","components/Note/index.tsx","components/MainContainer.tsx","components/Toolbox/CanvasToolbox.tsx","components/Toolbox/NoteToolbox.tsx","components/Toolbox/index.tsx","components/Layout.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["vX","Vector","vY","lerp","v1","v2","alpha","dir","clone","subtract","normalize","distance","mv","multiplyScalar","add","verticalNormalizeVector","v","y","x","dot","invert","data","JSON","parse","stringify","round","value","figure","n","result","Math","snapping","snapSize","i","snap","snapAngle","deg","roundDegree","getInsidePoints","start","end","direction","points","count","interval","point","push","intercectPoint","targetLine","pi","pj","slope1","intercept1","slope2","NaN","intercept2","isNaN","px","rangeX","sort","a","b","rangeY","err","console","error","getPointerPosition","event","e","type","indexOf","touches","clientX","clientY","compareCoords","isStrict","tolerance","abs","AppSettingsContext","createContext","undefined","AppSettingsProvider","children","useState","mode","setMode","pageSizeType","setPageSizeType","canvasProps","setCanvasProps","noteRef","useRef","canvasRef","callbackRef","editCanvas","useCallback","props","callback","state","zoom","pageZoom","current","closeCanvas","structure","getStructure","Provider","onChangeMode","onChangePageSize","ConfigurationContext","ConfigurationProvider","tool","setTool","NodePinTypes","isNode","item","id","name","isBeam","nodeI","nodeJ","isForce","beam","force","distanceI","isTrapezoid","forceI","forceJ","distanceJ","emptyStructure","version","unit","length","nodes","beams","forces","trapezoids","NoteModes","PageSize","A3","width","height","A4","B4","B5","defaultCanvasProps","defaultDrawSettings","stroke","strokeWidth","eraser","defaultPageProps","size","viewport","structures","NoteSettingsContext","NoteSettingsProvider","settings","setSettings","onChangeDrawSettings","hash","process","substring","date","Version","Typography","variant","sx","ml","Header","AppBar","position","Toolbar","component","color","GuideLineColor","defaultLineOptions","defaultEdgeOptions","fill","originX","originY","centeredRotation","defaultLabelOptions","fontSize","fontFamily","textAlign","evented","selectable","createGuideLineByVectors","p1","p2","offset","verticalDir","vd","angle","angleDeg","verticalLineLeft","fabric","Line","GuideLineHeight","verticalLineRight","horizontalLine","edgeLeft","Triangle","top","left","GuideLineEdgeSize","edgeRight","guide","Group","labelAngle","vdir","labelPosition","label","Textbox","createGuideLine","arg1","arg2","arg3","Array","isArray","createGuideLineByPoints","Error","createBeamGuideLine","createGlobalGuideLineBySets","pointsX","pointsY","canvasHeight","guides","maxY","minX","Number","MAX_SAFE_INTEGER","arrX","arrY","hy1","min","GlobalGuideLineInterval","hg1","hy2","x1","x2","hg","vx1","max","vg1","vx2","y1","y2","vg2","createGlobalGuideLine","guidePointsX","Set","guidePointsY","forEach","createGlobalGuideLineByArray","unresponseShapeProps","labelBaseProps","defaultColor","createArrowByVectors","arrowWidth","arrowEdgeSize","options","onRotating","onScaling","onModified","verticalAngleDeg","line","edgeSize","edge","arrow","setControlsVisibility","bl","br","mb","mr","mt","tl","tr","mtr","createArrow","createArrowByPoints","ForceColor","BeamShape","manager","params","dragging","_readonly","vi","vj","relationBeams","this","nodeMap","readonly","create","visible","canvas","attachEvents","createBeamByVectors","arg4","createBeamByPoints","remove","scaleX","scaleY","dirty","rotate","updateGuide","updateBeamByVectors","updateBeamByPoints","forceMap","trapezoidMap","beamMap","nodeBeamMap","beamId","shape","nodeId","list","filter","update","iy","ix","copy","rad","PI","cos","ratio","jx","jy","replaceNodes","removingBeams","modifiedBeams","nodeIds","Object","values","nodeShape","includes","beamShape","replacedI","replacedJ","modified","calcForceAverage","calcTrapezoidAverage","entries","removedNodeId","some","node","updateParts","updateGlobalGuidelines","on","onSelect","bind","onDeselect","onMouseDown","onMouseDownBefore","onMoving","onMoved","onRotated","onScaled","currentBeam","isDrawingMode","absolutePointer","calcRatio","forceId","uuid","ForceShape","removeUnconnectedNodes","setVisibleParts","pin","calcPoints","completeDrag","rotateDeg","scale","defaultForceLabelProps","longpressTimer","head","originalAngle","draggableMin","MIN_SAFE_INTEGER","draggableMax","attachEvent","forceAverage","forceLength","calcLength","tail","selected","select","setActiveObject","onSelected","onDeselected","onMouseUp","onDblClick","target","clearTimeout","getBoundingRect","beforeTop","beforeLeft","setTimeout","afterTop","afterLeft","openForceDialog","CanvasManager","LongpressInterval","currentAngle","f","calcForce","dragDis","dist","calcMovedPosition","distI","Pins","free","pinX","pinZ","fixX","fix","NodeShape","createNode","loadPin","updatePosition","updateByParams","visiblePin","Circle","radius","hasBorders","hasControls","PinSize","pinType","loadSVGFromURL","objects","svg","util","groupSVGElements","setPinProperties","openNodeDialog","pointer","ni","nj","getCenterPoint","sy","ns","TrapezoidColor","defaultTrapezoidArrowOptions","defaultTrapezoidLineOptions","lockMovementX","lockMovementY","lockRotation","lockScalingX","lockScalingY","defaultTrapezoidLabelOptions","TrapezoidShape","arrows","labelI","labelJ","selectedShapes","linePoints","draggingEdge","draggingDirection","draggingPosition","draggingLength","addToCanvas","isGlobal","average","trapezoidAverage","vI","bi","bj","slope","intercept","insideArrows","pu","map","arrowI","arrowJ","createLine","li","lj","createTrapezoidLabel","removeFromCanvas","bringToFront","shapes","edges","delete","openTrapezoidDialog","dj","di","dragLength","updateLine","transform","checkDraggingEdge","calcDraggableRange","moveArrow","degree","isPathStart","isPathEnd","defaultGridLineProps","excludeFromExport","excludeExport","canvasDom","open","_tool","gridSize","_props","_data","openPopup","enablePan","isCanvasDragging","lastPos","globalGuideLines","zoomStartScale","_initialized","getBoundingClientRect","Canvas","selection","stopContextMenu","setZoom","setViewportTransform","resize","drawBackgroundGrid","trapezoid","renderAll","discardActiveObject","setBrush","setSelectableShapes","setWidth","setHeight","flatMap","image","toSVG","suppressPreamble","viewportTransform","getZoom","reduce","prev","lines","hl","h","vl","entry","find","selectableNode","eventedNode","selectableBeam","selectableForce","eventedForce","selectableTrapezoid","eventedTrapezoid","brush","freeDrawingBrush","Boolean","PencilBrush","diffX","diffY","vpt","canvasWidth","getWidth","getHeight","pageWidth","pageHeight","py","requestRenderAll","onMouseMove","onCreatePath","onCreateObject","onTouchGesture","onMouseWheel","self","Point","delta","zoomToPoint","fitViewport","evt","deltaY","offsetX","offsetY","preventDefault","stopPropagation","path","s","isSVGPath","addNodeIfNotExists","addBeamIfNotExists","vs","ve","trapezoidId","log","clear","dispose","_path","PopupContext","PopupProvider","popupType","setPopupType","popupPosition","setPopupPosition","popupParams","setPopupParams","callbackFunc","close","CanvasCore","ref","canvasSize","useContext","managerRef","useImperativeHandle","toCanvasProps","useLayoutEffect","useEffect","forwardRef","ForceEditor","onChange","onClose","setValue","setError","handleSubmit","currentTarget","checkValidity","num","parseFloat","handleChange","errorMessage","Paper","Stack","spacing","p","autoComplete","noValidate","onSubmit","TextField","margin","required","fullWidth","InputProps","endAdornment","InputAdornment","helperText","justifyContent","Button","onClick","ConnectedForceEditor","useMemo","_extends","assign","arguments","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","keys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgPin1","_ref","svgRef","title","titleId","viewBox","xmlns","d","_circle","_circle2","_line","ForwardRef","SvgPin2","cx","cy","r","SvgPin3","_line2","_line3","_line4","_line5","SvgPin4","PinButtons","icon","SvgIcon","defaultButtonProps","alignItems","PinSelector","setPin","_","newValue","ToggleButtonGroup","orientation","exclusive","ToggleButton","ConnectedPinSelector","validateForce","val","validateAngle","parseInt","TrapezoidEditor","setValues","errors","setErrors","attrs","value1","valid1","value2","valid2","value3","valid3","valid","parseFormValues","error1","error2","handleChangeIsGlobal","checked","toFormValues","FormControlLabel","control","Checkbox","ConnectedTrapezoidEditor","Popup","Box","zIndex","setSize","containerRef","observer","ResizeObserver","contentRect","observe","disconnect","backgroundColor","overscrollBehavior","CanvasTools","isPoint","defaultLayerOptions","hasRotatingPoint","erasable","defaultImageOptions","StructureRect","layer","createLayer","loadImage","calcCoords","off","selectedCanvasId","rect","Rect","loadSVGFromString","setOptions","opacity","updateCanvasState","clearCanvasState","coords","isShapeCoordinates","PageManager","drawData","setCanvasState","_mode","_settings","pageSize","loadFromJSON","EraserBrush","getCanvasProps","canvasId","coordinates","view","items","pos","Background","styled","display","padding","Spacer","flex","CanvasNavigation","onEdit","onCopy","onDelete","onCancel","anchorEl","setAnchorEl","handleClickMore","handleCloseMenu","handleCopy","handleDelete","IconButton","Menu","MenuItem","Page","viewSize","drawSettings","onEditCanvas","onCloseCanvas","getActiveStructure","activeStructure","setActiveStructure","addStructureCanvas","addCanvas","removeStructureCanvas","removeCanvas","closingCanvas","handleEdit","activeCanvas","hideControls","Note","setViewSize","overflow","MainContainer","boxSizing","border","theme","palette","divider","borderRadius","ToolboxButtons","PanToolAlt","pen","ArrowDownward","Texture","Delete","CanvasToolboxCore","CanvasToolbox","DrawModes","NoteModeButtons","edit","DrawModeButtons","AutoFixNormal","NoteToolboxCore","onClickAddCanvas","handleChangeMode","handleChangeTool","handleChangeStrokeWidth","handleChangeStroke","disabled","Slider","step","valueLabelDisplay","startIcon","AddBox","NoteToolbox","handleAddCanvas","Toolbox","Layout","windowRect","setWindowRect","fitWindowSize","window","innerHeight","innerWidth","addEventListener","removeEventListener","flexDirection","flexWrap","pt","createTheme","App","ThemeProvider","CssBaseline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.96c52442.chunk.js","sourcesContent":["import Vector from 'victor';\n\nexport { Vector };\n\n// X方向のベクトル\nexport const vX = new Vector(1, 0);\n// Y方向のベクトル\nexport const vY = new Vector(0, 1);\n\n/**\n * v1 と v2 の間にある vp を取得する\n * @param v1\n * @param v2\n * @param alpha\n * @returns\n */\nexport const lerp = (v1: Vector, v2: Vector, alpha: number): Vector => {\n    if (alpha >= 1) {\n        return v2;\n    }\n    if (alpha <= 0) {\n        return v1;\n    }\n    const dir = v2.clone().subtract(v1).normalize();\n    const distance = v1.distance(v2);\n    const mv = dir.multiplyScalar(distance * alpha);\n    return v1.clone().add(mv);\n};\n\n/**\n * v1 と v2 に直交する単位ベクトルを返す\n * @param v1\n * @param v2\n * @returns\n */\nexport const verticalNormalizeVector = (v1: Vector, v2: Vector): Vector => {\n    const dir = v2.clone().subtract(v1).normalize();\n    const v = new Vector(dir.y, dir.x * -1).normalize();\n\n    const value = vY.dot(v);\n    if (value > 0) {\n        v.invert();\n    }\n\n    return v;\n};\n","import { Point } from '../types';\nimport { lerp, Vector } from './vector';\n\nexport const clone = <T>(data: T): T => {\n    return JSON.parse(JSON.stringify(data)) as T;\n};\n\nexport const round = (value: number, figure = 3): number => {\n    const n = 10 ** figure;\n    const result = Math.round(value * n) / n;\n    return result;\n};\n\nconst snapping = (value: number, snapSize = 25): number => {\n    const n = value / snapSize;\n    const i = Math.round(n) * snapSize;\n    return i;\n};\n\nexport const DEFAULT_SNAP_SIZE = 25;\n\n/**\n * 頂点をグリッドにスナップする\n * @param param0\n * @param snapSize\n * @returns\n */\nexport const snap = ([x, y]: [number, number], snapSize = DEFAULT_SNAP_SIZE): [number, number] => {\n    return [snapping(x, snapSize), snapping(y, snapSize)];\n};\n\nexport const DEFAULT_SNAP_ANGLE = 5;\nexport const snapAngle = (deg: number, snapSize = DEFAULT_SNAP_ANGLE): number => {\n    return snapping(deg, snapSize);\n};\n\n/**\n * 角度を 0 〜 360 の範囲に変換する\n * @param deg\n * @returns\n */\nexport const roundDegree = (deg: number): number => {\n    let value = deg;\n    if (0 > value) {\n        value += 360;\n    }\n    if (value >= 360) {\n        value -= 360;\n    }\n    if (0 > value || value >= 360) {\n        value = roundDegree(value);\n    }\n    return value;\n};\n\nconst InsideArrowCount = 10;\nconst InsideArrowInterval = 25;\nconst InsideArrowMinInterval = 10;\n\n/**\n * 開始点から終了点まで等間隔に点を取る\n * @param start\n * @param end\n * @param direction\n * @returns\n */\nexport const getInsidePoints = (start: Vector, end: Vector, direction: Vector): Vector[] => {\n    const points: Vector[] = [];\n    // 2点間の距離\n    const distance = start.distance(end);\n    // 分割数\n    let count = InsideArrowCount;\n    // 間隔\n    let interval = distance / (count + 1);\n    while (interval < InsideArrowInterval && count > 0) {\n        count--;\n        interval = distance / (count + 1);\n    }\n\n    if (count > 0) {\n        // 始点から interval の間隔で count 個 点を取る\n        for (let i = 1; i <= count; i++) {\n            const point = start.clone().add(direction.clone().multiplyScalar(interval * i));\n            points.push(point);\n        }\n    } else {\n        // 半分にしてみる\n        interval = distance / 2;\n        if (interval >= InsideArrowMinInterval) {\n            // 半分の位置に点を置く\n            const point = lerp(start, end, 0.5);\n            points.push(point);\n        }\n    }\n\n    return points;\n};\n\n/**\n * 開始点からある方向に伸ばした線が対象となる線と交わる点を取得する\n * @param targetLine 対象となる Line [始点、終点、傾き、切片]\n * @param start 開始点\n * @param dir 方向\n * @returns 交点（なければ null）\n */\nexport const intercectPoint = (\n    targetLine: [Vector, Vector, number, number],\n    start: Vector,\n    dir: Vector\n): Point | null => {\n    const [pi, pj, slope1, intercept1] = targetLine;\n    let point: Point | null = null;\n    try {\n        // dir の傾き\n        const end: Vector = start.clone().add(dir);\n        const slope2 = end.x - start.x !== 0 ? (end.y - start.y) / (end.x - start.x) : NaN;\n        // dir の切片\n        const intercept2 = isNaN(slope2) ? NaN : start.y - slope2 * start.x;\n\n        if (slope1 === slope2) {\n            // 平行なので交点なし\n            return null;\n        }\n\n        if (!isNaN(slope1) && !isNaN(slope2)) {\n            // どちらも垂直でない\n            const px = (intercept2 - intercept1) / (slope1 - slope2);\n            const py = slope1 * px + intercept1;\n\n            point = [px, py];\n        } else if (isNaN(slope1)) {\n            // 対象の Line が垂直\n            const px = pi.x;\n            const py = px * slope2 + intercept2;\n\n            point = [px, py];\n        } else if (isNaN(slope2)) {\n            // dir が垂直\n            const px = start.x;\n            const py = px * slope1 + intercept1;\n\n            point = [px, py];\n        }\n\n        // 交点が Line の内側？\n        if (point) {\n            const [x, y] = point;\n            const rangeX = [pi.x, pj.x].sort((a, b) => a - b);\n            const rangeY = [pi.y, pj.y].sort((a, b) => a - b);\n            if (x >= rangeX[0] && x <= rangeX[1] && y >= rangeY[0] && y <= rangeY[1]) {\n                return point;\n            }\n        }\n        return null;\n    } catch (err) {\n        console.error(err);\n    }\n\n    return null;\n};\n","/**\n * ポインタの位置を返す\n * @param event\n * @returns\n */\nexport const getPointerPosition = (\n    event: fabric.IEvent<Event>\n): { clientX: number; clientY: number } => {\n    if (event.e.type.indexOf('touch') === 0) {\n        const { touches } = event.e as TouchEvent;\n        const { clientX, clientY } = touches[0];\n        return { clientX, clientY };\n    } else {\n        const { clientX, clientY } = event.e as MouseEvent;\n        return { clientX, clientY };\n    }\n};\n\nexport type Coords = [number, number];\nexport const isCoords = (item: unknown): item is Coords => {\n    if (Array.isArray(item)) {\n        return item.length === 2 && item.every((e) => typeof e === 'number');\n    }\n    return false;\n};\nconst Tolerance = 3;\n\nexport const compareCoords = (a: Coords, b: Coords, isStrict = false): boolean => {\n    // 許容範囲\n    const tolerance = isStrict ? 0 : Tolerance;\n    return Math.abs(a[0] - b[0]) <= tolerance && Math.abs(a[1] - b[1]) <= tolerance;\n};\n","import {\n    createContext,\n    Dispatch,\n    RefObject,\n    SetStateAction,\n    useCallback,\n    useRef,\n    useState,\n} from 'react';\nimport { CanvasHandler } from '../components/Canvas';\nimport { clone } from '../components/Canvas/util';\nimport { NoteHandler } from '../components/Note';\nimport { AppMode } from '../types/common';\nimport { CommitStructureFunction, PageSizeType, StructureCanvasState } from '../types/note';\nimport { debug } from '../utils/logger';\n\ninterface Props {\n    children: React.ReactNode;\n}\n\ninterface IAppSettingsContext {\n    mode: AppMode;\n    onChangeMode: Dispatch<SetStateAction<AppMode>>;\n    pageSizeType: PageSizeType;\n    onChangePageSize: Dispatch<SetStateAction<PageSizeType>>;\n    canvasProps?: StructureCanvasState;\n    editCanvas: (props: StructureCanvasState, callback: CommitStructureFunction) => void;\n    closeCanvas: VoidFunction;\n    noteRef: RefObject<NoteHandler>;\n    canvasRef: RefObject<CanvasHandler>;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nexport const AppSettingsContext = createContext<IAppSettingsContext>(undefined!);\n\nconst AppSettingsProvider: React.VFC<Props> = ({ children }) => {\n    // アプリのモード (note | canvas)\n    const [mode, setMode] = useState<AppMode>('note');\n    // ノートのサイズ\n    const [pageSizeType, setPageSizeType] = useState<PageSizeType>('A4');\n    // キャンバスの描画情報\n    const [canvasProps, setCanvasProps] = useState<StructureCanvasState>();\n    // ノートの参照\n    const noteRef = useRef<NoteHandler>(null);\n    // キャンバスの参照\n    const canvasRef = useRef<CanvasHandler>(null);\n    // ノートへのコールバック関数\n    const callbackRef = useRef<CommitStructureFunction>();\n\n    /**\n     * キャンバスの編集開始\n     */\n    const editCanvas = useCallback(\n        (props: StructureCanvasState, callback: CommitStructureFunction) => {\n            setMode('canvas');\n            const state = clone(props);\n            state.zoom = state.zoom * state.pageZoom;\n            setCanvasProps(state);\n            callbackRef.current = callback;\n        },\n        []\n    );\n\n    /**\n     * キャンバスの編集完了\n     */\n    const closeCanvas = useCallback(() => {\n        if (canvasRef.current) {\n            // 更新した構造データを取得する\n            const structure = canvasRef.current.getStructure();\n            debug('- canvas closed: ', structure);\n\n            // 選択中のキャンバスのデータを更新\n            if (callbackRef.current) {\n                callbackRef.current(structure);\n            }\n        }\n\n        // 状態をリセット\n        setMode('note');\n        setCanvasProps(undefined);\n    }, []);\n\n    return (\n        <AppSettingsContext.Provider\n            value={{\n                mode,\n                onChangeMode: setMode,\n                pageSizeType,\n                onChangePageSize: setPageSizeType,\n                canvasProps,\n                editCanvas,\n                closeCanvas,\n                noteRef,\n                canvasRef,\n            }}\n        >\n            {children}\n        </AppSettingsContext.Provider>\n    );\n};\n\nexport default AppSettingsProvider;\n","import { createContext, useState } from 'react';\nimport { CanvasTool } from '../types/common';\n\ninterface Props {\n    children: React.ReactNode;\n}\n\ninterface IConfigurationContext {\n    tool: CanvasTool;\n    setTool: (tool: CanvasTool) => void;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nexport const ConfigurationContext = createContext<IConfigurationContext>(undefined!);\n\nconst ConfigurationProvider: React.VFC<Props> = ({ children }) => {\n    const [tool, setTool] = useState<CanvasTool>('pen');\n\n    return (\n        <ConfigurationContext.Provider value={{ tool, setTool }}>\n            {children}\n        </ConfigurationContext.Provider>\n    );\n};\n\nexport default ConfigurationProvider;\n","/**\n * 単位: 力\n */\nexport const ForceUnitValues = ['N', 'kN'] as const;\n\n/**\n * 単位: 長さ\n */\nexport const LengthUnitValues = ['mm', 'cm', 'm'] as const;\n\nexport type ForceUnitType = typeof ForceUnitValues[number];\nexport type LengthUnitType = typeof LengthUnitValues[number];\n\n/**\n * 単位\n */\nexport interface Unit {\n    force: ForceUnitType;\n    length: LengthUnitType;\n}\n\nexport const isUnit = (item: unknown): item is Unit => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return (\n            ForceUnitValues.some((v) => value.force === v) &&\n            LengthUnitValues.some((v) => value.length === v)\n        );\n    }\n    return false;\n};\n\n/**\n * 節点ピン\n */\nexport const NodePinTypes = ['free', 'pin', 'pinX', 'pinZ', 'fixX', 'fix'] as const;\nexport type NodePinType = typeof NodePinTypes[number];\n\nexport const isNodePinType = (item: unknown): item is NodePinType => {\n    if (typeof item === 'string') {\n        return NodePinTypes.some((type) => type === item);\n    }\n    return false;\n};\n\nexport interface ShapeBase {\n    id: string;\n    name: string;\n    [key: string]: unknown;\n}\nexport const isShape = (item: unknown): item is ShapeBase => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return typeof value.id === 'string' && typeof value.name === 'string';\n    }\n    return false;\n};\n\nexport interface Node extends ShapeBase {\n    x: number;\n    y: number;\n    pin?: NodePinType;\n}\n\nexport const isNode = (item: unknown): item is Node => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return (\n            typeof value.id === 'string' &&\n            typeof value.name === 'string' &&\n            typeof value.x === 'number' &&\n            typeof value.y === 'number'\n        );\n    }\n    return false;\n};\n\nexport interface Beam extends ShapeBase {\n    nodeI: string;\n    nodeJ: string;\n}\n\nexport const isBeam = (item: unknown): item is Beam => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return (\n            typeof value.id === 'string' &&\n            typeof value.name === 'string' &&\n            typeof value.nodeI === 'string' &&\n            typeof value.nodeJ === 'string'\n        );\n    }\n    return false;\n};\n\nexport interface Force extends ShapeBase {\n    beam: string;\n    force: number;\n    // i端からの距離 (0 〜 1)\n    distanceI: number;\n    // 角度、デフォルト 90度、-179 〜 180 度の間で指定 (-180 = 180)\n    angle?: number;\n}\nexport const isForce = (item: unknown): item is Force => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return (\n            typeof value.id === 'string' &&\n            typeof value.name === 'string' &&\n            typeof value.beam === 'string' &&\n            typeof value.force === 'number' &&\n            typeof value.distanceI === 'number'\n        );\n    }\n    return false;\n};\n\nexport interface Trapezoid extends ShapeBase {\n    beam: string;\n    // kN/m\n    forceI: number;\n    // kN/m\n    forceJ: number;\n    // i端からの距離 (0 〜 1, distanceI + distanceJ <= 1)\n    distanceI: number;\n    // j端からの距離 (0 〜 1, distanceI + distanceJ <= 1)\n    distanceJ: number;\n    // 角度、デフォルト 90度、-179 〜 180 度の間で指定 (-180 = 180)\n    angle?: number;\n    // 全体座標系に垂直か、部材に垂直か デフォルト false\n    isGlobal?: boolean;\n}\n\nexport const isTrapezoid = (item: unknown): item is Trapezoid => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return (\n            typeof value.id === 'string' &&\n            typeof value.name === 'string' &&\n            typeof value.beam === 'string' &&\n            typeof value.forceI === 'number' &&\n            typeof value.distanceI === 'number' &&\n            typeof value.forceJ === 'number' &&\n            typeof value.distanceJ === 'number'\n        );\n    }\n    return false;\n};\n\nexport interface Structure {\n    version: string;\n    unit: Unit;\n    nodes: Node[];\n    beams: Beam[];\n    forces: Force[];\n    trapezoids: Trapezoid[];\n}\n\nexport const isStructure = (item: unknown): item is Structure => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return (\n            typeof value.version === 'string' &&\n            isUnit(value.unit) &&\n            Array.isArray(value.nodes) &&\n            value.nodes.every(isNode) &&\n            Array.isArray(value.beams) &&\n            value.beams.every(isBeam) &&\n            Array.isArray(value.forces) &&\n            value.forces.every(isForce) &&\n            Array.isArray(value.trapezoids) &&\n            value.trapezoids.every(isTrapezoid)\n        );\n    }\n    return false;\n};\n\nexport type StructureFieldType = keyof Omit<Structure, 'unit'>;\n\nexport const defaultUnit: Unit = {\n    force: 'kN',\n    length: 'm',\n};\n\nexport const emptyStructure: Structure = {\n    version: '0.0.0',\n    unit: defaultUnit,\n    nodes: [],\n    beams: [],\n    forces: [],\n    trapezoids: [],\n};\n\nexport const ShapeTypes = ['node', 'beam', 'force', 'trapezoid', 'background'] as const;\nexport type ShapeType = typeof ShapeTypes[number];\nexport interface IShapeData extends ShapeBase {\n    type: ShapeType;\n    // SVGに変換する際に shape を対象外とする（背景グリッドなどに設定）\n    excludeExport?: boolean;\n}\n","import { DOMSize, ShapeCoordinates, SizePosition } from './common';\nimport { emptyStructure, isStructure, Structure } from './shape';\n\nconst NoteModes = ['select', 'edit'] as const;\nexport type NoteMode = typeof NoteModes[number];\nexport const isNoteMode = (item: unknown): item is NoteMode => {\n    if (typeof item === 'string') {\n        return NoteModes.some((mode) => mode === item);\n    }\n    return false;\n};\n\nexport const PageSizeTypes = ['A4', 'A3', 'B5', 'B4'] as const;\nexport type PageSizeType = typeof PageSizeTypes[number];\nexport const isPageSizeType = (item: unknown): item is PageSizeType => {\n    if (typeof item === 'string') {\n        return PageSizeTypes.some((value) => item === value);\n    }\n    return false;\n};\n\nexport const PageSize: Record<PageSizeType, DOMSize> = {\n    A3: {\n        width: 0,\n        height: 0,\n    },\n    A4: {\n        width: 2970,\n        height: 2100,\n    },\n    B4: {\n        width: 0,\n        height: 0,\n    },\n    B5: {\n        width: 0,\n        height: 0,\n    },\n};\n\nexport interface StructureCanvasProps extends SizePosition {\n    id: string;\n    data: Structure;\n    /**\n     * SVG文字列 fabric.loadSVGFromString でパースする\n     */\n    image?: string;\n    zoom: number;\n    viewport?: number[];\n}\nexport const isStructureCanvasProps = (item: unknown): item is StructureCanvasProps => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return (\n            typeof value.id === 'string' &&\n            isStructure(value.data) &&\n            typeof value.zoom === 'number' &&\n            Array.isArray(value.viewport) &&\n            value.viewport.every((v) => typeof v === 'number')\n        );\n    }\n    return false;\n};\n\nexport const MinCanvasSize: DOMSize = {\n    width: 160,\n    height: 90,\n};\n\nexport const defaultCanvasProps: StructureCanvasProps = {\n    id: 'Canvas_1',\n    data: emptyStructure,\n    x: 100,\n    y: 100,\n    ...MinCanvasSize,\n    zoom: 1,\n};\n\nexport interface DrawSettings {\n    stroke: string;\n    strokeWidth: number;\n    eraser?: boolean;\n}\nexport const defaultDrawSettings: DrawSettings = {\n    stroke: '#000000',\n    strokeWidth: 4,\n    eraser: false,\n};\n\nexport interface PageProps {\n    size: PageSizeType;\n    zoom: number;\n    viewport: number[];\n    /**\n     * 構造データ\n     */\n    structures: StructureCanvasProps[];\n    /**\n     * 描画データ fabric.Canvas.toJSON() で取得した文字列\n     * fabric.Canvas.loadFromJSON でパースする\n     */\n    drawData?: string;\n}\n\nexport const isPageProps = (item: unknown): item is PageProps => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return (\n            isPageSizeType(value.size) &&\n            typeof value.zoom === 'number' &&\n            Array.isArray(value.viewport) &&\n            value.viewport.every((v) => typeof v === 'number') &&\n            Array.isArray(value.structures) &&\n            value.structures.every(isStructureCanvasProps)\n        );\n    }\n\n    return false;\n};\n\nexport const defaultPageProps: PageProps = {\n    size: 'A4',\n    zoom: 1,\n    viewport: [1, 0, 0, 1, 0, 0],\n    structures: [\n        {\n            ...defaultCanvasProps,\n        },\n    ],\n};\n\n/**\n * キャンバスの更新完了時にノートに更新内容を引き渡すコールバック関数\n */\nexport type CommitStructureFunction = (structure: StructureCanvasProps) => void;\n\n/**\n * キャンバスのデータ + ナビゲーションの表示位置情報\n */\nexport interface StructureCanvasState extends StructureCanvasProps {\n    // 座標\n    coordinates: ShapeCoordinates;\n    pageZoom: number;\n}\n","import { createContext, Dispatch, SetStateAction, useState } from 'react';\nimport { defaultDrawSettings, DrawSettings, NoteMode } from '../types/note';\n\ninterface Props {\n    children: React.ReactNode;\n}\n\ninterface INoteSettingsContext {\n    mode: NoteMode;\n    settings: DrawSettings;\n    onChangeMode: Dispatch<SetStateAction<NoteMode>>;\n    onChangeDrawSettings: Dispatch<SetStateAction<DrawSettings>>;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nexport const NoteSettingsContext = createContext<INoteSettingsContext>(undefined!);\n\nconst NoteSettingsProvider: React.VFC<Props> = ({ children }) => {\n    const [mode, setMode] = useState<NoteMode>('select');\n    const [settings, setSettings] = useState<DrawSettings>(defaultDrawSettings);\n\n    return (\n        <NoteSettingsContext.Provider\n            value={{ mode, settings, onChangeMode: setMode, onChangeDrawSettings: setSettings }}\n        >\n            {children}\n        </NoteSettingsContext.Provider>\n    );\n};\n\nexport default NoteSettingsProvider;\n","import { Typography } from '@mui/material';\n\nconst hash = process.env.REACT_APP_GIT_COMMIT_HASH?.substring(0, 7) ?? '';\nconst date = process.env.REACT_APP_GIT_COMMIT_DATE ?? '';\nconst version = process.env.REACT_APP_PACKAGE_VERSION ?? '';\n\nconst Version: React.VFC = () => {\n    return (\n        <Typography\n            variant=\"caption\"\n            sx={{ ml: 2 }}\n        >{`ver ${version} (${hash}: ${date})`}</Typography>\n    );\n};\n\nexport default Version;\n","import { AppBar, Toolbar, Typography } from '@mui/material';\nimport Version from './Version';\n\nconst Header: React.VFC = () => {\n    return (\n        <AppBar position=\"static\">\n            <Toolbar variant=\"dense\">\n                <Typography component=\"h1\" variant=\"h6\" color=\"inherit\">\n                    Drawing Sample\n                </Typography>\n                <Version />\n            </Toolbar>\n        </AppBar>\n    );\n};\n\nexport default Header;\n","import { fabric } from 'fabric';\nimport { Node } from '../../../types/shape';\nimport { BeamPoints } from '../types';\nimport { Vector, verticalNormalizeVector, vX, vY } from '../util';\nimport { NodeShape } from './node';\n\ntype CreateGuideLineFunction = {\n    (points: BeamPoints, offset?: number): fabric.Group;\n    (v1: Vector, v2: Vector, offset?: number): fabric.Group;\n};\n\nconst GuideLineEdgeSize = 8;\nconst GuideLineColor = 'silver';\nconst GuideLineHeight = 14;\n\nconst defaultLineOptions: fabric.ILineOptions = {\n    stroke: GuideLineColor,\n    strokeWidth: 1,\n};\nconst defaultEdgeOptions: fabric.ITriangleOptions = {\n    width: GuideLineEdgeSize,\n    height: GuideLineEdgeSize,\n    stroke: GuideLineColor,\n    strokeWidth: 1,\n    fill: GuideLineColor,\n    originX: 'center',\n    originY: 'center',\n    centeredRotation: true,\n};\nconst defaultLabelOptions: fabric.ITextboxOptions = {\n    fill: GuideLineColor,\n    height: 10,\n    fontSize: 10,\n    fontFamily: 'sans-serif',\n    textAlign: 'center',\n    evented: false,\n    selectable: false,\n};\n\nexport const createGuideLineByVectors = (p1: Vector, p2: Vector, offset: number): fabric.Group => {\n    let v1 = p1.clone();\n    let v2 = p2.clone();\n    if (v1.x > v2.x || (v1.x === v2.x && v1.y > v2.y)) {\n        [v1, v2] = [v2, v1];\n    }\n\n    // 指定された線に直交する方向\n    const verticalDir = verticalNormalizeVector(v1, v2);\n\n    if (offset !== 0) {\n        const vd = verticalDir.clone();\n        // ベクトルの内積\n        const cos = vY.dot(vd);\n        if (cos >= 0) {\n            // 直交する方向が vY の方向であれば反転させる\n            vd.invert();\n        }\n        // offset の距離だけ離す\n        vd.multiplyScalar(offset);\n        v1.add(vd);\n        v2.add(vd);\n    }\n\n    // 距離\n    const distance = v1.distance(v2);\n    // 方向\n    const dir = v2.clone().subtract(v1).normalize();\n    const angle = dir.angleDeg();\n\n    // |<-->| こんな感じに描く\n    const verticalLineLeft = new fabric.Line(\n        [0, (-1 * GuideLineHeight) / 2, 0, GuideLineHeight / 2],\n        defaultLineOptions\n    );\n    const verticalLineRight = new fabric.Line(\n        [distance, (-1 * GuideLineHeight) / 2, distance, GuideLineHeight / 2],\n        defaultLineOptions\n    );\n    const horizontalLine = new fabric.Line([0, 0, distance, 0], defaultLineOptions);\n    const edgeLeft = new fabric.Triangle({\n        top: 0,\n        left: GuideLineEdgeSize / 2,\n        angle: -90,\n        ...defaultEdgeOptions,\n    });\n    const edgeRight = new fabric.Triangle({\n        top: 0,\n        left: distance - GuideLineEdgeSize / 2,\n        angle: 90,\n        ...defaultEdgeOptions,\n    });\n\n    const guide = new fabric.Group(\n        [verticalLineLeft, edgeLeft, horizontalLine, edgeRight, verticalLineRight],\n        {\n            top: v1.y,\n            left: v1.x,\n            originX: 'left',\n            originY: 'center',\n            angle,\n        }\n    );\n\n    let labelAngle = angle;\n    let vdir = verticalDir.invert();\n    let labelPosition = v1.clone().add(vdir.multiplyScalar(5));\n    if (vdir.dot(vY) === 0) {\n        // Y軸方向と直交する場合、下端を基準にラベルを描く\n        vdir = vX.clone();\n        labelAngle = -90;\n        labelPosition = v2.clone().add(vdir.multiplyScalar(5));\n    }\n\n    const label = new fabric.Textbox(`${Math.round(distance)} m`, {\n        top: labelPosition.y,\n        left: labelPosition.x,\n        width: distance,\n        angle: labelAngle,\n        ...defaultLabelOptions,\n    });\n\n    return new fabric.Group([guide, label], {\n        selectable: false,\n        evented: false,\n        data: { type: 'guide' },\n    });\n};\n\nexport const createGuideLineByPoints = (points: BeamPoints, offset: number): fabric.Group => {\n    const p1 = new Vector(points[0], points[1]);\n    const p2 = new Vector(points[2], points[3]);\n    return createGuideLineByVectors(p1, p2, offset);\n};\n\nexport const createGuideLine: CreateGuideLineFunction = (\n    arg1: BeamPoints | Vector,\n    arg2?: Vector | number,\n    arg3?: number\n): fabric.Group => {\n    let offset = 0;\n    if (Array.isArray(arg1)) {\n        if (typeof arg2 === 'number') {\n            offset = arg2;\n        }\n        return createGuideLineByPoints(arg1, offset);\n    } else if (arg2 && typeof arg2 !== 'number') {\n        if (typeof arg3 === 'number') {\n            offset = arg3;\n        }\n        return createGuideLineByVectors(arg1, arg2, offset);\n    }\n    throw new Error('invalid parameters');\n};\n\n/**\n * 梁要素の寸法線\n * @param points\n * @returns\n */\nexport const createBeamGuideLine = (points: BeamPoints): fabric.Group => {\n    return createGuideLine(points, 50);\n};\n\n/**\n * 分布荷重の寸法線\n */\nexport const createTrapezoidGuideLine = (\n    points: BeamPoints,\n    distanceI: number,\n    distanceJ: number\n): fabric.Group => {\n    const p1 = new Vector(points[0], points[1]);\n    const p2 = new Vector(points[2], points[3]);\n    const dir = p2.clone().subtract(p1).normalize();\n    const distance = p1.distance(p2);\n\n    const vi = p1.clone().add(dir.clone().multiplyScalar(distance * distanceI));\n    const vj = p1.clone().add(dir.clone().multiplyScalar(distance * (1 - distanceJ)));\n\n    return createGuideLine(vi, vj, 50);\n};\n\ntype CreateGlobalGuideLineFunction = {\n    (pointsX: Set<number>, pointsY: Set<number>, canvasHeight: number): fabric.Group[];\n    (nodes: Node[], canvasHeight: number): fabric.Group[];\n};\n\n/**\n * 全体の寸法線の間隔\n */\nconst GlobalGuideLineInterval = 25;\n\n/**\n * 全体の寸法線を作成する\n * @param pointsX\n * @param pointsY\n * @param canvasHeight\n * @returns\n */\nconst createGlobalGuideLineBySets = (\n    pointsX: Set<number>,\n    pointsY: Set<number>,\n    canvasHeight: number\n): fabric.Group[] => {\n    const guides: fabric.Group[] = [];\n\n    if (pointsX.size === 0 || pointsY.size === 0) {\n        return [];\n    }\n\n    let minX = Number.MAX_SAFE_INTEGER;\n    let maxY = 0;\n\n    const arrX = [...pointsX].sort((a, b) => a - b);\n    minX = arrX[0];\n    const arrY = [...pointsY].sort((a, b) => a - b);\n    maxY = arrY[arrY.length - 1];\n\n    // horizontal\n    if (minX !== arrX[arrX.length - 1]) {\n        // 全体\n        const hy1 = Math.min(maxY + GlobalGuideLineInterval * 2, canvasHeight - 10);\n        const hg1 = createGuideLine([minX, hy1, arrX[arrX.length - 1], hy1]);\n        guides.push(hg1);\n\n        // 内訳\n        const hy2 = hy1 - GlobalGuideLineInterval;\n        for (let i = 0; i < arrX.length - 1; i++) {\n            const x1 = arrX[i];\n            const x2 = arrX[i + 1];\n            if (x1 !== x2) {\n                const hg = createGuideLine([x1, hy2, x2, hy2]);\n                guides.push(hg);\n            }\n        }\n    }\n\n    // vertical\n    if (arrY[0] !== maxY) {\n        // 全体\n        const vx1 = Math.max(GlobalGuideLineInterval, minX - GlobalGuideLineInterval * 2);\n        const vg1 = createGuideLine([vx1, arrY[0], vx1, maxY]);\n        guides.push(vg1);\n\n        // 内訳\n        const vx2 = vx1 + GlobalGuideLineInterval;\n        for (let i = 0; i < arrY.length - 1; i++) {\n            const y1 = arrY[i];\n            const y2 = arrY[i + 1];\n            if (y1 !== y2) {\n                const vg2 = createGuideLine([vx2, y1, vx2, y2]);\n                guides.push(vg2);\n            }\n        }\n    }\n\n    return guides;\n};\n\nconst createGlobalGuideLineByArray = (nodes: Node[], canvasHeight: number): fabric.Group[] => {\n    const guidePointsX = new Set<number>();\n    const guidePointsY = new Set<number>();\n\n    nodes.forEach(({ x, y }) => {\n        guidePointsX.add(x);\n        guidePointsY.add(y);\n    });\n\n    return createGlobalGuideLineBySets(guidePointsX, guidePointsY, canvasHeight);\n};\n\n/**\n * 全体の寸法線を作成する\n * @param arg1\n * @param arg2\n * @param arg3\n * @returns\n */\nexport const createGlobalGuideLine: CreateGlobalGuideLineFunction = (\n    arg1: Set<number> | Node[],\n    arg2: Set<number> | number,\n    arg3?: number\n): fabric.Group[] => {\n    if (Array.isArray(arg1) && typeof arg2 === 'number') {\n        return createGlobalGuideLineByArray(arg1, arg2);\n    } else if (arg1 instanceof Set && arg2 instanceof Set && typeof arg3 === 'number') {\n        return createGlobalGuideLineBySets(arg1, arg2, arg3);\n    }\n    throw new Error('invalid parameters');\n};\n\n/**\n * 全体の寸法線を再作成する\n * @param canvas\n * @param nodeMap\n * @param guides\n */\nexport const recreateGlobalGuideLines = (\n    canvas: fabric.Canvas,\n    nodeMap: Record<string, NodeShape>,\n    guides: fabric.Group[]\n): void => {\n    const nodes = Object.values(nodeMap).map((shape) => shape.data);\n    const lines = createGlobalGuideLine(nodes, canvas.height ?? 0);\n    if (guides.length > 0) {\n        // 表示済みの寸法線を削除\n        canvas.remove(...guides);\n        // 配列をクリア\n        guides.length = 0;\n    }\n    // 全体の寸法線を表示\n    canvas.add(...lines);\n    guides.push(...lines);\n};\n","import { fabric } from 'fabric';\nimport { BeamPoints } from '../types';\nimport { Vector } from '../util';\nimport { BeamShape } from './beam';\nimport { ForceShape } from './force';\nimport { TrapezoidShape } from './trapezoid';\n\n/**\n * イベントに反応しない shape の共通設定\n */\nexport const unresponseShapeProps: fabric.IObjectOptions = {\n    // イベントに反応させない\n    evented: false,\n    selectable: false,\n};\n\n/**\n * ラベルのフォント設定\n */\nexport const labelBaseProps: fabric.ITextboxOptions = {\n    fontSize: 10,\n    fontFamily: 'sans-serif',\n    height: 10,\n};\n\n/**\n * 矢印の設定\n */\nexport interface ArrowOptions extends fabric.ILineOptions {\n    arrowWidth?: number;\n    arrowEdgeSize?: number;\n    onRotating?: (event: fabric.IEvent<Event>) => void;\n    onScaling?: (event: fabric.IEvent<Event>) => void;\n    onModified?: (event: fabric.IEvent<Event>) => void;\n}\n\n// 矢印の生成\ntype CreateArrowFunction = {\n    (points: BeamPoints, options?: ArrowOptions): fabric.Group;\n    (v1: Vector, v2: Vector, options?: ArrowOptions): fabric.Group;\n};\n\nconst defaultColor = 'black';\nconst defaultStrokeWidth = 2;\nconst defaultEdgeSize = 8;\n\nconst defaultLineOptions: fabric.ILineOptions = {\n    stroke: defaultColor,\n    strokeWidth: defaultStrokeWidth,\n    originX: 'center',\n    originY: 'bottom',\n    centeredRotation: false,\n};\nconst defaultEdgeOptions: fabric.ITriangleOptions = {\n    width: defaultEdgeSize,\n    height: defaultEdgeSize,\n    stroke: defaultColor,\n    strokeWidth: 1,\n    fill: defaultColor,\n    originX: 'center',\n    originY: 'center',\n    centeredRotation: true,\n};\n\nconst createArrowByVectors = (\n    v1: Vector,\n    v2: Vector,\n    { arrowWidth, arrowEdgeSize, onRotating, onScaling, onModified, ...options }: ArrowOptions = {}\n): fabric.Group => {\n    // 距離\n    const distance = v1.distance(v2);\n    // 方向\n    const dir = v2.clone().subtract(v1).normalize();\n    const angle = 180 - dir.verticalAngleDeg();\n\n    const line = new fabric.Line([0, 0, 0, distance * -1], {\n        strokeWidth: arrowWidth,\n        ...defaultLineOptions,\n        ...options,\n    });\n\n    const edgeSize = arrowEdgeSize ?? defaultEdgeSize;\n\n    const edge = new fabric.Triangle({\n        top: (edgeSize / 2) * -1,\n        left: 0,\n        angle: -180,\n        ...defaultEdgeOptions,\n        width: edgeSize,\n        height: edgeSize,\n        stroke: options.stroke,\n        fill: options.fill,\n    });\n\n    const arrow = new fabric.Group([line, edge], {\n        ...options,\n        top: v1.y,\n        left: v1.x,\n        originX: 'center',\n        originY: 'bottom',\n        centeredRotation: false,\n        angle,\n    });\n    arrow.setControlsVisibility({\n        bl: false,\n        br: false,\n        mb: false,\n        ml: false,\n        mr: false,\n        mt: true,\n        tl: false,\n        tr: false,\n        mtr: true,\n    });\n\n    return arrow;\n};\n\nconst createArrowByPoints = (points: BeamPoints, options?: ArrowOptions): fabric.Group => {\n    const p1 = new Vector(points[0], points[1]);\n    const p2 = new Vector(points[2], points[3]);\n    return createArrowByVectors(p1, p2, options);\n};\n\n/**\n * 矢印の作成 (始点を中心に回転・伸縮、始点に三角がくる)\n * @param arg1\n * @param arg2\n * @param arg3\n * @returns\n */\nexport const createArrow: CreateArrowFunction = (\n    arg1: BeamPoints | Vector,\n    arg2?: Vector | ArrowOptions,\n    arg3?: ArrowOptions\n): fabric.Group => {\n    if (Array.isArray(arg1)) {\n        return createArrowByPoints(arg1, arg2 as ArrowOptions);\n    } else if (arg2) {\n        return createArrowByVectors(arg1, arg2 as Vector, arg3);\n    }\n    throw new Error('invalid parameters');\n};\n\n/**\n * 梁要素の寸法線、集中荷重、分布荷重の表示・非表示を切り替える\n * @param shape\n * @param forceMap\n * @param trapezoidMap\n * @param visible\n */\nexport const setVisibledToBeamParts = (\n    shape: BeamShape,\n    forceMap: Record<string, ForceShape[]>,\n    trapezoidMap: Record<string, TrapezoidShape[]>,\n    visible = true\n): void => {\n    // 寸法線を非表示とする\n    if (shape.guide) {\n        shape.guide.visible = visible;\n    }\n    // 集中荷重を非表示とする\n    const forces = forceMap[shape.data.id];\n    if (forces) {\n        forces.forEach(({ force }) => {\n            force.visible = visible;\n        });\n    }\n    // 分布荷重を非表示とする\n    const trapezoids = trapezoidMap[shape.data.id];\n    if (trapezoids) {\n        trapezoids.forEach(({ arrows, line, labels, guide }) => {\n            arrows.forEach((arrow) => {\n                arrow.visible = visible;\n            });\n            line.visible = visible;\n            labels.forEach((label) => {\n                label.visible = visible;\n            });\n            if (guide) {\n                guide.visible = visible;\n            }\n        });\n    }\n};\n","import { fabric } from 'fabric';\nimport { Force } from '../../../types/shape';\nimport { lerp, Vector, verticalNormalizeVector } from '../util';\nimport { BeamShape } from './beam';\nimport { createArrow, labelBaseProps, unresponseShapeProps } from './common';\n\nexport type ForceShape = {\n    data: Force;\n    force: fabric.Group;\n    label: fabric.Textbox;\n};\n\n/**\n * 集中荷重の基本の長さ\n */\nconst ForceBaseLength = 30;\nconst ForceColor = 'orange';\n\nconst defaultForceLabelProps: fabric.ITextOptions = {\n    ...unresponseShapeProps,\n    ...labelBaseProps,\n    fill: ForceColor,\n    textAlign: 'left',\n};\n\n/**\n * 集中荷重の作成\n * @param force\n * @param points\n * @param ave\n */\nexport const createForce = (\n    force: Force,\n    points: [number, number, number, number],\n    ave: number,\n    readonly = false,\n    unit = 'kN'\n): ForceShape => {\n    // 梁要素の i端、j端\n    const pi = new Vector(points[0], points[1]);\n    const pj = new Vector(points[2], points[3]);\n    // 集中荷重の始点\n    const head = lerp(pi, pj, force.distanceI);\n    // 集中荷重の方向\n    const dir = verticalNormalizeVector(pi, pj);\n    // 大きさ\n    const ratio = force.force / ave;\n    const forceLength = isNaN(ratio) ? ForceBaseLength : ForceBaseLength * ratio;\n    // 集中荷重の終点\n    const tail = head.clone().add(dir.clone().multiplyScalar(forceLength));\n\n    // 矢印\n    const arrow = createArrow(head, tail, {\n        fill: ForceColor,\n        stroke: ForceColor,\n        name: force.id,\n        data: {\n            type: 'force',\n            ...force,\n        },\n        selectable: !readonly,\n        evented: !readonly,\n    });\n\n    // ラベルの基準位置\n    const beamDir = pj.clone().subtract(pi).normalize();\n    const labelPosition = head.clone().add(beamDir.clone().multiplyScalar(5));\n    const angle = dir.angleDeg();\n\n    const label = new fabric.Textbox(` ${force.force} ${unit}`, {\n        ...defaultForceLabelProps,\n        top: labelPosition.y,\n        left: labelPosition.x,\n        width: Math.max(forceLength, 140),\n        angle,\n        // デフォルトで非表示\n        visible: false,\n    });\n\n    return { data: force, force: arrow, label };\n};\n\n/**\n * 平均値を計算する\n * @param forces\n * @returns\n */\nexport const calcForceAverage = (forces: Force[]): number => {\n    let forceAverage = 0;\n    if (forces.length > 0) {\n        const { force: total } = forces.reduce((prev, current) => {\n            const item: Force = {\n                ...prev,\n                force: prev.force + current.force,\n            };\n            return item;\n        });\n        forceAverage = total / forces.length;\n    }\n\n    return forceAverage;\n};\n\n/**\n * 梁要素に紐づく集中荷重を再作成する\n * @param canvas\n * @param beamShape\n * @param forceMap\n */\nexport const recreateForces = (\n    canvas: fabric.Canvas,\n    beamShape: BeamShape,\n    forceMap: Record<string, ForceShape[]>,\n    forceAverage: number\n): void => {\n    const forces = forceMap[beamShape.data.id];\n    if (forces) {\n        const newForces: ForceShape[] = [];\n        forces.forEach((forceShape) => {\n            const data = forceShape.data;\n\n            // キャンバスから集中荷重を削除\n            canvas.remove(forceShape.force, forceShape.label);\n\n            const fs = createForce(data, beamShape.points, forceAverage);\n            newForces.push(fs);\n            // キャンバスに追加\n            canvas.add(fs.force);\n            canvas.add(fs.label);\n        });\n        forceMap[beamShape.data.id] = newForces;\n    }\n};\n\n/**\n * 集中荷重を更新する\n * @param canvas\n * @param forceShape\n * @param beamShape\n * @param forceAverage\n */\nexport const updateForce = (\n    canvas: fabric.Canvas,\n    data: Force,\n    forceShape: ForceShape,\n    beamShape: BeamShape,\n    forceAverage: number\n): void => {\n    // キャンバスから集中荷重を削除\n    canvas.remove(forceShape.force, forceShape.label);\n    // 集中荷重を再作成\n    const { force, label } = createForce(data, beamShape.points, forceAverage);\n    // ForceShape にセット\n    forceShape.force = force;\n    forceShape.label = label;\n    // キャンバスに追加\n    canvas.add(force, label);\n};\n\n/**\n * 集中荷重の削除\n * (NOTE: 集中荷重の平均値を再計算すること)\n * @param canvas\n * @param beamId\n * @param force\n * @param forceMap\n */\nexport const removeForce = (\n    canvas: fabric.Canvas,\n    force: ForceShape,\n    beamId: string,\n    forceMap: Record<string, ForceShape[]>\n): void => {\n    canvas.remove(force.force, force.label);\n\n    const forces = forceMap[beamId];\n    if (forces) {\n        // 削除対象の集中荷重を除外\n        const list = forces.filter((shape) => shape.data.id !== force.data.id);\n        forceMap[beamId] = list;\n    }\n};\n","import { fabric } from 'fabric';\nimport { v4 as uuid } from 'uuid';\nimport { ForceShape, NodeShape } from '.';\nimport { Beam, Force, isBeam } from '../../../types/shape';\nimport { createBeamGuideLine } from '../factory';\nimport CanvasManager from '../manager';\nimport { BeamPoints } from '../types';\nimport { round, snap, Vector, vY } from '../util';\n\nexport class BeamShape {\n    public data: Beam;\n    public beam: fabric.Line;\n    public guide?: fabric.Group;\n\n    public points: BeamPoints = [0, 0, 0, 0];\n    public direction: Vector = new Vector(0, 0);\n    public length = 1;\n    public angle = 0;\n\n    private manager: CanvasManager;\n    private dragging = false;\n    private _readonly = false;\n\n    private vi = new Vector(0, 0);\n    private vj = new Vector(0, 0);\n\n    // ドラッグ中に関連する節点、梁要素の Shape を保持する\n    // メモリリークを避けるため、ドラッグ完了後にクリアすること\n    private nodeI: NodeShape | undefined;\n    private nodeJ: NodeShape | undefined;\n    private relationBeams: BeamShape[] | undefined;\n\n    constructor(manager: CanvasManager, params: Beam) {\n        this.manager = manager;\n        this.data = params;\n\n        const nodeI = this.manager.nodeMap[params.nodeI];\n        const nodeJ = this.manager.nodeMap[params.nodeJ];\n        this._readonly = this.manager.readonly;\n\n        // 梁要素\n        this.beam = this.create([nodeI.data.x, nodeI.data.y, nodeJ.data.x, nodeJ.data.y], params, {\n            // readonly時はイベントに反応しない\n            selectable: !this.readonly,\n            evented: !this.readonly,\n        });\n\n        // 寸法線\n        this.guide = createBeamGuideLine(this.points);\n        this.guide.visible = false;\n\n        // キャンバスに追加\n        this.manager.canvas.add(this.beam, this.guide);\n\n        // イベント設定\n        this.attachEvents();\n    }\n\n    public get readonly(): boolean {\n        return this._readonly;\n    }\n    public set readonly(value: boolean) {\n        this._readonly = value;\n        // readonly時はイベントに反応しない\n        this.beam.selectable = !value;\n        this.beam.evented = !value;\n    }\n\n    private createBeamByVectors(\n        vi: Vector,\n        vj: Vector,\n        data: Beam,\n        options: fabric.ILineOptions\n    ): fabric.Line {\n        // 方向\n        this.direction = vj.clone().subtract(vi).normalize();\n        // 長さ\n        this.length = vi.distance(vj);\n        // 角度 (Vector では Y軸が上方向なので 上下反転させる)\n        this.angle = 180 - this.direction.verticalAngleDeg();\n\n        const beam = new fabric.Line([0, 0, 0, this.length], {\n            top: vi.y,\n            left: vi.x,\n            angle: this.angle,\n            // 始点を基準に回転させる\n            originX: 'center',\n            originY: 'bottom',\n            centeredRotation: false,\n            // 描画設定\n            stroke: 'black',\n            strokeWidth: 4,\n            ...options,\n            name: data.id,\n            data: {\n                type: 'beam',\n                ...data,\n            },\n        });\n        beam.setControlsVisibility({\n            bl: false,\n            br: false,\n            mb: false,\n            ml: false,\n            mr: false,\n            mt: true,\n            tl: false,\n            tr: false,\n            mtr: true,\n        });\n\n        this.points = [vi.x, vi.y, vj.x, vj.y];\n        this.vi = vi;\n        this.vj = vj;\n\n        return beam;\n    }\n\n    createBeamByPoints(points: BeamPoints, data: Beam, options: fabric.ILineOptions): fabric.Line {\n        const p1 = new Vector(points[0], points[1]);\n        const p2 = new Vector(points[2], points[3]);\n        return this.createBeamByVectors(p1, p2, data, options);\n    }\n\n    create(points: BeamPoints, data: Beam, options?: fabric.ILineOptions): fabric.Line;\n    create(vi: Vector, vj: Vector, data: Beam, options?: fabric.ILineOptions): fabric.Line;\n\n    create(\n        arg1: BeamPoints | Vector,\n        arg2: Vector | Beam,\n        arg3?: Beam | fabric.ILineOptions,\n        arg4?: fabric.ILineOptions\n    ): fabric.Line {\n        if (Array.isArray(arg1) && isBeam(arg2)) {\n            return this.createBeamByPoints(arg1, arg2, arg3 ?? {});\n        } else if (isBeam(arg3)) {\n            return this.createBeamByVectors(arg1 as Vector, arg2 as Vector, arg3, arg4 ?? {});\n        }\n        throw new Error('invalid parameters');\n    }\n\n    /**\n     * 寸法線を更新\n     */\n    private updateGuide() {\n        if (this.guide) {\n            this.manager.canvas.remove(this.guide);\n        }\n        this.guide = createBeamGuideLine(this.points);\n        this.guide.visible = false;\n        this.manager.canvas.add(this.guide);\n    }\n\n    private updateBeamByVectors(vi: Vector, vj: Vector): void {\n        // 方向\n        const direction = vj.clone().subtract(vi).normalize();\n        // 長さ\n        const length = vi.distance(vj);\n        // 角度 (Vector では Y軸が上方向なので 上下反転させる)\n        const angle = 180 - direction.verticalAngleDeg();\n\n        const points: BeamPoints = [vi.x, vi.y, vj.x, vj.y];\n\n        this.beam.scaleX = 1;\n        this.beam.scaleY = 1;\n        // dirty=true を指定していないと、一定の長さ以下の梁要素が描画できない\n        this.beam.dirty = true;\n        this.beam.top = vi.y;\n        this.beam.left = vi.x;\n        this.beam.height = length;\n        this.beam.rotate(angle);\n\n        // プロパティを更新\n        this.direction = direction;\n        this.length = length;\n        this.angle = angle;\n        this.points = points;\n        this.vi = vi;\n        this.vj = vj;\n\n        // 寸法線を更新\n        this.updateGuide();\n    }\n\n    private updateBeamByPoints(points: BeamPoints): void {\n        const p1 = new Vector(points[0], points[1]);\n        const p2 = new Vector(points[2], points[3]);\n        this.updateBeamByVectors(p1, p2);\n    }\n\n    update(): void;\n    update(points: BeamPoints): void;\n    update(vi: Vector, vj: Vector): void;\n\n    public update(arg1?: BeamPoints | Vector, arg2?: Vector): void {\n        if (Array.isArray(arg1)) {\n            this.updateBeamByPoints(arg1);\n            return;\n        } else if (arg1 && arg2) {\n            this.updateBeamByVectors(arg1, arg2);\n            return;\n        } else {\n            this.updateBeamByPoints(this.points);\n        }\n\n        throw new Error('invalid parameters');\n    }\n\n    /**\n     * 梁要素を削除する\n     * (NOTE: removeBeam 後、集中荷重と分布荷重の平均値を更新すること)\n     */\n    public remove(): void {\n        const { canvas, forceMap, trapezoidMap, beamMap, nodeBeamMap } = this.manager;\n        const beamId = this.data.id;\n\n        // 集中荷重を削除\n        const forces = forceMap[beamId];\n        if (forces) {\n            forces.forEach((shape) => {\n                shape.remove();\n            });\n            delete forceMap[beamId];\n        }\n        // 分布荷重を削除\n        const trapezoids = trapezoidMap[beamId];\n        if (trapezoids) {\n            trapezoids.forEach((shape) => {\n                shape.remove();\n            });\n            delete trapezoidMap[beamId];\n        }\n\n        // nodeBeamMap から梁要素を削除\n        [this.data.nodeI, this.data.nodeJ].forEach((nodeId) => {\n            const beams = nodeBeamMap[nodeId];\n            if (beams) {\n                // 削除対象の梁要素を除外\n                const list = beams.filter((shape) => shape.data.id !== beamId);\n                nodeBeamMap[nodeId] = list;\n            }\n        });\n\n        // 梁要素を削除\n        canvas.remove(this.beam);\n        if (this.guide) {\n            canvas.remove(this.guide);\n        }\n        delete beamMap[beamId];\n    }\n\n    /**\n     * 寸法線、集中荷重、分布荷重の表示・非表示を切り替える\n     * @param visible\n     */\n    public setVisibleParts(visible = true): void {\n        const { forceMap, trapezoidMap } = this.manager;\n        if (this.guide) {\n            this.guide.visible = visible;\n        }\n\n        // 集中荷重\n        const forces = forceMap[this.data.id];\n        if (forces) {\n            forces.forEach((shape) => {\n                shape.visible = visible;\n            });\n        }\n\n        // 分布荷重\n        const trapezoids = trapezoidMap[this.data.id];\n        if (trapezoids) {\n            trapezoids.forEach((shape) => {\n                shape.visible = visible;\n            });\n        }\n    }\n\n    /**\n     * 寸法線、集中荷重、分布荷重 を更新する\n     */\n    public updateParts(): void {\n        const { forceMap, trapezoidMap } = this.manager;\n        // 寸法線の更新\n        this.updateGuide();\n        // 集中荷重\n        const forces = forceMap[this.data.id];\n        if (forces) {\n            forces.forEach((shape) => {\n                shape.update();\n            });\n        }\n        // 分布荷重\n        const trapezoids = trapezoidMap[this.data.id];\n        if (trapezoids) {\n            trapezoids.forEach((shape) => {\n                shape.update();\n            });\n        }\n    }\n\n    /**\n     * i端の位置と長さ、角度からj端の位置を計算する\n     * @returns\n     */\n    private calcPoints(snapping = false): BeamPoints {\n        // i端の位置\n        let { top: iy = 0, left: ix = 0 } = this.beam;\n\n        if (snapping) {\n            [ix, iy] = snap([ix, iy], this.manager.snapSize);\n        }\n\n        this.vi.x = ix;\n        this.vi.y = iy;\n        // j端の位置を計算\n        this.vj.copy(this.vi);\n        this.vj.add(this.direction.clone().multiplyScalar(this.length));\n\n        return [this.vi.x, this.vi.y, this.vj.x, this.vj.y];\n    }\n\n    /**\n     * 指定座標を元に i端からの距離比を計算\n     * @param point\n     * @returns\n     */\n    public calcRatio(point: Vector): number {\n        // i端からクリック位置までの距離\n        const distance = this.vi.distance(point);\n        // i端からクリック位置の方向\n        const dir = point.clone().subtract(this.vi).normalize();\n        // クリック方向の角度\n        const angle = 180 - dir.verticalAngleDeg();\n        // クリック方向と梁要素のなす角度\n        const deg = this.angle - angle;\n        // ラジアンに変換\n        const rad = deg * (Math.PI / 180);\n        // 梁要素上の長さ\n        const length = distance * Math.cos(rad);\n        // 比率に変換\n        let ratio = round(length / this.length, 2);\n\n        // 0 〜 1 の範囲に修正\n        if (ratio < 0) {\n            ratio = 0;\n        }\n        if (ratio > 1) {\n            ratio = 1;\n        }\n\n        return ratio;\n    }\n\n    /**\n     * ドラッグ終了時の共通処理\n     */\n    private completeDrag() {\n        if (this.nodeI && this.nodeJ) {\n            const nodeI = this.nodeI;\n            const nodeJ = this.nodeJ;\n            const { nodeMap, nodeBeamMap, beamMap } = this.manager;\n            const [ix, iy, jx, jy] = this.points;\n\n            // 置き換える節点 (key: 削除される節点ID、value: 置き換える節点)\n            const replaceNodes: Record<string, NodeShape> = {};\n            // 削除する梁要素\n            const removingBeams: BeamShape[] = [];\n            // 更新された梁要素\n            const modifiedBeams: BeamShape[] = [this];\n\n            // 節点IDを配列にしておく\n            const nodeIds = [nodeI.data.id, nodeJ.data.id];\n\n            // 絶対に大丈夫だけど念の為に空配列を準備しておく\n            nodeIds.forEach((nodeId) => {\n                if (typeof nodeBeamMap[nodeId] === 'undefined') {\n                    nodeBeamMap[nodeId] = [];\n                }\n            });\n\n            // 梁要素をドラッグした結果、i端あるいはj端の節点が\n            // 別の節点と同一座標になった場合、同一座標の節点をドラッグ中の節点に置換する\n            Object.values(nodeMap).forEach((nodeShape) => {\n                // ドラッグした梁要素の i端/j端 は対象外\n                if (nodeIds.includes(nodeShape.data.id)) {\n                    return;\n                }\n                if (nodeShape.data.x === ix && nodeShape.data.y === iy) {\n                    // i端の節点と置き換える\n                    replaceNodes[nodeShape.data.id] = nodeI;\n                } else if (nodeShape.data.x === jx && nodeShape.data.y === jy) {\n                    // j端の節点と置き換える\n                    replaceNodes[nodeShape.data.id] = nodeJ;\n                }\n            });\n\n            // 梁要素の節点を置換する\n            Object.values(beamMap).forEach((beamShape) => {\n                // ドラッグした梁要素は除外\n                if (beamShape.data.id === this.data.id) {\n                    return;\n                }\n\n                // i端あるいはj端の同一座標の節点を置き換える\n                let replacedI = false;\n                let replacedJ = false;\n                if (replaceNodes[beamShape.data.nodeI]) {\n                    replacedI = true;\n                    beamShape.data.nodeI = replaceNodes[beamShape.data.nodeI].data.id;\n                }\n                if (replaceNodes[beamShape.data.nodeJ]) {\n                    replacedJ = true;\n                    beamShape.data.nodeJ = replaceNodes[beamShape.data.nodeJ].data.id;\n                }\n\n                if (replacedI && replacedJ) {\n                    // i端とj端の両方の節点を置換した\n                    // → ドラッグした梁要素と同じ位置にある梁要素なので削除する\n                    removingBeams.push(beamShape);\n                    return;\n                }\n\n                const points = beamShape.points;\n                let modified = false;\n                // i端あるいはj端がドラッグした梁要素と一致する\n                // → 再描画する\n                if (beamShape.data.nodeI === nodeI.data.id) {\n                    points[0] = ix;\n                    points[1] = iy;\n                    modified = true;\n                }\n                if (beamShape.data.nodeI === nodeJ.data.id) {\n                    points[0] = jx;\n                    points[1] = jy;\n                    modified = true;\n                }\n                if (beamShape.data.nodeJ === nodeI.data.id) {\n                    points[2] = ix;\n                    points[3] = iy;\n                    modified = true;\n                }\n                if (beamShape.data.nodeJ === nodeJ.data.id) {\n                    points[2] = jx;\n                    points[3] = jy;\n                    modified = true;\n                }\n                if (modified) {\n                    beamShape.update(points);\n\n                    // 更新した結果、長さが 0 になった梁要素を削除する\n                    if (beamShape.length === 0) {\n                        removingBeams.push(beamShape);\n                    } else {\n                        // 更新対象としてマーク\n                        modifiedBeams.push(beamShape);\n                    }\n                }\n            }); // end 梁要素の節点を置換\n\n            if (removingBeams.length > 0) {\n                // 梁要素の削除処理\n                removingBeams.forEach((beam) => {\n                    beam.remove();\n                });\n\n                // 集中荷重の平均値を更新\n                this.manager.calcForceAverage();\n                // 分布荷重の平均値を更新\n                this.manager.calcTrapezoidAverage();\n            }\n\n            // 節点の削除処理\n            Object.entries(replaceNodes).forEach(([removedNodeId, nodeShape]) => {\n                // nodeBeamMap の付け替え\n                const beams = nodeBeamMap[removedNodeId];\n                if (beams) {\n                    const list = nodeBeamMap[nodeShape.data.id] ?? [];\n                    beams.forEach((beamShape) => {\n                        if (list.some((beam) => beam.data.id !== beamShape.data.id)) {\n                            list.push(beamShape);\n                        }\n                    });\n                    nodeBeamMap[nodeShape.data.id] = list;\n                }\n\n                const node = nodeMap[removedNodeId];\n                if (node) {\n                    node.remove();\n                }\n            });\n\n            // 更新した梁要素について、集中荷重・分布荷重・寸法線を再生成する\n            modifiedBeams.forEach((beam) => {\n                beam.updateParts();\n            });\n\n            // 全体の寸法線を更新する\n            this.manager.updateGlobalGuidelines();\n        }\n        // ドラッグ終了\n        this.nodeI = undefined;\n        this.nodeJ = undefined;\n        this.relationBeams = undefined;\n        this.dragging = false;\n    } // end onDragEnd\n\n    // イベントハンドラ\n    private attachEvents() {\n        // 選択\n        this.beam.on('selected', this.onSelect.bind(this));\n        this.beam.on('deselected', this.onDeselect.bind(this));\n        // クリック\n        this.beam.on('mousedown', this.onMouseDown.bind(this));\n        this.beam.on('mousedown:before', this.onMouseDownBefore.bind(this));\n        // ドラッグ\n        this.beam.on('moving', this.onMoving.bind(this));\n        this.beam.on('moved', this.onMoved.bind(this));\n        // 回転\n        this.beam.on('rotating', this.onRotating.bind(this));\n        this.beam.on('rotated', this.onRotated.bind(this));\n        // 伸縮\n        this.beam.on('scaling', this.onScaling.bind(this));\n        this.beam.on('scaled', this.onScaled.bind(this));\n    }\n\n    private onSelect(event: fabric.IEvent<Event>): void {\n        if (this.guide) {\n            this.guide.visible = true;\n        }\n    }\n    private onDeselect(event: fabric.IEvent<Event>): void {\n        if (this.guide) {\n            this.guide.visible = false;\n        }\n    }\n\n    /**\n     * 分布荷重追加モード時、梁要素のクリック前に描画可能にする\n     */\n    private onMouseDownBefore(): void {\n        if (this.manager.tool === 'trapezoid') {\n            // 分布荷重の描画開始\n            this.manager.currentBeam = this.data.id;\n            this.manager.canvas.isDrawingMode = true;\n        }\n    }\n\n    private onMouseDown(event: fabric.IEvent<Event>): void {\n        if (event.absolutePointer) {\n            // クリック位置\n            const point = new Vector(event.absolutePointer.x, event.absolutePointer.y);\n            if (this.manager.tool === 'force') {\n                // クリックした位置に集中荷重を追加する\n                // i端からの距離 (比率)\n                const ratio = this.calcRatio(point);\n\n                // 集中荷重を作成\n                const forceId = uuid();\n                const force: Force = {\n                    id: forceId,\n                    name: forceId,\n                    beam: this.data.id,\n                    force: 10, // 初期値固定\n                    distanceI: ratio,\n                };\n                const shape = new ForceShape(this.manager, force);\n                if (typeof this.manager.forceMap[this.data.id] === 'undefined') {\n                    this.manager.forceMap[this.data.id] = [];\n                }\n                this.manager.forceMap[this.data.id].push(shape);\n\n                // 集中荷重の平均値を更新\n                this.manager.calcForceAverage();\n            } else if (this.manager.tool === 'delete') {\n                // 梁要素を削除\n                this.remove();\n                // 梁要素に紐付かない節点を削除\n                this.manager.removeUnconnectedNodes();\n                // 寸法線を更新\n                this.manager.updateGlobalGuidelines();\n                // 集中荷重、分布荷重の平均値を再計算\n                this.manager.calcForceAverage();\n                this.manager.calcTrapezoidAverage();\n            }\n        }\n    }\n\n    /**\n     * 梁要素のドラッグ\n     * @param event\n     */\n    private onMoving(event: fabric.IEvent<Event>): void {\n        if (this.manager.tool === 'select') {\n            if (!this.dragging) {\n                // 寸法線・集中荷重・分布荷重を非表示とする\n                this.setVisibleParts(false);\n\n                this.nodeI = this.manager.nodeMap[this.data.nodeI];\n                this.nodeJ = this.manager.nodeMap[this.data.nodeJ];\n                this.relationBeams = [];\n\n                const nodes = [this.nodeI, this.nodeJ];\n                nodes.forEach((node) => {\n                    // i端、j端の pin を非表示にする\n                    if (node && node.pin) {\n                        node.pin.visible = false;\n                    }\n\n                    // i端/j端に接続する梁要素\n                    const beams = this.manager.nodeBeamMap[node.data.id];\n                    beams.forEach((beam) => {\n                        if (beam.data.id !== this.data.id) {\n                            // 寸法線・集中荷重・分布荷重を非表示とする\n                            beam.setVisibleParts(false);\n                            this.relationBeams?.push(beam);\n                        }\n                    });\n                });\n            }\n\n            // 位置を計算\n            const [ix, iy, jx, jy] = this.calcPoints();\n\n            if (this.nodeI && this.nodeJ) {\n                // 節点を移動\n                this.nodeI.update(ix, iy, false);\n                this.nodeJ.update(jx, jy, false);\n\n                // 節点に紐づく梁要素を更新\n                this.relationBeams?.forEach((beamShape) => {\n                    const points = beamShape.points;\n                    if (beamShape.data.nodeI === this.nodeI?.data.id) {\n                        points[0] = ix;\n                        points[1] = iy;\n                    }\n                    if (beamShape.data.nodeI === this.nodeJ?.data.id) {\n                        points[0] = jx;\n                        points[1] = jy;\n                    }\n                    if (beamShape.data.nodeJ === this.nodeI?.data.id) {\n                        points[2] = ix;\n                        points[3] = iy;\n                    }\n                    if (beamShape.data.nodeJ === this.nodeJ?.data.id) {\n                        points[2] = jx;\n                        points[3] = jy;\n                    }\n                    beamShape.update(points);\n                });\n            }\n\n            this.dragging = true;\n        }\n    } // onMoving\n\n    private onMoved(event: fabric.IEvent<Event>): void {\n        if (this.manager.tool === 'select' && this.dragging && this.nodeI && this.nodeJ) {\n            // 位置を取得\n            const [ix, iy, jx, jy] = this.calcPoints(true);\n\n            // 梁要素を更新\n            this.update([ix, iy, jx, jy]);\n            // 節点の更新\n            this.nodeI?.update(ix, iy);\n            this.nodeJ?.update(jx, jy);\n\n            // ドラッグ完了\n            this.completeDrag();\n        }\n    } // end onMoved\n\n    /**\n     * rotate もドラッグの一形態とみなす\n     * @param event\n     */\n    private onRotating(event: fabric.IEvent<Event>): void {\n        if (this.manager.tool === 'select') {\n            if (!this.dragging) {\n                // 寸法線・集中荷重・分布荷重を非表示とする\n                this.setVisibleParts(false);\n\n                this.nodeI = this.manager.nodeMap[this.data.nodeI];\n                this.nodeJ = this.manager.nodeMap[this.data.nodeJ];\n                this.relationBeams = [];\n\n                // j端の pin を非表示にする\n                if (this.nodeJ.pin) {\n                    this.nodeJ.pin.visible = false;\n                }\n\n                // j端に接続する梁要素\n                const beams = this.manager.nodeBeamMap[this.nodeJ.data.id];\n                beams.forEach((beam) => {\n                    if (beam.data.id !== this.data.id) {\n                        // 寸法線・集中荷重・分布荷重を非表示とする\n                        beam.setVisibleParts(false);\n                        this.relationBeams?.push(beam);\n                    }\n                });\n            }\n\n            // j端の位置を取得\n            this.vj.copy(this.vi);\n            this.vj.add(\n                vY\n                    .clone()\n                    .invert()\n                    .multiplyScalar(this.length)\n                    .rotateDeg(this.beam.angle ?? 0)\n            );\n            const [jx, jy] = [this.vj.x, this.vj.y];\n            this.nodeJ?.update(jx, jy);\n\n            // 節点に紐づく梁要素の更新\n            this.relationBeams?.forEach((beamShape) => {\n                const points = beamShape.points;\n                if (beamShape.data.nodeI === this.nodeJ?.data.id) {\n                    points[0] = jx;\n                    points[1] = jy;\n                }\n                if (beamShape.data.nodeJ === this.nodeJ?.data.id) {\n                    points[2] = jx;\n                    points[3] = jy;\n                }\n                beamShape.update(points);\n            });\n\n            this.dragging = true;\n        }\n    } // end onRotating\n\n    private onRotated(event: fabric.IEvent<Event>): void {\n        if (this.manager.tool === 'select' && this.dragging) {\n            // j端の位置を取得\n            this.vj.copy(this.vi);\n            this.vj.add(\n                vY\n                    .clone()\n                    .invert()\n                    .multiplyScalar(this.length)\n                    .rotateDeg(this.beam.angle ?? 0)\n            );\n            const [jx, jy] = snap([this.vj.x, this.vj.y], this.manager.snapSize);\n            // j端の更新\n            this.vj.x = jx;\n            this.vj.y = jy;\n            this.nodeJ?.update(jx, jy);\n\n            // 梁要素の更新\n            this.update([this.vi.x, this.vi.y, jx, jy]);\n\n            // ドラッグ完了\n            this.completeDrag();\n        }\n    } // end onRotated\n\n    private onScaling(event: fabric.IEvent<Event>): void {\n        if (this.manager.tool === 'select') {\n            if (!this.dragging) {\n                // 寸法線・集中荷重・分布荷重を非表示とする\n                this.setVisibleParts(false);\n\n                this.nodeI = this.manager.nodeMap[this.data.nodeI];\n                this.nodeJ = this.manager.nodeMap[this.data.nodeJ];\n                this.relationBeams = [];\n\n                // j端の pin を非表示にする\n                if (this.nodeJ.pin) {\n                    this.nodeJ.pin.visible = false;\n                }\n\n                // j端に接続する梁要素\n                const beams = this.manager.nodeBeamMap[this.nodeJ.data.id];\n                beams.forEach((beam) => {\n                    if (beam.data.id !== this.data.id) {\n                        // 寸法線・集中荷重・分布荷重を非表示とする\n                        beam.setVisibleParts(false);\n                        this.relationBeams?.push(beam);\n                    }\n                });\n            }\n\n            // j端の位置を更新\n            const scale = this.beam.scaleY ?? 1;\n            const angle = this.beam.angle ?? 0;\n            this.vj.copy(this.vi);\n            this.vj.add(\n                vY\n                    .clone()\n                    .invert()\n                    .multiplyScalar(this.length * scale)\n                    .rotateDeg(angle)\n            );\n            const [jx, jy] = [this.vj.x, this.vj.y];\n            this.nodeJ?.update(jx, jy);\n\n            // 節点に紐づく梁要素の更新\n            this.relationBeams?.forEach((beamShape) => {\n                const points = beamShape.points;\n                if (beamShape.data.nodeI === this.nodeJ?.data.id) {\n                    points[0] = jx;\n                    points[1] = jy;\n                }\n                if (beamShape.data.nodeJ === this.nodeJ?.data.id) {\n                    points[2] = jx;\n                    points[3] = jy;\n                }\n                beamShape.update(points);\n            });\n\n            this.dragging = true;\n        }\n    } // end onScaling\n\n    private onScaled(event: fabric.IEvent<Event>): void {\n        if (this.manager.tool === 'select' && this.dragging) {\n            // j端の位置を取得\n            const scale = this.beam.scaleY ?? 1;\n            const angle = this.beam.angle ?? 0;\n            this.vj.copy(this.vi);\n            this.vj.add(\n                vY\n                    .clone()\n                    .invert()\n                    .multiplyScalar(this.length * scale)\n                    .rotateDeg(angle)\n            );\n            const [jx, jy] = snap([this.vj.x, this.vj.y], this.manager.snapSize);\n            // j端の更新\n            this.vj.x = jx;\n            this.vj.y = jy;\n            this.nodeJ?.update(jx, jy);\n\n            // 梁要素の更新\n            this.update([this.vi.x, this.vi.y, jx, jy]);\n\n            // ドラッグ完了\n            this.completeDrag();\n        }\n    }\n}\n","import { fabric } from 'fabric';\nimport { Force } from '../../../types/shape';\nimport { createArrow, labelBaseProps, unresponseShapeProps } from '../factory';\nimport CanvasManager from '../manager';\nimport { compareCoords, lerp, round, roundDegree, snapAngle, Vector } from '../util';\nimport { BeamShape } from './BeamShape';\n\n/**\n * 集中荷重の基本の長さ\n */\nconst ForceBaseLength = 30;\nconst ForceColor = 'orange';\n\nconst defaultForceLabelProps: fabric.ITextOptions = {\n    ...unresponseShapeProps,\n    ...labelBaseProps,\n    fill: ForceColor,\n    textAlign: 'left',\n};\n\nexport class ForceShape {\n    public data: Force;\n    public force: fabric.Group;\n    public label: fabric.Textbox;\n\n    private manager: CanvasManager;\n    private longpressTimer: NodeJS.Timer | undefined;\n    private dragging = false;\n    private _readonly = false;\n\n    private head: Vector = new Vector(0, 0);\n    // private tail: Vector = new Vector(0, 0);\n    private direction: Vector = new Vector(0, 1);\n    private length = 0;\n\n    // ドラッグ中に梁要素の Shape を保持する\n    // メモリリークを避けるため、ドラッグ完了後にクリアすること\n    private beam: BeamShape | undefined;\n    private vi = new Vector(0, 0);\n    private vj = new Vector(0, 0);\n\n    // rotate前の global な angle\n    private originalAngle = 0;\n    // ドラッグ中の位置\n    private position = new Vector(0, 0);\n    // ドラッグ可能な範囲\n    private draggableMin = Number.MIN_SAFE_INTEGER;\n    private draggableMax = Number.MAX_SAFE_INTEGER;\n\n    constructor(manager: CanvasManager, params: Force) {\n        this.manager = manager;\n        this.data = params;\n\n        this._readonly = this.manager.readonly;\n\n        // 矢印、ラベル生成\n        [this.force, this.label] = this.create();\n        this.manager.canvas.add(this.force, this.label);\n\n        // イベント割当\n        this.attachEvent();\n    }\n\n    public get readonly(): boolean {\n        return this._readonly;\n    }\n    public set readonly(value: boolean) {\n        this._readonly = value;\n        // readonly時はイベントに反応しない\n        this.force.selectable = !value;\n        this.force.evented = !value;\n    }\n\n    public get visible(): boolean {\n        return this.force.visible ?? true;\n    }\n\n    public set visible(value: boolean) {\n        this.force.visible = value;\n        this.label.visible = value;\n    }\n\n    /**\n     * 矢印の長さから集中荷重の大きさを計算\n     * @returns\n     */\n    private calcForce(): number {\n        if (this.manager.forceAverage === 0) {\n            return 10;\n        }\n\n        return Math.round((this.length / ForceBaseLength) * this.manager.forceAverage);\n    }\n\n    /**\n     * 集中荷重の大きさと平均値から矢印の長さを計算\n     * @returns\n     */\n    private calcLength(): number {\n        if (this.manager.forceAverage === 0) {\n            return ForceBaseLength;\n        }\n        const ratio = this.data.force / this.manager.forceAverage;\n        return ForceBaseLength * ratio;\n    }\n\n    private create(): [fabric.Group, fabric.Textbox] {\n        const { id, beam, distanceI, angle = 0 } = this.data;\n        // 集中荷重の対象梁要素\n        const beamShape = this.manager.beamMap[beam];\n        const { points } = beamShape;\n\n        // 梁要素の i端、j端\n        const pi = new Vector(points[0], points[1]);\n        const pj = new Vector(points[2], points[3]);\n        // 集中荷重の始点\n        const head = lerp(pi, pj, distanceI);\n        // 集中荷重の方向\n        const dir = beamShape.direction\n            .clone()\n            .rotateDeg(angle - 90)\n            .normalize();\n        // 大きさ\n        const forceLength = this.calcLength();\n        // 集中荷重の終点\n        const tail = head.clone().add(dir.clone().multiplyScalar(forceLength));\n\n        // 矢印\n        const arrow = createArrow(head, tail, {\n            fill: ForceColor,\n            stroke: ForceColor,\n            name: id,\n            data: {\n                ...this.data,\n                type: 'force',\n            },\n            selectable: !this.readonly,\n            evented: !this.readonly,\n        });\n\n        // ラベルの基準位置\n        const labelPosition = head.clone().add(beamShape.direction.clone().multiplyScalar(5));\n        const labelAngle = dir.angleDeg();\n\n        const label = new fabric.Textbox(` ${this.data.force} kN`, {\n            ...defaultForceLabelProps,\n            top: labelPosition.y,\n            left: labelPosition.x,\n            width: Math.max(forceLength, 140),\n            angle: labelAngle,\n            // デフォルトで非表示\n            visible: false,\n        });\n\n        // ドラッグ時に使用するので保持しておく\n        this.head.copy(head);\n        // this.tail.copy(tail);\n        this.direction.copy(dir);\n        this.length = forceLength;\n\n        return [arrow, label];\n    }\n\n    public update(params?: Force): void {\n        if (params) {\n            this.data = params;\n        }\n\n        // ラベルが表示されていた場合、集中荷重が選択されていたとみなす\n        const selected = this.label.visible ?? false;\n\n        // キャンバスから集中荷重を削除\n        this.manager.canvas.remove(this.force, this.label);\n        // 集中荷重を再作成\n        [this.force, this.label] = this.create();\n        this.manager.canvas.add(this.force, this.label);\n\n        // イベント割当\n        this.attachEvent();\n\n        if (selected) {\n            // 選択状態を復元する\n            this.select();\n        }\n    }\n\n    /**\n     * 集中荷重の削除\n     * (NOTE: 集中荷重の平均値を再計算すること)\n     */\n    public remove(): void {\n        // キャンバスから集中荷重を削除\n        this.manager.canvas.remove(this.force, this.label);\n\n        const forces = this.manager.forceMap[this.data.beam];\n        if (forces) {\n            // 自身を配列から除去\n            const list = forces.filter((shape) => shape.data.id !== this.data.id);\n            this.manager.forceMap[this.data.beam] = list;\n        }\n    }\n\n    /**\n     * 選択\n     */\n    public select(): void {\n        this.manager.canvas.setActiveObject(this.force);\n    }\n\n    // イベントハンドラ\n\n    private attachEvent() {\n        this.force.on('selected', this.onSelected.bind(this));\n        this.force.on('deselected', this.onDeselected.bind(this));\n        // クリック・長押し\n        this.force.on('mousedown', this.onMouseDown.bind(this));\n        this.force.on('mouseup', this.onMouseUp.bind(this));\n        this.force.on('mousedblclick', this.onDblClick.bind(this));\n        // ドラッグ\n        this.force.on('moving', this.onMoving.bind(this));\n        this.force.on('moved', this.onMoved.bind(this));\n        // 回転\n        this.force.on('rotating', this.onRotating.bind(this));\n        this.force.on('rotated', this.onRotated.bind(this));\n        // 伸縮\n        this.force.on('scaling', this.onScaling.bind(this));\n        this.force.on('scaled', this.onScaled.bind(this));\n    }\n\n    private onSelected(): void {\n        this.label.visible = true;\n    }\n\n    private onDeselected(): void {\n        this.label.visible = false;\n    }\n\n    private onMouseDown(event: fabric.IEvent<Event>): void {\n        if (this.readonly) {\n            // 読み取り専用時は何もしない\n            return;\n        }\n\n        if (this.manager.tool === 'delete') {\n            this.remove();\n            this.manager.calcForceAverage();\n            return;\n        }\n\n        if (['select', 'force'].includes(this.manager.tool) && event.target) {\n            // すでに長押しを実行中ならタイマーキャンセル\n            if (this.longpressTimer) {\n                clearTimeout(this.longpressTimer);\n                this.longpressTimer = undefined;\n            }\n\n            const shape = this.force;\n            // 長押し前の現在位置を保持する\n            const { top: beforeTop, left: beforeLeft } = shape.getBoundingRect(true, true);\n\n            // 長押し判定\n            this.longpressTimer = setTimeout(() => {\n                // 長押し後の現在位置\n                const { top: afterTop, left: afterLeft } = shape.getBoundingRect(true, true);\n                // 位置が変わっていなければ longpress とする\n                if (compareCoords([beforeLeft, beforeTop], [afterLeft, afterTop])) {\n                    // ダイアログの表示\n                    this.manager.openForceDialog(event, this);\n                }\n                this.longpressTimer = undefined;\n            }, CanvasManager.LongpressInterval);\n        }\n    } // end onMouseDown\n\n    private onMouseUp(event: fabric.IEvent<Event>): void {\n        if (this.longpressTimer) {\n            clearTimeout(this.longpressTimer);\n            this.longpressTimer = undefined;\n        }\n    }\n\n    private onDblClick(event: fabric.IEvent<Event>): void {\n        if (!this.readonly) {\n            // ダイアログの表示\n            this.manager.openForceDialog(event, this);\n        }\n    }\n\n    private onRotating(event: fabric.IEvent<Event>): void {\n        if (['select', 'force'].includes(this.manager.tool)) {\n            if (!this.dragging) {\n                // ラベルを非表示にする\n                this.label.visible = false;\n                // 現在の角度を保持\n                this.originalAngle = this.force.angle ?? 0;\n            }\n\n            this.dragging = true;\n        }\n    }\n\n    private onRotated(event: fabric.IEvent<Event>): void {\n        const currentAngle = this.force.angle ?? 0;\n\n        let deg = 0;\n        if (this.originalAngle === currentAngle) {\n            return;\n        } else if (this.originalAngle < currentAngle) {\n            deg = currentAngle - this.originalAngle;\n        } else if (this.originalAngle > currentAngle) {\n            deg = 360 - this.originalAngle + currentAngle;\n        }\n        // 0 <= deg < 360 に変換\n        deg = roundDegree(deg);\n        // 5° にスナップする\n        deg = snapAngle(deg, 5);\n\n        let angle = this.originalAngle + deg;\n        angle = roundDegree(angle);\n\n        // 矢印、ラベルを回す\n        this.force.angle = angle;\n        this.label.angle = angle - 90;\n        this.label.visible = true;\n\n        // 角度を保持\n        let value = (this.data.angle ?? 0) + deg;\n        value = roundDegree(value);\n        this.data.angle = value;\n\n        this.dragging = false;\n    }\n\n    private onScaling(event: fabric.IEvent<Event>): void {\n        if (['select', 'force'].includes(this.manager.tool)) {\n            this.dragging = true;\n        }\n    }\n\n    private onScaled(event: fabric.IEvent<Event>): void {\n        if (this.dragging) {\n            const scale = this.force.scaleY ?? 1;\n            const length = this.length * scale;\n\n            // 長さから集中荷重の大きさを計算\n            this.length = length;\n            const f = this.calcForce();\n            this.data.force = f;\n\n            // 矢印を作成しなおす\n            this.update();\n\n            // 選択\n            this.select();\n        }\n        this.dragging = false;\n    }\n\n    private calcMovedPosition() {\n        if (this.beam) {\n            // ドラッグ位置\n            this.position.x = this.force.left ?? 0;\n            this.position.y = this.force.top ?? 0;\n\n            // 元の位置から現在位置までの長さ\n            const dragDis = this.head.distance(this.position);\n            // ドラッグの方向\n            const dragDir = this.position.clone().subtract(this.head).normalize();\n            // ドラッグの角度\n            const angle = 180 - dragDir.verticalAngleDeg();\n            // ドラッグ方向と梁要素のなす角度\n            const deg = this.beam.angle - angle;\n            const rad = (deg * Math.PI) / 180;\n            // ドラッグされた長さを梁要素上の長さに変換\n            let dist = dragDis * Math.cos(rad);\n\n            if (this.draggableMin > dist) {\n                dist = this.draggableMin;\n            } else if (this.draggableMax < dist) {\n                dist = this.draggableMax;\n            }\n\n            // 集中荷重の位置\n            this.position.copy(this.head).add(this.beam.direction.clone().multiplyScalar(dist));\n        }\n    }\n\n    private onMoving(event: fabric.IEvent<Event>): void {\n        if (['select', 'force'].includes(this.manager.tool)) {\n            if (!this.dragging) {\n                // ラベルを非表示\n                this.label.visible = false;\n                // 対象の梁要素を取得\n                this.beam = this.manager.beamMap[this.data.beam];\n\n                // ドラッグ可能範囲を計算\n                [this.vi.x, this.vi.y] = [this.beam.points[0], this.beam.points[1]];\n                [this.vj.x, this.vj.y] = [this.beam.points[2], this.beam.points[3]];\n\n                this.draggableMin = this.vi.distance(this.head) * -1;\n                this.draggableMax = this.vj.distance(this.head);\n\n                // 初期位置を初期化\n                this.position.copy(this.head);\n\n                this.dragging = true;\n            }\n\n            // 位置の計算\n            this.calcMovedPosition();\n            // 集中荷重を移動\n            this.force.left = this.position.x;\n            this.force.top = this.position.y;\n        }\n    }\n\n    private onMoved(event: fabric.IEvent<Event>): void {\n        if (this.beam) {\n            // ドラッグ位置を計算\n            this.calcMovedPosition();\n            // i端からの距離を更新\n            const distI = this.vi.distance(this.position);\n            this.data.distanceI = round(distI / this.beam.length, 2);\n\n            // 位置を再計算\n            this.head.copy(\n                this.vi\n                    .clone()\n                    .add(\n                        this.beam.direction\n                            .clone()\n                            .multiplyScalar(this.beam.length * this.data.distanceI)\n                    )\n            );\n            this.force.left = this.head.x;\n            this.force.top = this.head.y;\n\n            // ラベル位置を更新\n            this.label.left = this.head.x;\n            this.label.top = this.head.y;\n            this.label.visible = true;\n        }\n        // ドラッグ終了\n        this.beam = undefined;\n        this.draggableMin = Number.MIN_SAFE_INTEGER;\n        this.draggableMax = Number.MAX_SAFE_INTEGER;\n        this.dragging = false;\n    }\n}\n","import { fabric } from 'fabric';\nimport { isNode, Node, NodePinType } from '../../../types/shape';\nimport CanvasManager from '../manager';\nimport { compareCoords, snap } from '../util';\nimport { BeamShape } from './BeamShape';\n\nconst Pins: Readonly<Record<NodePinType, string>> = {\n    free: '/assets/images/pins/pin_1.svg', // とりあえずダミーで指定\n    pin: '/assets/images/pins/pin_1.svg',\n    pinX: '/assets/images/pins/pin_2.svg',\n    pinZ: '/assets/images/pins/pin_2.svg',\n    fixX: '/assets/images/pins/pin_3.svg',\n    fix: '/assets/images/pins/pin_4.svg',\n};\nconst PinSize = 24;\nconst NodeRadius = 5;\n\nexport class NodeShape {\n    public data: Node;\n    public node: fabric.Circle;\n    public pin: fabric.Object | undefined;\n\n    private manager: CanvasManager;\n    private longpressTimer: NodeJS.Timer | undefined;\n    private dragging = false;\n    private _readonly = false;\n\n    constructor(manager: CanvasManager, params: Node) {\n        this.manager = manager;\n        this.data = params;\n\n        this.node = this.createNode(params);\n        // キャンバスに追加\n        this.manager.canvas.add(this.node);\n        // pin読み込み\n        this.loadPin();\n\n        this.attachEvents();\n    }\n\n    public update(): void;\n    public update(x: number, y: number, visiblePin?: boolean): void;\n    public update(params: Node, visiblePin?: boolean): void;\n\n    public update(arg1?: number | Node, arg2?: number | boolean, arg3?: boolean): void {\n        if (typeof arg1 === 'number' && typeof arg2 === 'number') {\n            this.updatePosition(arg1, arg2, arg3);\n            return;\n        } else if (isNode(arg1) && typeof arg2 !== 'number') {\n            this.updateByParams(arg1, arg2);\n            return;\n        } else if (typeof arg1 === 'undefined') {\n            const { x, y } = this.data;\n            this.updatePosition(x, y, true);\n        }\n        throw new Error('invalid parameters');\n    }\n\n    private updatePosition(x: number, y: number, visiblePin = true): void {\n        const params: Node = {\n            ...this.data,\n            x,\n            y,\n        };\n        this.updateByParams(params, visiblePin);\n    }\n\n    private updateByParams(params: Node, visiblePin = true): void {\n        const { x, y, pin } = params;\n        this.data = params;\n        this.node.top = y;\n        this.node.left = x;\n        this.node.data = {\n            ...params,\n            type: 'node',\n        };\n\n        if (pin) {\n            if (this.pin && this.pin.data.pin === pin) {\n                // pin の変更なし、位置のみ更新する\n                if (pin === 'pinZ') {\n                    this.pin.top = y + NodeRadius;\n                    this.pin.left = x;\n                } else {\n                    this.pin.top = y;\n                    this.pin.left = x + NodeRadius;\n                }\n                this.pin.visible = visiblePin;\n            } else {\n                // pin の再読み込み\n                this.loadPin(visiblePin);\n            }\n        }\n    }\n\n    public remove(): void {\n        this.manager.canvas.remove(this.node);\n        if (this.pin) {\n            this.manager.canvas.remove(this.pin);\n        }\n\n        const beams = this.manager.nodeBeamMap[this.data.id];\n        if (beams) {\n            beams.forEach((beam) => {\n                beam.remove();\n            });\n        }\n\n        delete this.manager.nodeMap[this.data.id];\n        delete this.manager.nodeBeamMap[this.data.id];\n    }\n\n    public get readonly(): boolean {\n        return this._readonly;\n    }\n    public set readonly(value: boolean) {\n        this._readonly = value;\n        // readonly時はイベントに反応しない\n        this.node.selectable = !value;\n        this.node.evented = !value;\n    }\n\n    private createNode(params: Node): fabric.Circle {\n        return new fabric.Circle({\n            name: params.id,\n            data: {\n                type: 'node',\n                ...params,\n            },\n            top: params.y,\n            left: params.x,\n            radius: NodeRadius,\n            fill: 'black',\n            originX: 'center',\n            originY: 'center',\n            // 選択してもコントロールを表示しない\n            hasBorders: false,\n            hasControls: false,\n            // readonly時はイベントに反応しない\n            selectable: !this.manager.readonly,\n            evented: !this.manager.readonly,\n        });\n    }\n\n    private setPinProperties(params: Node) {\n        if (this.pin) {\n            this.pin.name = `image/${params.id}`;\n            this.pin.data = {\n                ...params,\n                type: 'node/pin',\n            };\n            this.pin.originX = 'center';\n            this.pin.originY = 'top';\n            this.pin.centeredRotation = false;\n            this.pin.top = params.y + NodeRadius;\n            this.pin.left = params.x;\n            this.pin.scale(PinSize / 160);\n            // イベントに反応させない\n            this.pin.selectable = false;\n            this.pin.evented = false;\n            if (params.pin === 'pinZ') {\n                this.pin.top = params.y;\n                this.pin.left = params.x + NodeRadius;\n                this.pin.rotate(-90);\n            }\n        }\n    }\n\n    private loadPin(visiblePin = true): void {\n        const pinType = this.data.pin;\n\n        // 表示中の pin をクリア\n        if (this.pin) {\n            this.manager.canvas.remove(this.pin);\n            this.pin = undefined;\n        }\n\n        if (typeof pinType === 'undefined' || pinType === 'free') {\n            // pin を表示しない\n            return;\n        }\n\n        fabric.loadSVGFromURL(`${process.env.PUBLIC_URL}${Pins[pinType]}`, (objects, options) => {\n            const svg = fabric.util.groupSVGElements(objects, options);\n            if (svg.type === 'path') {\n                this.pin = new fabric.Group([svg]);\n            } else {\n                this.pin = svg;\n            }\n\n            // プロパティ設定\n            this.setPinProperties(this.data);\n            // 表示する\n            this.pin.visible = visiblePin;\n            this.manager.canvas.add(this.pin);\n        });\n    }\n\n    // イベントハンドラ\n    private attachEvents() {\n        this.node.on('mousedown', this.onMouseDown.bind(this));\n        this.node.on('mouseup', this.onMouseUp.bind(this));\n        this.node.on('mousedblclick', this.onDblClick.bind(this));\n        this.node.on('moving', this.onMoving.bind(this));\n        this.node.on('moved', this.onMoved.bind(this));\n    }\n\n    private onMouseDown(event: fabric.IEvent<Event>): void {\n        if (this.readonly) {\n            // 読み取り専用時は何もしない\n            return;\n        }\n\n        if (this.manager.tool === 'delete') {\n            this.remove();\n            // 梁要素に紐付かない節点を削除\n            this.manager.removeUnconnectedNodes();\n            // 寸法線を更新\n            this.manager.updateGlobalGuidelines();\n            // 集中荷重の平均値を再計算\n            this.manager.calcForceAverage();\n            // 分布荷重の平均値を再計算\n            this.manager.calcTrapezoidAverage();\n            return;\n        }\n\n        // すでに長押しを実行中ならタイマーキャンセル\n        if (this.longpressTimer) {\n            clearTimeout(this.longpressTimer);\n            this.longpressTimer = undefined;\n        }\n\n        if (this.manager.tool === 'select') {\n            const shape = this.node;\n            // 長押し前の現在位置を保持する\n            const { top: beforeTop, left: beforeLeft } = shape.getBoundingRect(true, true);\n\n            // 長押し判定\n            this.longpressTimer = setTimeout(() => {\n                // 長押し後の現在位置\n                const { top: afterTop, left: afterLeft } = shape.getBoundingRect(true, true);\n                // 位置が変わっていなければ longpress とする\n                if (compareCoords([beforeLeft, beforeTop], [afterLeft, afterTop])) {\n                    // ダイアログの表示\n                    this.manager.openNodeDialog(event, this);\n                }\n                this.longpressTimer = undefined;\n            }, CanvasManager.LongpressInterval);\n        }\n    }\n\n    private onMouseUp(event: fabric.IEvent<Event>): void {\n        if (this.longpressTimer) {\n            clearTimeout(this.longpressTimer);\n            this.longpressTimer = undefined;\n        }\n    }\n    private onDblClick(event: fabric.IEvent<Event>): void {\n        if (!this.readonly) {\n            // ダイアログの表示\n            this.manager.openNodeDialog(event, this);\n        }\n    }\n\n    /**\n     * ドラッグで節点の移動\n     * 梁要素（とそれに紐づく集中荷重、分布荷重）を追従して更新する\n     * @param event\n     */\n    private onMoving(event: fabric.IEvent<Event>): void {\n        if (!this.readonly && event.pointer) {\n            // ドラッグされた位置\n            const { x, y } = event.pointer;\n\n            const { nodeMap, nodeBeamMap } = this.manager;\n\n            if (!this.dragging) {\n                // ドラッグ開始\n                if (this.pin) {\n                    // pin を非表示\n                    this.pin.visible = false;\n                }\n            }\n\n            // この節点に紐づく梁要素\n            const beams = nodeBeamMap[this.data.id];\n            if (beams) {\n                beams.forEach((beamShape) => {\n                    // 梁要素の再描画\n                    const ni = nodeMap[beamShape.data.nodeI];\n                    const nj = nodeMap[beamShape.data.nodeJ];\n                    let [ix, iy, jx, jy] = [ni.data.x, ni.data.y, nj.data.x, nj.data.y];\n                    if (beamShape.data.nodeI === this.data.id) {\n                        // i端の移動\n                        ix = x;\n                        iy = y;\n                    } else if (beamShape.data.nodeJ === this.data.id) {\n                        jx = x;\n                        jy = y;\n                    }\n\n                    beamShape.update([ix, iy, jx, jy]);\n\n                    if (!this.dragging) {\n                        // 梁要素の集中荷重、分布荷重を非表示とする\n                        beamShape.setVisibleParts(false);\n                    }\n                });\n            }\n\n            this.dragging = true;\n        }\n    } // onMoving\n\n    /**\n     * ドラッグ終了\n     * @param event\n     */\n    private onMoved(event: fabric.IEvent<Event>): void {\n        if (!this.readonly && event.target) {\n            // 現在位置をスナップ\n            const { x, y } = event.target.getCenterPoint();\n            const [sx, sy] = snap([x, y], this.manager.snapSize);\n\n            // 節点の更新\n            this.update(sx, sy);\n\n            const { nodeBeamMap, nodeMap } = this.manager;\n            // この節点に紐づく梁要素\n            const beams = nodeBeamMap[this.data.id];\n            if (beams) {\n                // 削除対象の梁要素\n                const removingBeams: BeamShape[] = [];\n\n                beams.forEach((beamShape) => {\n                    const ni = nodeMap[beamShape.data.nodeI];\n                    const nj = nodeMap[beamShape.data.nodeJ];\n                    const [ix, iy, jx, jy] = [ni.data.x, ni.data.y, nj.data.x, nj.data.y];\n\n                    // 長さが 0 となった梁要素を削除するようマーク\n                    if (ix === jx && iy === jy) {\n                        removingBeams.push(beamShape);\n                        return;\n                    }\n\n                    // 梁要素の再描画\n                    beamShape.update([ix, iy, jx, jy]);\n                    // 集中荷重、分布荷重、寸法線を更新\n                    beamShape.updateParts();\n                });\n\n                if (removingBeams.length > 0) {\n                    // 長さ 0 となった梁要素を削除\n                    removingBeams.forEach((beam) => {\n                        beam.remove();\n                    });\n                    // 梁要素を削除したら集中荷重、分布荷重の平均値を更新\n                    this.manager.calcForceAverage();\n                    this.manager.calcTrapezoidAverage();\n                }\n            }\n\n            // 同一座標の節点が存在する場合にドラッグした節点とマージする\n            if (typeof this.manager.nodeBeamMap[this.data.id] === 'undefined') {\n                // 絶対に大丈夫だけど念の為に空配列を準備しておく\n                this.manager.nodeBeamMap[this.data.id] = [];\n            }\n\n            Object.values(this.manager.nodeMap).forEach((ns) => {\n                // この節点と同一座標の節点について\n                if (ns.data.id !== this.data.id && ns.data.x === sx && ns.data.y === sy) {\n                    // canvas から節点を除去\n                    this.manager.canvas.remove(ns.node);\n                    if (ns.pin) {\n                        this.manager.canvas.remove(ns.pin);\n                    }\n\n                    // 同一座標の節点に紐づく梁要素\n                    const beams = this.manager.nodeBeamMap[ns.data.id];\n                    if (beams) {\n                        beams.forEach((beamShape) => {\n                            // 節点を付け替え\n                            if (beamShape.data.nodeI === ns.data.id) {\n                                beamShape.data.nodeI = this.data.id;\n                            }\n                            if (beamShape.data.nodeJ === ns.data.id) {\n                                beamShape.data.nodeJ = this.data.id;\n                            }\n                            beamShape.beam.data = {\n                                type: 'beam',\n                                ...beamShape.data,\n                            };\n\n                            // マージされた節点に参照を移動する\n                            this.manager.nodeBeamMap[this.data.id].push(beamShape);\n                        });\n                    }\n\n                    // 節点を削除\n                    ns.remove();\n                }\n            });\n\n            // 全体の寸法線を更新する\n            this.manager.updateGlobalGuidelines();\n\n            // ドラッグ終了\n            this.dragging = false;\n        }\n    } // onMoved\n}\n","import { fabric } from 'fabric';\nimport { Trapezoid } from '../../../types/shape';\nimport { ArrowOptions, createArrow, createGuideLine } from '../factory';\nimport CanvasManager from '../manager';\nimport { BeamPoints } from '../types';\nimport {\n    compareCoords,\n    getInsidePoints,\n    intercectPoint,\n    lerp,\n    round,\n    roundDegree,\n    snapAngle,\n    Vector,\n    vX,\n    vY,\n} from '../util';\nimport { BeamShape } from './BeamShape';\n\nconst TrapezoidColor = 'pink';\n/**\n * 分布荷重の矢印の長さ\n */\nconst TrapezoidArrowBaseLength = 25;\n\nconst defaultTrapezoidArrowOptions: ArrowOptions = {\n    stroke: TrapezoidColor,\n    fill: TrapezoidColor,\n    arrowWidth: 2,\n    arrowEdgeSize: 8,\n};\n\n/**\n * 上側の線の設定\n */\nconst defaultTrapezoidLineOptions: fabric.ILineOptions = {\n    stroke: TrapezoidColor,\n    strokeWidth: 2,\n    hasControls: false,\n    hasBorders: false,\n    lockMovementX: true,\n    lockMovementY: true,\n    lockRotation: true,\n    lockScalingX: true,\n    lockScalingY: true,\n};\nconst defaultTrapezoidLabelOptions: fabric.ITextboxOptions = {\n    fill: TrapezoidColor,\n    fontSize: 10,\n    fontFamily: 'sans-serif',\n    height: 10,\n    selectable: false,\n    evented: false,\n};\n\nexport class TrapezoidShape {\n    public data: Trapezoid;\n    public forceI: fabric.Group;\n    public forceJ: fabric.Group;\n    public arrows: fabric.Group[];\n    public line: fabric.Line;\n    public labelI: fabric.Textbox;\n    public labelJ: fabric.Textbox;\n    public guide?: fabric.Group; // 寸法線\n\n    private manager: CanvasManager;\n    private longpressTimer: NodeJS.Timer | undefined;\n    private dragging = false;\n    private _readonly = false;\n\n    // 選択中のオブジェクト\n    private selectedShapes = new Set<string>();\n\n    // 分布荷重 i端の位置\n    private pi = new Vector(0, 0);\n    // 分布荷重 j端の位置\n    private pj = new Vector(0, 0);\n    // 分布荷重の方向\n    private direction = new Vector(0, 0);\n    // 分布荷重 上側の線\n    private linePoints: BeamPoints = [0, 0, 0, 0];\n\n    // ドラッグ中のi端/j端の矢印\n    private draggingEdge: 'i' | 'j' | undefined;\n\n    // ドラッグ中に梁要素の Shape を保持する\n    // メモリリークを避けるため、ドラッグ完了後にクリアすること\n    private beam: BeamShape | undefined;\n    // 梁要素のi端\n    private vi = new Vector(0, 0);\n    // 梁要素のj端\n    private vj = new Vector(0, 0);\n\n    // rotate前の global な angle\n    private originalAngle = 0;\n    // ドラッグ中の角度・位置・長さ\n    private draggingDirection = new Vector(0, 0);\n    private draggingPosition = new Vector(0, 0);\n    private draggingLength = 0;\n    // ドラッグ可能な範囲\n    private draggableMin = Number.MIN_SAFE_INTEGER;\n    private draggableMax = Number.MAX_SAFE_INTEGER;\n\n    constructor(manager: CanvasManager, params: Trapezoid) {\n        this.manager = manager;\n        this.data = params;\n        this._readonly = this.manager.readonly;\n\n        // fabricのオブジェクトを作成\n        [this.forceI, this.forceJ, this.arrows, this.line, this.labelI, this.labelJ, this.guide] =\n            this.create();\n\n        // キャンバスに追加\n        this.addToCanvas();\n        // イベント割当\n        this.attachEvents();\n    }\n\n    public get readonly(): boolean {\n        return this._readonly;\n    }\n    public set readonly(value: boolean) {\n        this._readonly = value;\n        // readonly時はイベントに反応しない\n        [this.forceI, this.forceJ, ...this.arrows, this.line].forEach(\n            (shape: fabric.Object | undefined) => {\n                if (shape) {\n                    shape.evented = value;\n                }\n            }\n        );\n    }\n\n    public get visible(): boolean {\n        return this.forceI.visible ?? true;\n    }\n    public set visible(value: boolean) {\n        this.forceI.visible = value;\n        this.forceJ.visible = value;\n        this.arrows.forEach((arrow) => (arrow.visible = value));\n        this.line.visible = value;\n        this.labelI.visible = value;\n        this.labelJ.visible = value;\n        if (this.guide) {\n            this.guide.visible = value;\n        }\n    }\n\n    public get evented(): boolean {\n        return this.forceI.evented ?? true;\n    }\n\n    public set evented(value: boolean) {\n        [this.forceI, this.forceJ, ...this.arrows, this.line].forEach((shape) => {\n            shape.evented = value;\n        });\n    }\n\n    public get selectable(): boolean {\n        return this.forceI.selectable ?? true;\n    }\n\n    public set selectable(value: boolean) {\n        [this.forceI, this.forceJ, ...this.arrows, this.line].forEach((shape) => {\n            shape.selectable = value;\n        });\n    }\n\n    private create(): [\n        fabric.Group,\n        fabric.Group,\n        fabric.Group[],\n        fabric.Line,\n        fabric.Textbox,\n        fabric.Textbox,\n        fabric.Group\n    ] {\n        const {\n            beam,\n            forceI,\n            forceJ,\n            distanceI,\n            distanceJ,\n            angle = 0,\n            isGlobal = false,\n        } = this.data;\n        const average = this.manager.trapezoidAverage;\n        const beamShape = this.manager.beamMap[beam];\n\n        // 梁要素のi端\n        const vI = new Vector(beamShape.points[0], beamShape.points[1]);\n\n        // 分布荷重の方向\n        let dir: Vector;\n        if (isGlobal) {\n            dir = vX\n                .clone()\n                .rotateDeg(angle - 90)\n                .normalize();\n        } else {\n            dir = beamShape.direction\n                .clone()\n                .rotateDeg(angle - 90)\n                .normalize();\n        }\n\n        // 分布荷重の下端の位置\n        const bi = vI\n            .clone()\n            .add(beamShape.direction.clone().multiplyScalar(beamShape.length * distanceI));\n        const bj = vI\n            .clone()\n            .add(beamShape.direction.clone().multiplyScalar(beamShape.length * (1 - distanceJ)));\n        // 分布荷重の上端の位置\n        const pi = bi.clone().add(dir.clone().multiplyScalar(this.calcLength(forceI, average)));\n        const pj = bj.clone().add(dir.clone().multiplyScalar(this.calcLength(forceJ, average)));\n\n        // 下端を等間隔に分割する点を取得\n        const points = getInsidePoints(bi, bj, beamShape.direction);\n        // 上端の傾き\n        const slope = pj.x - pi.x !== 0 ? (pj.y - pi.y) / (pj.x - pi.x) : NaN;\n        // 上端の切片\n        const intercept = isNaN(slope) ? NaN : pi.y - slope * pi.x;\n\n        // 内側の矢印位置\n        const insideArrows: BeamPoints[] = [];\n        points.forEach((point) => {\n            // 下端の点から上端に線を伸ばして交差する点\n            const pu = intercectPoint([pi, pj, slope, intercept], point, dir);\n            if (pu) {\n                const arrow: BeamPoints = [point.x, point.y, pu[0], pu[1]];\n                insideArrows.push(arrow);\n            }\n        });\n\n        // 内側の矢印\n        const arrows = insideArrows.map((arrow) => {\n            const shape = createArrow(arrow, {\n                ...defaultTrapezoidArrowOptions,\n                hasControls: false,\n                hasBorders: false,\n                lockMovementX: true,\n                lockMovementY: true,\n                lockRotation: true,\n                lockScalingX: true,\n                lockScalingY: true,\n                selectable: !this.readonly,\n                evented: !this.readonly,\n            });\n            return shape;\n        });\n        // i端\n        const arrowI = createArrow([bi.x, bi.y, pi.x, pi.y], {\n            ...defaultTrapezoidArrowOptions,\n            name: `${this.data.id}/i`,\n            data: {\n                type: 'trapezoid/i',\n                ...this.data,\n            },\n            selectable: !this.readonly,\n            evented: !this.readonly,\n        });\n        // j端\n        const arrowJ = createArrow([bj.x, bj.y, pj.x, pj.y], {\n            ...defaultTrapezoidArrowOptions,\n            name: `${this.data.id}/j`,\n            data: {\n                type: 'trapezoid/j',\n                ...this.data,\n            },\n            selectable: !this.readonly,\n            evented: !this.readonly,\n        });\n\n        // 上端\n        const line = this.createLine([pi.x, pi.y, pj.x, pj.y]);\n\n        // 寸法線\n        const guide = createGuideLine([bi.x, bi.y, bj.x, bj.y], 50);\n        guide.visible = false;\n\n        // i端側ラベル\n        const li = bi.clone().add(beamShape.direction.clone().multiplyScalar(5));\n        // j端側ラベル\n        const lj = bj.clone().add(beamShape.direction.clone().multiplyScalar(5));\n        // ラベルの角度\n        const labelAngle = dir.angleDeg();\n\n        const labelI = this.createTrapezoidLabel(`  ${forceI} kN/m`, li, labelAngle);\n        labelI.visible = false;\n        const labelJ = this.createTrapezoidLabel(`  ${forceJ} kN/m`, lj, labelAngle);\n        labelJ.visible = false;\n\n        // ドラッグ時に使用するデータを保持する\n        this.pi.copy(bi);\n        this.pj.copy(bj);\n        this.direction.copy(dir);\n\n        return [arrowI, arrowJ, arrows, line, labelI, labelJ, guide];\n    }\n\n    public update(params?: Trapezoid): void {\n        if (params) {\n            this.data = params;\n        }\n\n        // キャンバスから削除\n        this.removeFromCanvas();\n\n        // fabricのオブジェクトを作成\n        [this.forceI, this.forceJ, this.arrows, this.line, this.labelI, this.labelJ, this.guide] =\n            this.create();\n\n        // キャンバスに追加\n        this.addToCanvas();\n        // イベント割当\n        this.attachEvents();\n    }\n\n    private createLine(points: BeamPoints): fabric.Line {\n        // ドラッグ時に使用するので保持しておく\n        this.linePoints = points;\n\n        return new fabric.Line(points, {\n            ...defaultTrapezoidLineOptions,\n            selectable: !this.readonly,\n            evented: !this.readonly,\n            name: this.data.id,\n            data: {\n                type: 'trapezoid',\n                ...this.data,\n            },\n        });\n    }\n\n    private updateLine(): void;\n    private updateLine(points: BeamPoints): void;\n    /**\n     * 上端の線を更新する\n     */\n    private updateLine(points?: BeamPoints): void {\n        const average = this.manager.trapezoidAverage;\n        let li: Vector;\n        let lj: Vector;\n\n        if (points) {\n            li = new Vector(points[0], points[1]);\n            lj = new Vector(points[2], points[3]);\n        } else {\n            if (this.draggingEdge === 'i') {\n                li = this.draggingPosition\n                    .clone()\n                    .add(\n                        this.direction\n                            .clone()\n                            .multiplyScalar(this.calcLength(this.data.forceI, average))\n                    );\n                lj = this.pj\n                    .clone()\n                    .add(\n                        this.direction\n                            .clone()\n                            .multiplyScalar(this.calcLength(this.data.forceJ, average))\n                    );\n            } else if (this.draggingEdge === 'j') {\n                li = this.pi\n                    .clone()\n                    .add(\n                        this.direction\n                            .clone()\n                            .multiplyScalar(this.calcLength(this.data.forceI, average))\n                    );\n                lj = this.draggingPosition\n                    .clone()\n                    .add(\n                        this.direction\n                            .clone()\n                            .multiplyScalar(this.calcLength(this.data.forceJ, average))\n                    );\n            } else {\n                li = this.pi\n                    .clone()\n                    .add(\n                        this.direction\n                            .clone()\n                            .multiplyScalar(this.calcLength(this.data.forceI, average))\n                    );\n                lj = this.pj\n                    .clone()\n                    .add(\n                        this.direction\n                            .clone()\n                            .multiplyScalar(this.calcLength(this.data.forceJ, average))\n                    );\n            }\n\n            this.linePoints = [li.x, li.y, lj.x, lj.y];\n        }\n\n        this.manager.canvas.remove(this.line);\n        this.line = this.createLine([li.x, li.y, lj.x, lj.y]);\n        // ドラッグ中のみの描画、ドラッグ完了後に再作成されるので\n        // イベント割当は割愛\n        this.manager.canvas.add(this.line);\n    }\n\n    public remove(): void {\n        // キャンバスから削除\n        this.removeFromCanvas();\n\n        const trapezoids = this.manager.trapezoidMap[this.data.beam];\n        if (trapezoids) {\n            const list = trapezoids.filter((shape) => shape.data.id !== this.data.id);\n            this.manager.trapezoidMap[this.data.beam] = list;\n        }\n    }\n\n    private addToCanvas(): void {\n        this.manager.canvas.add(\n            this.forceI,\n            this.forceJ,\n            ...this.arrows,\n            this.line,\n            this.labelI,\n            this.labelJ\n        );\n        if (this.guide) {\n            this.manager.canvas.add(this.guide);\n        }\n        // 選択しやすいように i端、j端の矢印を最前面に持ってくる\n        this.forceI.bringToFront();\n        this.forceJ.bringToFront();\n    }\n\n    /**\n     * キャンバスから分布荷重を削除する\n     */\n    private removeFromCanvas(): void {\n        this.manager.canvas.remove(\n            this.forceI,\n            this.forceJ,\n            ...this.arrows,\n            this.line,\n            this.labelI,\n            this.labelJ\n        );\n        if (this.guide) {\n            this.manager.canvas.remove(this.guide);\n        }\n    }\n\n    /**\n     * 矢印の長さから分布荷重の大きさを計算\n     * @param length 矢印の長さ\n     * @returns\n     */\n    private calcForce(length: number): number {\n        if (this.manager.trapezoidAverage === 0) {\n            return 10;\n        }\n\n        return Math.round((length / TrapezoidArrowBaseLength) * this.manager.trapezoidAverage);\n    }\n\n    private calcLength(force: number, average: number): number {\n        if (isNaN(average) || average === 0) {\n            return TrapezoidArrowBaseLength;\n        }\n        return (force / average) * TrapezoidArrowBaseLength;\n    }\n\n    private createTrapezoidLabel(label: string, position: Vector, angle: number): fabric.Textbox {\n        return new fabric.Textbox(label, {\n            ...defaultTrapezoidLabelOptions,\n            top: position.y,\n            left: position.x,\n            angle,\n            width: 140,\n        });\n    }\n\n    /**\n     * ラベル、寸法線、中央の矢印の表示・非表示を切り替える\n     */\n    private setVisibleParts(visible = true) {\n        const shapes = [this.labelI, this.labelJ, ...this.arrows];\n        shapes.forEach((shape) => (shape.visible = visible));\n\n        if (this.guide) {\n            this.guide.visible = visible;\n        }\n    }\n\n    /**\n     * 選択\n     */\n    public select(): void {\n        let shape: fabric.Object = this.line;\n        if (this.draggingEdge) {\n            shape = this.draggingEdge === 'i' ? this.forceI : this.forceJ;\n        }\n\n        this.manager.canvas.setActiveObject(shape);\n    }\n\n    // イベントハンドラ\n\n    private attachEvents() {\n        const edges = [this.forceI, this.forceJ];\n        const shapes = [this.forceI, this.forceJ, ...this.arrows, this.line];\n\n        shapes.forEach((shape) => {\n            // 選択・選択解除\n            shape.on('selected', this.onSelected.bind(this));\n            shape.on('deselected', this.onDeselected.bind(this));\n            // クリック・長押し\n            shape.on('mousedown', this.onMouseDown.bind(this));\n            shape.on('mouseup', this.onMouseUp.bind(this));\n            shape.on('mousedblclick', this.onDblClick.bind(this));\n        });\n\n        edges.forEach((edge) => {\n            // ドラッグ\n            edge.on('moving', this.onMoving.bind(this));\n            edge.on('moved', this.onMoved.bind(this));\n            // 回転\n            edge.on('rotating', this.onRotating.bind(this));\n            edge.on('rotated', this.onRotated.bind(this));\n            // 伸縮\n            edge.on('scaling', this.onScaling.bind(this));\n            edge.on('scaled', this.onScaled.bind(this));\n        });\n    }\n\n    private onSelected(event: fabric.IEvent<Event>): void {\n        // 選択された項目を保持する\n        const name = event.target?.name;\n        if (name) {\n            this.selectedShapes.add(name);\n        }\n\n        this.labelI.visible = true;\n        this.labelJ.visible = true;\n        if (this.guide) {\n            this.guide.visible = true;\n        }\n    }\n\n    private onDeselected(event: fabric.IEvent<Event>): void {\n        // 選択解除\n        const name = event.target?.name;\n        if (name) {\n            this.selectedShapes.delete(name);\n        }\n        // すべての選択が解除されたら寸法線を隠す\n        if (this.selectedShapes.size === 0) {\n            this.labelI.visible = false;\n            this.labelJ.visible = false;\n            if (this.guide) {\n                this.guide.visible = false;\n            }\n        }\n    }\n\n    private onMouseDown(event: fabric.IEvent<Event>): void {\n        if (this.readonly) {\n            // 読み取り専用時は何もしない\n            return;\n        }\n\n        if (this.manager.tool === 'delete') {\n            this.remove();\n            this.manager.calcTrapezoidAverage();\n            return;\n        }\n\n        if (['select', 'trapezoid'].includes(this.manager.tool) && event.target) {\n            // すでに長押しを実行中ならタイマーキャンセル\n            if (this.longpressTimer) {\n                clearTimeout(this.longpressTimer);\n                this.longpressTimer = undefined;\n            }\n\n            const shape = event.target;\n            // 長押し前の現在位置を保持する\n            const { top: beforeTop, left: beforeLeft } = shape.getBoundingRect(true, true);\n\n            // 長押し判定\n            this.longpressTimer = setTimeout(() => {\n                // 長押し後の現在位置\n                const { top: afterTop, left: afterLeft } = shape.getBoundingRect(true, true);\n                // 位置が変わっていなければ longpress とする\n                if (compareCoords([beforeLeft, beforeTop], [afterLeft, afterTop])) {\n                    // ダイアログの表示\n                    this.manager.openTrapezoidDialog(event, this);\n                }\n                this.longpressTimer = undefined;\n            }, CanvasManager.LongpressInterval);\n        }\n    } // end onMouseDown\n\n    private onMouseUp(event: fabric.IEvent<Event>): void {\n        if (this.longpressTimer) {\n            clearTimeout(this.longpressTimer);\n            this.longpressTimer = undefined;\n        }\n    }\n\n    private onDblClick(event: fabric.IEvent<Event>): void {\n        if (!this.readonly) {\n            // ダイアログの表示\n            this.manager.openTrapezoidDialog(event, this);\n        }\n    }\n\n    /**\n     * ドラッグ可能範囲を計算\n     */\n    private calcDraggableRange() {\n        if (this.beam && this.draggingEdge) {\n            // 梁要素のi端、j端\n            [this.vi.x, this.vi.y] = [this.beam.points[0], this.beam.points[1]];\n            [this.vj.x, this.vj.y] = [this.beam.points[2], this.beam.points[3]];\n\n            if (this.draggingEdge === 'i') {\n                // i端の移動可能範囲\n                // 最小値: 現在位置から i端側\n                this.draggableMin = this.vi.distance(this.pi) * -1;\n\n                // 最大値: 現在位置から j方向、distanceJ + 5% の地点まで\n                // (梁要素の長さに対して 5% を分布荷重の最小幅とする)\n                if (1 - (this.data.distanceJ + 0.05) < this.data.distanceI) {\n                    // j端側へは移動不可\n                    this.draggableMax = 0;\n                } else {\n                    const ratio = 1 - (this.data.distanceJ + 0.05);\n                    const dj = lerp(this.vi, this.vj, ratio);\n                    this.draggableMax = this.pi.distance(dj);\n                }\n            } else if (this.draggingEdge === 'j') {\n                // j端の移動可能範囲\n                // 最大値: 現在位置から j端側\n                this.draggableMax = this.vj.distance(this.pj);\n\n                // 最小値: 現在位置から i方向、distanceI + 5% の地点まで\n                if (1 - this.data.distanceJ < this.data.distanceI + 0.05) {\n                    // i端側へは移動不可\n                    this.draggableMin = 0;\n                } else {\n                    const di = lerp(this.vi, this.vj, this.data.distanceI + 0.05);\n                    this.draggableMin = this.pj.distance(di) * -1;\n                }\n            }\n        }\n    }\n\n    /**\n     * 梁要素に沿って移動する\n     * @param shape\n     */\n    private moveArrow(shape: fabric.Object, position: Vector) {\n        if (this.beam) {\n            // ドラッグ位置\n            this.draggingPosition.x = shape.left ?? 0;\n            this.draggingPosition.y = shape.top ?? 0;\n\n            // 元の位置から現在位置までの距離\n            const dragLength = position.distance(this.draggingPosition);\n            // ドラッグの方向\n            this.draggingDirection.copy(\n                this.draggingPosition.clone().subtract(position).normalize()\n            );\n            // ドラッグの角度\n            const angle = 180 - this.draggingDirection.verticalAngleDeg();\n            // ドラッグ方向と梁要素のなす角度\n            const deg = this.beam.angle - angle;\n            const rad = (deg * Math.PI) / 180;\n            // ドラッグされた長さを梁要素上の長さに変換\n            let dist = dragLength * Math.cos(rad);\n            // ドラッグ可能な範囲に修正\n            if (this.draggableMin > dist) {\n                dist = this.draggableMin;\n            } else if (this.draggableMax < dist) {\n                dist = this.draggableMax;\n            }\n\n            // 矢印の位置を更新\n            this.draggingPosition\n                .copy(position)\n                .add(this.beam.direction.clone().multiplyScalar(dist));\n            shape.left = this.draggingPosition.x;\n            shape.top = this.draggingPosition.y;\n\n            // 上端の線を更新\n            this.updateLine();\n        }\n    }\n\n    /**\n     * ドラッグしている要素が i端かj端かを判定する\n     * @param event\n     * @returns\n     */\n    private checkDraggingEdge(event: fabric.IEvent<Event>): 'i' | 'j' | undefined {\n        if (event.transform) {\n            // NOTE: 型定義に transform.target が存在しないので\n            // 強制的に変換する\n            const eventTransform = event.transform as unknown as Record<string, unknown>;\n            const eventTarget = eventTransform.target as fabric.Object;\n            // 移動中の矢印が i端/j端のどちらか？\n            switch (eventTarget.data?.type) {\n                case 'trapezoid/i':\n                    return 'i';\n                case 'trapezoid/j':\n                    return 'j';\n            }\n        }\n    }\n\n    private onMoving(event: fabric.IEvent<Event>): void {\n        if (['select', 'trapezoid'].includes(this.manager.tool) && event.transform) {\n            if (!this.dragging) {\n                // ラベル、寸法線、中央の矢印を非表示にする\n                this.setVisibleParts(false);\n                // 対象の梁要素を取得\n                this.beam = this.manager.beamMap[this.data.beam];\n\n                // ドラッグしているのが i端かj端か？\n                this.draggingEdge = this.checkDraggingEdge(event);\n\n                if (this.draggingEdge) {\n                    // ドラッグ可能範囲を計算\n                    this.calcDraggableRange();\n\n                    this.dragging = true;\n                }\n            }\n\n            // 矢印の移動\n            if (this.draggingEdge === 'i') {\n                this.moveArrow(this.forceI, this.pi);\n            } else if (this.draggingEdge === 'j') {\n                this.moveArrow(this.forceJ, this.pj);\n            }\n        }\n    }\n\n    private onMoved(event: fabric.IEvent<Event>): void {\n        if (this.beam && this.dragging) {\n            // 最終的なドラッグ位置を計算\n            if (this.draggingEdge === 'i') {\n                this.moveArrow(this.forceI, this.pi);\n\n                // distanceI を更新\n                const distance = this.vi.distance(this.draggingPosition);\n                this.data.distanceI = round(distance / this.beam.length, 2);\n            } else if (this.draggingEdge === 'j') {\n                this.moveArrow(this.forceJ, this.pj);\n\n                // distanceJ を更新\n                const distance = this.vj.distance(this.draggingPosition);\n                this.data.distanceJ = round(distance / this.beam.length, 2);\n            }\n\n            // 再描画\n            this.update();\n            // 移動した矢印を再選択する\n            this.select();\n        }\n        // ドラッグ終了\n        this.dragging = false;\n        this.beam = undefined;\n        this.draggableMin = Number.MIN_SAFE_INTEGER;\n        this.draggableMax = Number.MAX_SAFE_INTEGER;\n        this.draggingEdge = undefined;\n    }\n\n    private onScaling(event: fabric.IEvent<Event>): void {\n        if (['select', 'trapezoid'].includes(this.manager.tool) && event.transform) {\n            if (!this.dragging) {\n                // ラベル、寸法線、中央の矢印を非表示にする\n                this.setVisibleParts(false);\n                // ドラッグしているのが i端かj端か？\n                this.draggingEdge = this.checkDraggingEdge(event);\n\n                // 長さを保持する\n                if (this.draggingEdge === 'i') {\n                    this.draggingLength = this.forceI.height ?? 0;\n                } else if (this.draggingEdge === 'j') {\n                    this.draggingLength = this.forceJ.height ?? 0;\n                }\n\n                this.dragging = true;\n            }\n\n            let force: fabric.Object | undefined;\n            // 矢印とその位置を取得\n            if (this.draggingEdge === 'i') {\n                force = this.forceI;\n                this.draggingPosition.copy(this.pi);\n            } else if (this.draggingEdge === 'j') {\n                force = this.forceJ;\n                this.draggingPosition.copy(this.pj);\n            }\n\n            if (force) {\n                // 矢印のお尻の位置\n                const scale = force.scaleY ?? 1;\n                const length = this.draggingLength * scale;\n                this.draggingPosition.add(this.direction.clone().multiplyScalar(length));\n\n                // 上側の線を更新\n                if (this.draggingEdge === 'i') {\n                    this.linePoints[0] = this.draggingPosition.x;\n                    this.linePoints[1] = this.draggingPosition.y;\n                } else if (this.draggingEdge === 'j') {\n                    this.linePoints[2] = this.draggingPosition.x;\n                    this.linePoints[3] = this.draggingPosition.y;\n                }\n                this.updateLine(this.linePoints);\n            }\n        }\n    }\n    private onScaled(event: fabric.IEvent<Event>): void {\n        if (this.dragging) {\n            let force: fabric.Object | undefined;\n            // 矢印を取得\n            if (this.draggingEdge === 'i') {\n                force = this.forceI;\n            } else if (this.draggingEdge === 'j') {\n                force = this.forceJ;\n            }\n\n            if (force) {\n                const scale = force.scaleY ?? 1;\n                const length = this.draggingLength * scale;\n                // 長さから荷重の大きさを計算\n                const value = this.calcForce(length);\n                if (this.draggingEdge === 'i') {\n                    this.data.forceI = value;\n                } else if (this.draggingEdge === 'j') {\n                    this.data.forceJ = value;\n                }\n\n                // 分布荷重を再生成\n                this.update();\n                // ドラッグした要素を再選択\n                this.select();\n            }\n        }\n        // ドラッグ終了\n        this.dragging = false;\n        this.draggingEdge = undefined;\n    }\n\n    private onRotating(event: fabric.IEvent<Event>): void {\n        if (['select', 'trapezoid'].includes(this.manager.tool) && event.transform) {\n            if (!this.dragging) {\n                // ラベル、寸法線、中央の矢印を非表示にする\n                this.setVisibleParts(false);\n                // ドラッグしているのが i端かj端か？\n                this.draggingEdge = this.checkDraggingEdge(event);\n\n                // 現在の角度を保持する\n                // (同じ角度のはずだが、念の為にドラッグされている要素の角度を取得)\n                if (this.draggingEdge === 'i') {\n                    this.originalAngle = this.forceI.angle ?? 0;\n                } else if (this.draggingEdge === 'j') {\n                    this.originalAngle = this.forceJ.angle ?? 0;\n                }\n\n                this.dragging = true;\n            }\n\n            if (this.draggingEdge) {\n                // i端とj端の矢印の angle を一致させる\n                let angle = 0;\n                if (this.draggingEdge === 'i') {\n                    angle = this.forceI.angle ?? 0;\n                    this.forceJ.angle = angle;\n                } else if (this.draggingEdge === 'j') {\n                    angle = this.forceJ.angle ?? 0;\n                    this.forceI.angle = angle;\n                }\n                // i端の矢印のお尻の位置\n                const y = vY.clone().invert();\n                const li = this.pi.clone().add(\n                    y\n                        .clone()\n                        .multiplyScalar(this.forceI.height ?? 0)\n                        .rotateDeg(angle)\n                );\n                // j端の矢印のお尻の位置\n                const lj = this.pj.clone().add(\n                    y\n                        .clone()\n                        .multiplyScalar(this.forceJ.height ?? 0)\n                        .rotateDeg(angle)\n                );\n                // 上側の線を更新\n                this.linePoints = [li.x, li.y, lj.x, lj.y];\n                this.updateLine(this.linePoints);\n            }\n        }\n    }\n\n    private onRotated(event: fabric.IEvent<Event>): void {\n        if (this.dragging) {\n            // 角度を取得\n            let angle = 0;\n            if (this.draggingEdge === 'i') {\n                angle = this.forceI.angle ?? 0;\n            } else if (this.draggingEdge === 'j') {\n                angle = this.forceJ.angle ?? 0;\n            }\n\n            // 角度が変わっていなければ終了\n            if (this.originalAngle === angle) {\n                return;\n            }\n\n            // 元の位置から回転させた角度\n            let deg = 0;\n            if (angle - this.originalAngle > 0) {\n                deg = angle - this.originalAngle;\n            } else {\n                deg = 360 - this.originalAngle + angle;\n            }\n            // 5°にスナップ\n            deg = snapAngle(deg, 5);\n\n            // 角度を保持\n            let degree = (this.data.angle ?? 0) + deg;\n            degree = roundDegree(degree);\n            this.data.angle = degree;\n\n            // 再描画\n            this.update();\n            // 選択\n            this.select();\n        }\n        // ドラッグ終了\n        this.dragging = false;\n        this.draggingEdge = undefined;\n    }\n}\n","import { StructureCanvasProps } from '../../types/note';\n\nexport type BeamPoints = [number, number, number, number];\n\nexport interface Shape {\n    type: 'beams' | 'forces' | 'trapezoids';\n    id: string;\n}\n\nexport type Point = [number, number];\n\nexport interface CanvasCoreHandler {\n    getStructure: () => StructureCanvasProps;\n}\n\n/**\n * path:created イベント\n */\nexport interface PathEvent {\n    path: fabric.Path;\n}\n\nexport const isPathEvent = (item: unknown): item is PathEvent => {\n    if (item && typeof item === 'object') {\n        const temp = item as Record<string, unknown>;\n        return typeof temp.path === 'object';\n    }\n    return false;\n};\n\ntype PathStart = ['M' | 'm', number, number];\ntype PathMid = ['Q' | 'q', number, number, number, number];\ntype PathEnd = ['L' | 'l', number, number];\n\nexport type SVGPath = [PathStart, ...PathMid[], PathEnd];\nexport const isPathStart = (item: unknown): item is PathStart => {\n    if (Array.isArray(item) && item.length === 3) {\n        return (\n            (item[0] === 'M' || item[0] === 'm') &&\n            typeof item[1] === 'number' &&\n            typeof item[2] === 'number'\n        );\n    }\n    return false;\n};\nexport const isPathEnd = (item: unknown): item is PathEnd => {\n    if (Array.isArray(item) && item.length === 3) {\n        return (\n            (item[0] === 'L' || item[0] === 'l') &&\n            typeof item[1] === 'number' &&\n            typeof item[2] === 'number'\n        );\n    }\n    return false;\n};\nexport const isSVGPath = (item: unknown): item is SVGPath => {\n    if (Array.isArray(item)) {\n        if (item.length > 0) {\n            const s = item[0];\n            const e = item[item.length - 1];\n            return isPathStart(s) && isPathEnd(e);\n        }\n        return true;\n    }\n    return false;\n};\n","import { fabric } from 'fabric';\nimport { v4 as uuid } from 'uuid';\nimport { CanvasTool, DOMSize, ShapePosition } from '../../types/common';\nimport { StructureCanvasProps } from '../../types/note';\nimport {\n    Beam,\n    Force,\n    isForce,\n    isNode,\n    isTrapezoid,\n    Node,\n    Structure,\n    Trapezoid,\n} from '../../types/shape';\nimport { debug } from '../../utils/logger';\nimport { createGlobalGuideLine } from './factory';\nimport { OpenPopupFunction } from './popup/types';\nimport { BeamShape, ForceShape, NodeShape, TrapezoidShape } from './shape';\nimport { isPathEnd, isPathEvent, isPathStart, isSVGPath } from './types';\nimport { getPointerPosition, snap, Vector } from './util';\n\nexport interface CanvasManagerParameters extends StructureCanvasProps {\n    readonly?: boolean;\n    snapSize?: number;\n    gridSize?: number;\n}\n\n/**\n * 背景のグリッド線の設定\n */\nconst defaultGridLineProps: fabric.ILineOptions = {\n    stroke: '#eee',\n    strokeWidth: 1,\n    // イベントに反応させない\n    evented: false,\n    hasControls: false,\n    selectable: false,\n    // 出力対象外\n    excludeFromExport: true,\n    data: {\n        type: 'background',\n        excludeExport: true,\n    },\n};\n\n/**\n * 梁要素追加時の色\n */\nconst StrokeBeam = '#0000ff';\n/**\n * 分布荷重追加時の色\n */\nconst StrokeTrapezoid = '#ff0000';\n\nclass CanvasManager {\n    public canvas: fabric.Canvas;\n    private _tool: CanvasTool = 'select';\n    private _readonly = false;\n    public snapSize = 25;\n    public gridSize = 25;\n\n    private _props: StructureCanvasProps;\n    private _data: Structure;\n\n    /**\n     * ポップアップの表示\n     */\n    private openPopup: OpenPopupFunction;\n\n    /**\n     * キャンバスのパンの可否\n     */\n    private enablePan = false;\n    /**\n     * キャンバスのドラッグ中フラグ\n     */\n    private isCanvasDragging = false;\n    /**\n     * ドラッグ時のポインタ位置\n     */\n    private lastPos: ShapePosition = { x: 0, y: 0 };\n\n    /**\n     * 集中荷重の平均値\n     */\n    public forceAverage = 0;\n    /**\n     * 分布荷重の平均値\n     */\n    public trapezoidAverage = 0;\n    /**\n     * 節点\n     */\n    public nodeMap: Record<string, NodeShape> = {};\n    /**\n     * 梁要素\n     */\n    public beamMap: Record<string, BeamShape> = {};\n    /**\n     * 節点に紐づく梁要素\n     * key: 節点ID, value: 梁要素の配列\n     */\n    public nodeBeamMap: Record<string, BeamShape[]> = {};\n    /**\n     * beamId と force の矢印・ラベルの組み合わせ\n     */\n    public forceMap: Record<string, ForceShape[]> = {};\n    /**\n     * beamId と trapezoid の矢印・ラベルの組み合わせ\n     */\n    public trapezoidMap: Record<string, TrapezoidShape[]> = {};\n    /**\n     * 全体の寸法線\n     */\n    public globalGuideLines: fabric.Group[] = [];\n\n    /**\n     * 長押しと判定する時間 (ms)\n     */\n    public static LongpressInterval: Readonly<number> = 1000;\n\n    /**\n     * ズーム開始時のscale\n     */\n    private zoomStartScale = 1;\n\n    private _initialized = false;\n\n    /**\n     * 分布荷重を追加する梁要素ID\n     * (追加後にクリアすること)\n     */\n    public currentBeam: string | undefined;\n\n    constructor(\n        canvasDom: HTMLCanvasElement,\n        params: CanvasManagerParameters,\n        open: OpenPopupFunction\n    ) {\n        debug('::: initialize CanvasManager :::', params);\n        const { data, zoom, viewport, readonly = false, snapSize = 25, gridSize = 25 } = params;\n\n        const { width, height } = canvasDom.getBoundingClientRect();\n\n        // IDなどを確保\n        this._props = params;\n        this._data = data;\n\n        this.canvas = new fabric.Canvas(canvasDom, {\n            selection: true,\n            isDrawingMode: false,\n            stopContextMenu: true,\n        });\n\n        this.canvas.setZoom(zoom);\n        if (viewport) {\n            this.canvas.setViewportTransform(viewport);\n        }\n        // キャンバスのサイズを設定\n        this.resize({ width, height });\n\n        this.setTool('select');\n        this._readonly = readonly;\n        this.snapSize = snapSize;\n        this.gridSize = gridSize;\n\n        this.openPopup = open;\n\n        // 背景の描画\n        this.drawBackgroundGrid();\n        // 初期化処理\n        const { nodes, beams, forces, trapezoids } = data;\n\n        // 平均値\n        this.calcForceAverage(forces);\n        this.calcTrapezoidAverage(trapezoids);\n\n        // 節点の作成\n        nodes.forEach((node) => {\n            const shape = new NodeShape(this, node);\n            this.nodeMap[node.id] = shape;\n        });\n\n        // 梁要素の作成\n        beams.forEach((beam) => {\n            const shape = new BeamShape(this, beam);\n            // 参照を保持する\n            this.beamMap[beam.id] = shape;\n            if (typeof this.nodeBeamMap[beam.nodeI] === 'undefined') {\n                this.nodeBeamMap[beam.nodeI] = [shape];\n            } else {\n                this.nodeBeamMap[beam.nodeI].push(shape);\n            }\n            if (typeof this.nodeBeamMap[beam.nodeJ] === 'undefined') {\n                this.nodeBeamMap[beam.nodeJ] = [shape];\n            } else {\n                this.nodeBeamMap[beam.nodeJ].push(shape);\n            }\n        });\n\n        // 集中荷重の作成\n        forces.forEach((force) => {\n            const shape = new ForceShape(this, force);\n            // 参照を保持する\n            if (typeof this.forceMap[force.beam] === 'undefined') {\n                this.forceMap[force.beam] = [shape];\n            } else {\n                this.forceMap[force.beam].push(shape);\n            }\n        });\n\n        // 分布荷重の作成\n        trapezoids.forEach((trapezoid) => {\n            const shape = new TrapezoidShape(this, trapezoid);\n            // 参照を保持する\n            if (typeof this.trapezoidMap[trapezoid.beam] === 'undefined') {\n                this.trapezoidMap[trapezoid.beam] = [shape];\n            } else {\n                this.trapezoidMap[trapezoid.beam].push(shape);\n            }\n        });\n\n        // 寸法線の作成\n        this.updateGlobalGuidelines();\n\n        // キャンバスイベント設定\n        this.attachEvent();\n\n        this.canvas.renderAll();\n\n        // 初期化完了\n        this._initialized = true;\n    } // end constructor\n\n    // --- properties ---\n\n    get tool(): CanvasTool {\n        return this._tool;\n    }\n\n    get readonly(): boolean {\n        return this._readonly;\n    }\n\n    get initialized(): boolean {\n        return this._initialized;\n    }\n\n    /**\n     * ツール選択に応じたモードの変更\n     * @param tool\n     */\n    public setTool(tool: CanvasTool): void {\n        this._tool = tool;\n\n        // 選択を解除する\n        this.canvas.discardActiveObject();\n\n        // キャンバスの設定\n        if (tool === 'select' || tool === 'force' || tool === 'delete') {\n            this.canvas.isDrawingMode = false;\n            this.canvas.selection = tool === 'select';\n            this.enablePan = true;\n        } else {\n            // pen, trapezoid\n            this.canvas.isDrawingMode = tool === 'pen';\n            this.canvas.selection = false;\n            this.enablePan = false;\n\n            // ブラシの生成・更新\n            this.setBrush();\n        }\n\n        // オブジェクトの設定\n        this.setSelectableShapes();\n    }\n\n    // --- public methods ---\n\n    /**\n     * canvas のリサイズ\n     * @param size\n     */\n    public resize(size: DOMSize): void {\n        const { width, height } = size;\n        this.canvas.setWidth(width);\n        this.canvas.setHeight(height);\n    }\n\n    /**\n     * 保持しているデータを整形して返す\n     * @returns\n     */\n    public toCanvasProps(): StructureCanvasProps {\n        const nodes = Object.values(this.nodeMap).map(({ data }) => data);\n        const beams = Object.values(this.beamMap).map(({ data }) => data);\n        const forces = Object.values(this.forceMap).flatMap((shapes) =>\n            shapes.map(({ data }) => data)\n        );\n        const trapezoids = Object.values(this.trapezoidMap).flatMap((shapes) =>\n            shapes.map(({ data }) => data)\n        );\n\n        // 現在表示されている内容を SVG にする\n        const image = this.canvas.toSVG({ suppressPreamble: true });\n\n        // viewport, zoom\n        const viewport = this.canvas.viewportTransform ?? this._props.viewport;\n        const zoom = this.canvas.getZoom();\n\n        const data: StructureCanvasProps = {\n            ...this._props,\n            data: {\n                ...this._data,\n                nodes,\n                beams,\n                forces,\n                trapezoids,\n            },\n            image,\n            zoom,\n            viewport,\n        };\n\n        return data;\n    }\n\n    /**\n     * ポップアップの表示\n     * @param event\n     * @param shape\n     */\n    public openNodeDialog(event: fabric.IEvent<Event>, shape: NodeShape): void {\n        // ポインタの位置を取得する\n        const { clientX: left, clientY: top } = getPointerPosition(event);\n        // ダイアログを表示\n        this.openPopup(\n            'nodes',\n            { top, left },\n            shape.data as unknown as Record<string, unknown>,\n            (values: Record<string, unknown>) => {\n                if (isNode(values)) {\n                    // 節点を更新\n                    shape.update(values);\n                }\n            }\n        );\n    }\n\n    /**\n     * ポップアップの表示\n     * @param event\n     * @param shape\n     */\n    public openForceDialog(event: fabric.IEvent<Event>, shape: ForceShape): void {\n        // ポインタの位置を取得する\n        const { clientX: left, clientY: top } = getPointerPosition(event);\n        // ダイアログを表示\n        this.openPopup(\n            'forces',\n            { top, left },\n            shape.data as unknown as Record<string, unknown>,\n            (values: Record<string, unknown>) => {\n                if (isForce(values)) {\n                    // 集中荷重を更新\n                    shape.update(values);\n                }\n            }\n        );\n    }\n\n    /**\n     * ポップアップの表示\n     * @param event\n     * @param shape\n     */\n    public openTrapezoidDialog(event: fabric.IEvent<Event>, shape: TrapezoidShape): void {\n        // ポインタの位置を取得する\n        const { clientX: left, clientY: top } = getPointerPosition(event);\n        // ダイアログを表示\n        this.openPopup(\n            'trapezoids',\n            { top, left },\n            shape.data as unknown as Record<string, unknown>,\n            (values: Record<string, unknown>) => {\n                if (isTrapezoid(values)) {\n                    // 分布荷重を更新\n                    shape.update(values);\n                }\n            }\n        );\n    }\n\n    /**\n     * 集中荷重の平均値\n     * @param forces\n     */\n    public calcForceAverage(forces?: Force[]): void {\n        let list = forces ?? [];\n        if (typeof forces === 'undefined') {\n            list = Object.values(this.forceMap).flatMap((shapes) =>\n                shapes.map((shape) => shape.data)\n            );\n        }\n\n        let forceAverage = 0;\n        if (list.length > 0) {\n            const { force: total } = list.reduce((prev, current) => {\n                const item: Force = {\n                    ...prev,\n                    force: prev.force + current.force,\n                };\n                return item;\n            });\n            forceAverage = total / list.length;\n        }\n\n        this.forceAverage = forceAverage;\n    }\n\n    /**\n     * 分布荷重の平均値\n     * @param trapezoids\n     */\n    public calcTrapezoidAverage(trapezoids?: Trapezoid[]): void {\n        let list = trapezoids ?? [];\n        if (typeof trapezoids === 'undefined') {\n            list = Object.values(this.trapezoidMap).flatMap((shapes) =>\n                shapes.map((shape) => shape.data)\n            );\n        }\n\n        let trapezoidAverage = 0;\n        if (list.length > 0) {\n            const total = list\n                .map(({ forceI, forceJ }) => forceI + forceJ)\n                .reduce((prev, current) => prev + current);\n            trapezoidAverage = total / (list.length * 2);\n        }\n\n        this.trapezoidAverage = trapezoidAverage;\n    }\n\n    /**\n     * 全体の寸法線の更新\n     */\n    public updateGlobalGuidelines(): void {\n        if (this.globalGuideLines.length > 0) {\n            // 表示済みの寸法線を削除\n            this.canvas.remove(...this.globalGuideLines);\n            // 念の為配列を初期化\n            this.globalGuideLines.length = 0;\n        }\n\n        // 全体の寸法線の作成\n        const nodes = Object.values(this.nodeMap).map((shape) => shape.data);\n        const lines = createGlobalGuideLine(nodes, this._props.height);\n\n        this.globalGuideLines.push(...lines);\n        this.canvas.add(...lines);\n    }\n\n    /**\n     * 梁要素に紐付かない節点を削除\n     */\n    public removeUnconnectedNodes(): void {\n        Object.entries(this.nodeBeamMap).forEach(([nodeId, beams]) => {\n            if (typeof beams === 'undefined' || beams.length === 0) {\n                // 節点に紐づく梁要素が存在しない\n                const node = this.nodeMap[nodeId];\n                if (node) {\n                    node.remove();\n                }\n                delete this.nodeBeamMap[nodeId];\n            }\n        });\n    }\n\n    // --- private methods ---\n    /**\n     * 背景の描画\n     */\n    private drawBackgroundGrid() {\n        const lines: fabric.Line[] = [];\n        const { height, width } = this._props;\n\n        for (let y = 0; y <= height; y += this.gridSize) {\n            const hl = new fabric.Line([0, y, width, y], { ...defaultGridLineProps });\n            lines.push(hl);\n        }\n\n        // 最下部\n        const h = new fabric.Line([0, height, width, height], { ...defaultGridLineProps });\n        lines.push(h);\n\n        for (let x = 0; x <= width; x += this.gridSize) {\n            const vl = new fabric.Line([x, 0, x, height], { ...defaultGridLineProps });\n            lines.push(vl);\n        }\n\n        // 右端\n        const v = new fabric.Line([width, 0, width, height], { ...defaultGridLineProps });\n        lines.push(v);\n\n        this.canvas.add(...lines);\n    }\n\n    /**\n     * 節点の追加\n     * @param x\n     * @param y\n     * @returns\n     */\n    private addNodeIfNotExists(x: number, y: number): string {\n        // 同一座標にすでに節点が存在する場合はその節点を使用\n        const entry = Object.entries(this.nodeMap).find(\n            ([, node]) => node.data.x === x && node.data.y === y\n        );\n        if (entry) {\n            const [nodeId] = entry;\n            return nodeId;\n        }\n\n        // 新しい節点を追加\n        const nodeId = uuid();\n        const node: Node = {\n            id: nodeId,\n            name: nodeId,\n            x,\n            y,\n        };\n\n        // 節点の作成\n        const shape = new NodeShape(this, node);\n        this.nodeMap[nodeId] = shape;\n\n        return nodeId;\n    }\n\n    /**\n     * 梁要素の追加\n     * @param nodeI\n     * @param nodeJ\n     * @returns\n     */\n    private addBeamIfNotExists(nodeI: string, nodeJ: string): string {\n        const nodes = [nodeI, nodeJ];\n        // i端, j端を同じくする梁要素が存在する？\n        const entry = Object.entries(this.beamMap).find(([, beam]) => {\n            return nodes.includes(beam.data.nodeI) && nodes.includes(beam.data.nodeJ);\n        });\n        if (entry) {\n            const [beamId] = entry;\n            return beamId;\n        }\n\n        const beamId = uuid();\n        const beam: Beam = {\n            id: beamId,\n            name: beamId,\n            nodeI,\n            nodeJ,\n        };\n\n        // 梁要素の作成\n        const shape = new BeamShape(this, beam);\n        this.beamMap[beamId] = shape;\n        nodes.forEach((node) => {\n            if (typeof this.nodeBeamMap[node] === 'undefined') {\n                this.nodeBeamMap[node] = [];\n            }\n            this.nodeBeamMap[node].push(shape);\n        });\n\n        return beamId;\n    }\n\n    /**\n     * ツール選択に応じたオブジェクトの設定\n     */\n    private setSelectableShapes(): void {\n        // 節点\n        const selectableNode = this.tool === 'select';\n        const eventedNode = ['select', 'delete'].includes(this.tool);\n        // 梁要素\n        const selectableBeam = this.tool === 'select';\n        const eventedBeam = true; // 梁要素は常にイベントに反応する\n        // 集中荷重\n        const selectableForce = ['select', 'force'].includes(this.tool);\n        const eventedForce = ['select', 'force', 'delete'].includes(this.tool);\n        // 分布荷重\n        const selectableTrapezoid = ['select', 'trapezoid'].includes(this.tool);\n        const eventedTrapezoid = ['select', 'trapezoid', 'delete'].includes(this.tool);\n\n        // 節点\n        Object.values(this.nodeMap).forEach((shape) => {\n            shape.node.selectable = selectableNode;\n            shape.node.evented = eventedNode;\n        });\n        Object.entries(this.beamMap).forEach(([beamId, shape]) => {\n            // 梁要素\n            shape.beam.selectable = selectableBeam;\n            shape.beam.evented = eventedBeam;\n            // 集中荷重\n            const forces = this.forceMap[beamId];\n            if (forces) {\n                forces.forEach((shape) => {\n                    shape.force.selectable = selectableForce;\n                    shape.force.evented = eventedForce;\n                });\n            }\n            // 分布荷重\n            const trapezoids = this.trapezoidMap[beamId];\n            if (trapezoids) {\n                trapezoids.forEach((shape) => {\n                    shape.evented = eventedTrapezoid;\n                    shape.selectable = selectableTrapezoid;\n                });\n            }\n        });\n    }\n\n    /**\n     * 選択ツールに応じたペン設定\n     */\n    private setBrush(): void {\n        let brush = this.canvas.freeDrawingBrush;\n        if (!Boolean(brush)) {\n            // ブラシ未定義の場合は生成\n            brush = new fabric.PencilBrush(this.canvas);\n            this.canvas.freeDrawingBrush = brush;\n        }\n\n        // ツールに応じた色の設定\n        switch (this.tool) {\n            case 'pen':\n                brush.color = StrokeBeam;\n                break;\n            case 'trapezoid':\n                brush.color = StrokeTrapezoid;\n                break;\n            default:\n                brush.color = '#000'; // とりあえず黒\n                break;\n        }\n        // 線の太さ\n        brush.width = 2;\n    }\n\n    /**\n     * viewport の補正\n     */\n    private fitViewport(diffX?: number, diffY?: number): void {\n        const vpt = this.canvas.viewportTransform;\n        const zoom = this.canvas.getZoom();\n        const canvasWidth = this.canvas.getWidth();\n        const canvasHeight = this.canvas.getHeight();\n        const { width: pageWidth, height: pageHeight } = this._props;\n\n        if (vpt) {\n            let px = vpt[4];\n            let py = vpt[5];\n\n            // ページ幅がキャンバス幅に収まる\n            if (canvasWidth >= pageWidth * zoom) {\n                px = canvasWidth / 2 - (pageWidth * zoom) / 2;\n            } else {\n                if (typeof diffX === 'number') {\n                    px += diffX;\n                }\n\n                if (px >= 0) {\n                    px = 0;\n                } else if (px < canvasWidth - pageWidth * zoom) {\n                    px = canvasWidth - pageWidth * zoom;\n                }\n            }\n            // ページ高がキャンバス高に収まる\n            if (canvasHeight >= pageHeight * zoom) {\n                py = canvasHeight / 2 - (pageHeight * zoom) / 2;\n            } else {\n                if (typeof diffY === 'number') {\n                    py += diffY;\n                }\n\n                if (py >= 0) {\n                    py = 0;\n                } else if (py < canvasHeight - pageHeight * zoom) {\n                    py = canvasHeight - pageHeight * zoom;\n                }\n            }\n\n            vpt[4] = px;\n            vpt[5] = py;\n\n            this.canvas.requestRenderAll();\n        }\n    }\n\n    // --- events ---\n\n    private attachEvent() {\n        this.canvas.on('mouse:down', this.onMouseDown.bind(this));\n        this.canvas.on('mouse:move', this.onMouseMove.bind(this));\n        this.canvas.on('mouse:up', this.onMouseUp.bind(this));\n        this.canvas.on('selection:created', this.onSelect.bind(this));\n        this.canvas.on('selection:updated', this.onSelect.bind(this));\n        this.canvas.on('selection:cleared', this.onDeselect.bind(this));\n        this.canvas.on('path:created', this.onCreatePath.bind(this));\n        this.canvas.on('object:added', this.onCreateObject.bind(this));\n        this.canvas.on('touch:gesture', this.onTouchGesture.bind(this));\n        this.canvas.on('mouse:wheel', this.onMouseWheel.bind(this));\n    }\n\n    /**\n     * ピンチイン・ピンチアウト\n     * @param event\n     */\n    private onTouchGesture(event: fabric.IGestureEvent<Event>): void {\n        if (event.e.type.indexOf('touch') === 0) {\n            const { touches } = event.e as TouchEvent;\n            if (touches && touches.length === 2 && event.self) {\n                const point = new fabric.Point(event.self.x, event.self.y);\n                if (event.self.state === 'start') {\n                    // イベント開始時の scale を保持\n                    this.zoomStartScale = this.canvas.getZoom();\n                }\n                const delta = this.zoomStartScale * event.self.scale;\n                this.canvas.zoomToPoint(point, delta);\n\n                this.fitViewport();\n            }\n        }\n    }\n\n    /**\n     * マウスホイールによるズームイン・ズームアウト\n     * @param event\n     */\n    private onMouseWheel(event: fabric.IEvent<Event>): void {\n        if (event.e.type.indexOf('wheel') === 0) {\n            const evt = event.e as WheelEvent;\n\n            const { deltaY, offsetX, offsetY } = evt;\n            let zoom = this.canvas.getZoom();\n            zoom *= 0.999 ** deltaY;\n            const point = new fabric.Point(offsetX, offsetY);\n            this.canvas.zoomToPoint(point, zoom);\n\n            evt.preventDefault();\n            evt.stopPropagation();\n\n            this.fitViewport();\n        }\n    }\n\n    private onMouseDown(event: fabric.IEvent<Event>): void {\n        if (this.enablePan) {\n            // ポインタ位置\n            const { clientX: x, clientY: y } = getPointerPosition(event);\n            // ドラッグ開始\n            this.canvas.selection = false; // 選択範囲の矩形を出さない\n            this.isCanvasDragging = true;\n            this.lastPos = { x, y };\n        }\n    }\n\n    private onMouseMove(event: fabric.IEvent<Event>): void {\n        if (this.isCanvasDragging) {\n            // ポインタ位置\n            const { clientX: x, clientY: y } = getPointerPosition(event);\n\n            const diffX = x - this.lastPos.x;\n            const diffY = y - this.lastPos.y;\n            this.fitViewport(diffX, diffY);\n\n            this.lastPos = { x, y };\n        }\n    }\n\n    private onMouseUp(): void {\n        if (this.isCanvasDragging) {\n            const vpt = this.canvas.viewportTransform;\n            if (vpt) {\n                this.canvas.setViewportTransform(vpt);\n            }\n        }\n\n        // ドラッグ終了\n        this.isCanvasDragging = false;\n        // 複数選択を可能にする\n        this.canvas.selection = this.tool === 'select';\n    }\n\n    // 要素選択\n    private onSelect(): void {\n        this.enablePan = false;\n    }\n    // 要素選択解除\n    private onDeselect(): void {\n        if (['select', 'force', 'delete'].includes(this.tool)) {\n            this.enablePan = true;\n        }\n    }\n\n    /**\n     * パスが描かれたとき\n     * @param event\n     * @returns\n     */\n    private onCreatePath(event: fabric.IEvent<Event>): void {\n        if (isPathEvent(event)) {\n            const { path } = event.path;\n            if (path && isSVGPath(path) && path.length >= 2) {\n                // 始点と終点\n                const s = path[0];\n                const e = path[path.length - 1];\n                if (isPathStart(s) && isPathEnd(e)) {\n                    let [, ix, iy] = s;\n                    let [, jx, jy] = e;\n\n                    if (this.tool === 'pen') {\n                        // スナップする\n                        [ix, iy] = snap([ix, iy], this.snapSize);\n                        [jx, jy] = snap([jx, jy], this.snapSize);\n\n                        if (ix === jx && iy === jy) {\n                            // 同一座標の場合は何もしない\n                            return;\n                        }\n\n                        if (ix > jx || (ix === jx && iy > jy)) {\n                            // 始点と終点を入れ替え\n                            [ix, jx] = [jx, ix];\n                            [iy, jy] = [jy, iy];\n                        }\n\n                        // 節点の作成\n                        const nodeI = this.addNodeIfNotExists(ix, iy);\n                        const nodeJ = this.addNodeIfNotExists(jx, jy);\n                        // 梁要素の作成\n                        this.addBeamIfNotExists(nodeI, nodeJ);\n\n                        // 全体の寸法線を更新\n                        this.updateGlobalGuidelines();\n                    } else if (this.tool === 'trapezoid' && this.currentBeam) {\n                        // 梁要素を取得\n                        const beam = this.beamMap[this.currentBeam];\n\n                        if (beam) {\n                            // 始点、終点から i端/j端からの距離比を取得\n                            const vs = new Vector(ix, iy);\n                            const ve = new Vector(jx, jy);\n                            const distanceI = beam.calcRatio(vs);\n                            const distanceJ = 1 - beam.calcRatio(ve);\n                            // 分布荷重を作成\n                            const trapezoidId = uuid();\n                            const data: Trapezoid = {\n                                id: trapezoidId,\n                                name: trapezoidId,\n                                beam: beam.data.id,\n                                forceI: 10,\n                                forceJ: 10,\n                                distanceI,\n                                distanceJ,\n                            };\n                            const shape = new TrapezoidShape(this, data);\n\n                            if (typeof this.trapezoidMap[beam.data.id] === 'undefined') {\n                                this.trapezoidMap[beam.data.id] = [];\n                            }\n                            this.trapezoidMap[beam.data.id].push(shape);\n\n                            // 平均値を更新\n                            this.calcTrapezoidAverage();\n                        }\n\n                        // 分布荷重の追加終了\n                        this.canvas.isDrawingMode = false;\n                        this.currentBeam = undefined;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * 要素が追加されたとき\n     * @param event\n     */\n    private onCreateObject(event: fabric.IEvent<Event>): void {\n        // パスが追加されたら即削除する\n        if (event.target?.type === 'path') {\n            this.canvas.remove(event.target);\n        }\n    }\n\n    /**\n     * 保持しているデータを破棄する\n     */\n    public dispose(): void {\n        console.log('dispose canvas.');\n        if (this._initialized) {\n            this.canvas.clear();\n            this.canvas.dispose();\n        }\n    }\n}\n\nexport default CanvasManager;\n","var _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgPin1(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"svg\",\n    viewBox: \"0 0 160 160\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M80 0 L30 80 L130 80 Z\",\n    strokeWidth: 6,\n    stroke: \"gray\",\n    fill: \"transparent\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgPin1);\nexport default __webpack_public_path__ + \"static/media/pin_1.92d54adc.svg\";\nexport { ForwardRef as ReactComponent };","import {\n    createContext,\n    Dispatch,\n    ReactNode,\n    SetStateAction,\n    useCallback,\n    useRef,\n    useState,\n} from 'react';\nimport {\n    OpenPopupFunction,\n    PopupCallbackFunction,\n    PopupParams,\n    PopupPosition,\n    PopupType,\n} from '../popup/types';\n\ninterface IPopupContext {\n    popupType?: PopupType;\n    setPopupType: Dispatch<SetStateAction<PopupType | undefined>>;\n    popupPosition: PopupPosition;\n    setPopupPosition: Dispatch<SetStateAction<PopupPosition>>;\n    open: OpenPopupFunction;\n    close: VoidFunction;\n    popupParams?: PopupParams;\n    callback?: PopupCallbackFunction;\n}\n\ninterface Props {\n    children: ReactNode;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nexport const PopupContext = createContext<IPopupContext>(undefined!);\n\nconst PopupProvider: React.VFC<Props> = ({ children }) => {\n    // ポップアップの種類\n    const [popupType, setPopupType] = useState<PopupType>();\n    // ポップアップの位置\n    const [popupPosition, setPopupPosition] = useState<PopupPosition>({ top: 0, left: 0 });\n    // パラメータ\n    const [popupParams, setPopupParams] = useState<PopupParams>({});\n    // コールバック\n    const callbackFunc = useRef<PopupCallbackFunction>();\n\n    const open = useCallback(\n        (\n            type: PopupType,\n            position: PopupPosition,\n            params?: PopupParams,\n            callback?: PopupCallbackFunction\n        ) => {\n            setPopupType(type);\n            setPopupPosition(position);\n            setPopupParams(params ?? {});\n            callbackFunc.current = callback;\n        },\n        []\n    );\n\n    const close = useCallback(() => {\n        setPopupType(undefined);\n        setPopupPosition({ top: 0, left: 0 });\n        setPopupParams({});\n        callbackFunc.current = undefined;\n    }, []);\n\n    const callback = useCallback((values: Record<string, unknown>) => {\n        if (callbackFunc.current) {\n            callbackFunc.current(values);\n        }\n    }, []);\n\n    return (\n        <PopupContext.Provider\n            value={{\n                popupType,\n                setPopupType,\n                popupPosition,\n                setPopupPosition,\n                open,\n                close,\n                popupParams,\n                callback,\n            }}\n        >\n            {children}\n        </PopupContext.Provider>\n    );\n};\n\nexport default PopupProvider;\n","import {\n    forwardRef,\n    useContext,\n    useEffect,\n    useImperativeHandle,\n    useLayoutEffect,\n    useRef,\n} from 'react';\nimport { CanvasTool, DOMSize } from '../../types/common';\nimport { defaultCanvasProps, StructureCanvasProps } from '../../types/note';\nimport CanvasManager from './manager';\nimport { PopupContext } from './provider/PopupProvider';\nimport { CanvasCoreHandler } from './types';\n\ninterface Props extends StructureCanvasProps {\n    canvasSize: DOMSize;\n    readonly?: boolean;\n    tool: CanvasTool;\n    snapSize?: number;\n    gridSize?: number;\n}\n\nconst CanvasCore: React.ForwardRefRenderFunction<CanvasCoreHandler, Props> = (\n    { tool, canvasSize, ...props },\n    ref\n) => {\n    const { open } = useContext(PopupContext);\n\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    const managerRef = useRef<CanvasManager>();\n\n    useImperativeHandle(ref, () => ({\n        getStructure: () => {\n            if (managerRef.current) {\n                return managerRef.current.toCanvasProps();\n            }\n            return defaultCanvasProps;\n        },\n    }));\n\n    // 初期化\n    useLayoutEffect(() => {\n        if (canvasRef.current && canvasSize.width !== 0 && canvasSize.height !== 0) {\n            if (typeof managerRef.current === 'undefined') {\n                managerRef.current = new CanvasManager(canvasRef.current, props, open);\n            } else {\n                managerRef.current.resize(canvasSize);\n            }\n        }\n    }, [canvasSize, open, props]);\n\n    // ツールが変更された場合\n    useEffect(() => {\n        if (managerRef.current && managerRef.current.tool !== tool) {\n            managerRef.current.setTool(tool);\n        }\n    }, [tool]);\n\n    return <canvas ref={canvasRef} width={canvasSize.width} height={canvasSize.height} />;\n};\n\nexport default forwardRef(CanvasCore);\n","import { Button, InputAdornment, Paper, Stack, TextField } from '@mui/material';\nimport { ChangeEvent, FormEvent, useCallback, useEffect, useMemo, useState } from 'react';\nimport { Force, isForce } from '../../../types/shape';\nimport { PopupBaseProps } from './types';\n\ntype Props = PopupBaseProps;\n\ninterface ForceEditorProps extends Omit<Props, 'values'> {\n    force: Force;\n}\n\nconst ForceEditor: React.VFC<ForceEditorProps> = ({ force, onChange, onClose }) => {\n    const [value, setValue] = useState('');\n    const [error, setError] = useState<string>();\n\n    const handleSubmit = useCallback(\n        (event: FormEvent<HTMLFormElement>) => {\n            event.preventDefault();\n\n            if (event.currentTarget.checkValidity() && typeof error === 'undefined') {\n                const num = parseFloat(value);\n                if (!isNaN(num)) {\n                    // 更新\n                    onChange &&\n                        onChange({\n                            ...force,\n                            force: num,\n                        });\n                    // ポップアップ閉じる\n                    onClose();\n                }\n            }\n        },\n        [error, onChange, onClose, value, force]\n    );\n\n    const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const { value } = event.currentTarget;\n        let errorMessage: string | undefined;\n        setValue(value);\n\n        // 必須\n        if (value.length === 0) {\n            errorMessage = '数値を入力してください';\n        }\n        // 数値？\n        const num = parseFloat(value);\n        if (isNaN(num)) {\n            errorMessage = '数値を入力してください';\n        }\n        if (0 > num || num > Number.MAX_SAFE_INTEGER) {\n            errorMessage = '0 より大きい値を入力してください';\n        }\n\n        setError(errorMessage);\n    }, []);\n\n    useEffect(() => {\n        setValue(`${force.force}`);\n        setError(undefined);\n    }, [force]);\n\n    return (\n        <Paper>\n            <Stack\n                direction=\"column\"\n                spacing={1}\n                sx={{ p: 1, width: 240 }}\n                component=\"form\"\n                autoComplete=\"off\"\n                noValidate\n                onSubmit={handleSubmit}\n            >\n                <TextField\n                    variant=\"outlined\"\n                    margin=\"dense\"\n                    size=\"small\"\n                    label=\"集中荷重\"\n                    value={value}\n                    required\n                    fullWidth\n                    onChange={handleChange}\n                    InputProps={{\n                        endAdornment: <InputAdornment position=\"end\">kN</InputAdornment>,\n                    }}\n                    error={Boolean(error)}\n                    helperText={error}\n                />\n                <Stack direction=\"row\" justifyContent=\"flex-end\" spacing={1}>\n                    <Button size=\"small\" onClick={onClose}>\n                        キャンセル\n                    </Button>\n                    <Button type=\"submit\" size=\"small\" variant=\"contained\">\n                        OK\n                    </Button>\n                </Stack>\n            </Stack>\n        </Paper>\n    );\n};\n\nconst ConnectedForceEditor: React.VFC<Props> = ({ values, ...props }) => {\n    const force = useMemo(() => {\n        if (isForce(values)) {\n            return values;\n        }\n        // 空の force を渡す\n        return {\n            id: '',\n            name: '',\n            beam: '',\n            force: 0,\n            distanceI: 0,\n        };\n    }, [values]);\n\n    return <ForceEditor {...props} force={force} />;\n};\n\nexport default ConnectedForceEditor;\n","var _path, _circle, _circle2, _line;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgPin2(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"svg\",\n    viewBox: \"0 0 160 160\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M80 0 L30 80 L130 80 Z\",\n    strokeWidth: 6,\n    stroke: \"gray\",\n    fill: \"transparent\"\n  })), _circle || (_circle = /*#__PURE__*/React.createElement(\"circle\", {\n    stroke: \"gray\",\n    strokeWidth: 6,\n    fill: \"transparent\",\n    cx: 45,\n    cy: 115,\n    r: 20\n  })), _circle2 || (_circle2 = /*#__PURE__*/React.createElement(\"circle\", {\n    stroke: \"gray\",\n    strokeWidth: 6,\n    fill: \"transparent\",\n    cx: 115,\n    cy: 115,\n    r: 20\n  })), _line || (_line = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 30,\n    y1: 150,\n    x2: 130,\n    y2: 150,\n    stroke: \"gray\",\n    strokeWidth: 6\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgPin2);\nexport default __webpack_public_path__ + \"static/media/pin_2.2b2bb714.svg\";\nexport { ForwardRef as ReactComponent };","var _path, _circle, _circle2, _line;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgPin3(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"svg\",\n    viewBox: \"0 0 160 160\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M30 3 L30 80 L130 80 L130 3 Z\",\n    strokeWidth: 6,\n    stroke: \"gray\",\n    fill: \"transparent\"\n  })), _circle || (_circle = /*#__PURE__*/React.createElement(\"circle\", {\n    stroke: \"gray\",\n    strokeWidth: 6,\n    fill: \"transparent\",\n    cx: 45,\n    cy: 115,\n    r: 20\n  })), _circle2 || (_circle2 = /*#__PURE__*/React.createElement(\"circle\", {\n    stroke: \"gray\",\n    strokeWidth: 6,\n    fill: \"transparent\",\n    cx: 115,\n    cy: 115,\n    r: 20\n  })), _line || (_line = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 30,\n    y1: 150,\n    x2: 130,\n    y2: 150,\n    stroke: \"gray\",\n    strokeWidth: 6\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgPin3);\nexport default __webpack_public_path__ + \"static/media/pin_3.ed9f9bf0.svg\";\nexport { ForwardRef as ReactComponent };","var _line, _line2, _line3, _line4, _line5;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgPin4(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"svg\",\n    viewBox: \"0 0 160 160\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _line || (_line = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 0,\n    y1: 3,\n    x2: 160,\n    y2: 3,\n    stroke: \"gray\",\n    strokeWidth: 6\n  })), _line2 || (_line2 = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 20,\n    y1: 0,\n    x2: 0,\n    y2: 60,\n    stroke: \"gray\",\n    strokeWidth: 6\n  })), _line3 || (_line3 = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 60,\n    y1: 0,\n    x2: 40,\n    y2: 60,\n    stroke: \"gray\",\n    strokeWidth: 6\n  })), _line4 || (_line4 = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 100,\n    y1: 0,\n    x2: 80,\n    y2: 60,\n    stroke: \"gray\",\n    strokeWidth: 6\n  })), _line5 || (_line5 = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 140,\n    y1: 0,\n    x2: 120,\n    y2: 60,\n    stroke: \"gray\",\n    strokeWidth: 6\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgPin4);\nexport default __webpack_public_path__ + \"static/media/pin_4.962a4879.svg\";\nexport { ForwardRef as ReactComponent };","import CircleOutlinedIcon from '@mui/icons-material/CircleOutlined';\nimport {\n    Button,\n    Paper,\n    Stack,\n    SvgIcon,\n    ToggleButton,\n    ToggleButtonGroup,\n    ToggleButtonProps,\n    Typography,\n} from '@mui/material';\nimport {\n    FormEvent,\n    MouseEvent,\n    ReactElement,\n    useCallback,\n    useEffect,\n    useMemo,\n    useState,\n} from 'react';\nimport { isNode, isNodePinType, Node, NodePinType } from '../../../types/shape';\nimport { ReactComponent as PinIcon1 } from './pins/pin_1.svg';\nimport { ReactComponent as PinIcon2 } from './pins/pin_2.svg';\nimport { ReactComponent as PinIcon3 } from './pins/pin_3.svg';\nimport { ReactComponent as PinIcon4 } from './pins/pin_4.svg';\nimport { PopupBaseProps } from './types';\n\ntype Props = PopupBaseProps;\n\ninterface PinSelectorProps extends Omit<Props, 'values'> {\n    node: Node;\n}\n\ninterface PinButtonProps {\n    type: NodePinType;\n    icon: ReactElement;\n    label: string;\n}\n\nconst PinButtons: Readonly<Record<NodePinType, PinButtonProps>> = {\n    free: {\n        type: 'free',\n        icon: <CircleOutlinedIcon />,\n        label: '完全フリー',\n    },\n    pin: {\n        type: 'pin',\n        icon: (\n            <SvgIcon sx={{ width: 24 }} viewBox=\"0 0 160 160\">\n                <PinIcon1 />\n            </SvgIcon>\n        ),\n        label: '完全ピン',\n    },\n    pinX: {\n        type: 'pinX',\n        icon: (\n            <SvgIcon sx={{ width: 24 }} viewBox=\"0 0 160 160\">\n                <PinIcon2 />\n            </SvgIcon>\n        ),\n        label: 'ピンXローラー',\n    },\n    pinZ: {\n        type: 'pinZ',\n        icon: (\n            <SvgIcon sx={{ width: 24, transform: 'rotate(-90deg)' }} viewBox=\"0 0 160 160\">\n                <PinIcon2 />\n            </SvgIcon>\n        ),\n        label: 'ピンZローラー',\n    },\n    fixX: {\n        type: 'fixX',\n        icon: (\n            <SvgIcon sx={{ width: 24 }} viewBox=\"0 0 160 160\">\n                <PinIcon3 />\n            </SvgIcon>\n        ),\n        label: '固定Xローラー',\n    },\n    fix: {\n        type: 'fix',\n        icon: (\n            <SvgIcon sx={{ width: 24 }} viewBox=\"0 0 160 160\">\n                <PinIcon4 />\n            </SvgIcon>\n        ),\n        label: '完全固定',\n    },\n};\n\nconst defaultButtonProps: Partial<ToggleButtonProps> = {\n    sx: { justifyContent: 'flex-start', alignItems: 'center' },\n};\n\nconst PinSelector: React.VFC<PinSelectorProps> = ({ node, onChange, onClose }) => {\n    const [pin, setPin] = useState<NodePinType>();\n\n    const handleSubmit = useCallback(\n        (event: FormEvent) => {\n            event.preventDefault();\n\n            const values: Node = {\n                ...node,\n                pin,\n            };\n\n            // 無理くり Record<string, unknown> に変換して渡す\n            onChange && onChange(values as unknown as Record<string, unknown>);\n            onClose();\n        },\n        [node, onChange, onClose, pin]\n    );\n\n    const handleChange = useCallback((_: MouseEvent<HTMLElement>, newValue: string | null) => {\n        if (newValue !== null && isNodePinType(newValue)) {\n            setPin(newValue);\n        }\n    }, []);\n\n    useEffect(() => {\n        setPin(node.pin ?? 'free');\n    }, [node.pin]);\n\n    return (\n        <Paper>\n            <Stack\n                direction=\"column\"\n                spacing={1}\n                sx={{ p: 1, width: 240 }}\n                component=\"form\"\n                autoComplete=\"off\"\n                noValidate\n                onSubmit={handleSubmit}\n            >\n                <ToggleButtonGroup\n                    orientation=\"vertical\"\n                    value={pin}\n                    size=\"small\"\n                    exclusive\n                    fullWidth\n                    onChange={handleChange}\n                >\n                    {Object.entries(PinButtons).map(([key, { icon, label }]) => (\n                        <ToggleButton key={key} value={key} {...defaultButtonProps}>\n                            {icon}\n                            <Typography variant=\"caption\" sx={{ ml: 1 }}>\n                                {label}\n                            </Typography>\n                        </ToggleButton>\n                    ))}\n                </ToggleButtonGroup>\n                <Stack direction=\"row\" justifyContent=\"flex-end\" spacing={1}>\n                    <Button size=\"small\" onClick={onClose}>\n                        キャンセル\n                    </Button>\n                    <Button type=\"submit\" size=\"small\" variant=\"contained\">\n                        OK\n                    </Button>\n                </Stack>\n            </Stack>\n        </Paper>\n    );\n};\n\nconst ConnectedPinSelector: React.VFC<Props> = ({ values, ...props }) => {\n    const node = useMemo(() => {\n        if (isNode(values)) {\n            return values;\n        }\n        return {\n            id: '',\n            name: '',\n            x: 0,\n            y: 0,\n        };\n    }, [values]);\n\n    return <PinSelector {...props} node={node} />;\n};\n\nexport default ConnectedPinSelector;\n","import {\n    Button,\n    Checkbox,\n    FormControlLabel,\n    InputAdornment,\n    Paper,\n    Stack,\n    TextField,\n} from '@mui/material';\nimport { ChangeEvent, FormEvent, useCallback, useEffect, useMemo, useState } from 'react';\nimport { isTrapezoid, Trapezoid } from '../../../types/shape';\nimport { round } from '../util';\nimport { PopupBaseProps } from './types';\n\ntype Props = PopupBaseProps;\n\ninterface FormProps extends Omit<Props, 'values'> {\n    trapezoid: Trapezoid;\n}\n\ninterface TrapezoidAttrs {\n    forceI: number;\n    forceJ: number;\n    angle: number;\n    isGlobal: boolean;\n}\ninterface FormValues {\n    forceI: string;\n    forceJ: string;\n    angle: string;\n    isGlobal: boolean;\n}\n\ntype ValidateTuple = [value: number, valid: boolean, error: string];\n\n/**\n * 必須かつ 0以上の数値\n * @param value\n */\nconst validateForce = (value: string): ValidateTuple => {\n    if (value.length === 0) {\n        // 必須\n        return [NaN, false, '数値を入力してください'];\n    } else {\n        const val = parseFloat(value);\n        if (isNaN(val)) {\n            // 数値でない\n            return [NaN, false, '数値を入力してください'];\n        } else if (0 >= val && val > Number.MAX_SAFE_INTEGER) {\n            // 数値が範囲外\n            return [val, false, '0 以上の数値を入力してください'];\n        }\n        // OK\n        return [round(val, 3), true, ''];\n    }\n};\n\n/**\n * -180 から 180 の範囲の数値\n * -180 の場合は 180 とする\n * @param value\n */\nconst validateAngle = (value: string): ValidateTuple => {\n    if (value.length > 0) {\n        let val = parseInt(value, 10);\n        if (isNaN(val) || value.indexOf('.') >= 0) {\n            // 整数でない\n            return [NaN, false, '整数を入力してください'];\n        } else if (-180 > val || 180 < val) {\n            // 180 から 180 の範囲外\n            return [val, false, '-180 〜 180 で入力してください'];\n        }\n        if (val === -180) {\n            // -180 の場合は 180 とする\n            val = 180;\n        }\n        // OK\n        return [val, true, ''];\n    }\n    // 未指定の場合は 90 を返す\n    return [90, true, ''];\n};\n\nconst parseFormValues = (values: Partial<FormValues>): [boolean, TrapezoidAttrs] => {\n    const attrs: TrapezoidAttrs = {\n        forceI: 0,\n        forceJ: 0,\n        angle: 90,\n        isGlobal: false,\n    };\n\n    // forceI\n    const [value1, valid1] = validateForce(values.forceI ?? '');\n    const [value2, valid2] = validateForce(values.forceJ ?? '');\n    const [value3, valid3] = validateAngle(values.angle ?? '');\n    const valid = valid1 && valid2 && valid3;\n\n    attrs.forceI = value1;\n    attrs.forceJ = value2;\n    attrs.angle = value3;\n    attrs.isGlobal = values.isGlobal ?? false;\n\n    return [valid, attrs];\n};\n\nconst toFormValues = (trapezoid: Trapezoid): Partial<FormValues> => {\n    const values: Partial<FormValues> = {};\n\n    values.forceI = `${trapezoid.forceI}`;\n    values.forceJ = `${trapezoid.forceJ}`;\n    values.angle = `${trapezoid.angle ?? ''}`;\n    values.isGlobal = trapezoid.isGlobal;\n\n    return values;\n};\n\nconst TrapezoidEditor: React.VFC<FormProps> = ({ trapezoid, onChange, onClose }) => {\n    const [values, setValues] = useState<Partial<FormValues>>({});\n    const [errors, setErrors] = useState<Record<string, string>>({});\n\n    const handleSubmit = useCallback(\n        (event: FormEvent<HTMLFormElement>) => {\n            event.preventDefault();\n\n            if (event.currentTarget.checkValidity()) {\n                // エラーがあれば更新しない\n                const invalid = Object.values(errors).some((error) => error.length > 0);\n                if (!invalid) {\n                    // values を TrapezoidAttrs に変換する\n                    const [valid, attrs] = parseFormValues(values);\n                    if (valid) {\n                        // 更新\n                        onChange &&\n                            onChange({\n                                ...trapezoid,\n                                ...attrs,\n                            });\n                    }\n                    // ポップアップ閉じる\n                    onClose();\n                }\n            }\n        },\n        [errors, onChange, onClose, trapezoid, values]\n    );\n\n    const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const { name, value } = event.target;\n        let errorMessage = '';\n        switch (name) {\n            case 'forceI':\n            case 'forceJ':\n                // 必須かつ 0以上の数値\n                const [, valid1, error1] = validateForce(value);\n                if (!valid1) {\n                    errorMessage = error1;\n                }\n                break;\n            case 'angle':\n                const [, valid2, error2] = validateAngle(value);\n                if (!valid2) {\n                    errorMessage = error2;\n                }\n                break;\n        }\n\n        // エラー情報の更新\n        setErrors((state) => ({\n            ...state,\n            [name]: errorMessage,\n        }));\n\n        // 値を更新\n        setValues((state) => ({\n            ...state,\n            [name]: value,\n        }));\n    }, []);\n\n    const handleChangeIsGlobal = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const { checked } = event.target;\n        setValues((state) => ({\n            ...state,\n            isGlobal: checked,\n        }));\n    }, []);\n\n    useEffect(() => {\n        setValues(toFormValues(trapezoid));\n        setErrors({});\n    }, [trapezoid]);\n\n    return (\n        <Paper>\n            <Stack\n                direction=\"column\"\n                spacing={1}\n                sx={{ p: 1, width: 240 }}\n                component=\"form\"\n                autoComplete=\"off\"\n                noValidate\n                onSubmit={handleSubmit}\n            >\n                {/* forceI */}\n                <TextField\n                    variant=\"outlined\"\n                    margin=\"dense\"\n                    size=\"small\"\n                    label=\"I端側の荷重\"\n                    name=\"forceI\"\n                    value={values['forceI'] ?? ''}\n                    required\n                    fullWidth\n                    onChange={handleChange}\n                    InputProps={{\n                        endAdornment: <InputAdornment position=\"end\">kN/m</InputAdornment>,\n                    }}\n                    error={Boolean(errors['forceI'])}\n                    helperText={errors['forceI'] ?? ''}\n                />\n                {/* forceJ */}\n                <TextField\n                    variant=\"outlined\"\n                    margin=\"dense\"\n                    size=\"small\"\n                    label=\"J端側の荷重\"\n                    name=\"forceJ\"\n                    value={values['forceJ'] ?? ''}\n                    required\n                    fullWidth\n                    onChange={handleChange}\n                    InputProps={{\n                        endAdornment: <InputAdornment position=\"end\">kN/m</InputAdornment>,\n                    }}\n                    error={Boolean(errors['forceJ'])}\n                    helperText={errors['forceJ'] ?? ''}\n                />\n                {/* angle */}\n                <TextField\n                    variant=\"outlined\"\n                    margin=\"dense\"\n                    size=\"small\"\n                    label=\"角度\"\n                    name=\"angle\"\n                    value={values['angle'] ?? ''}\n                    fullWidth\n                    onChange={handleChange}\n                    InputProps={{\n                        endAdornment: <InputAdornment position=\"end\">°</InputAdornment>,\n                    }}\n                    error={Boolean(errors['angle'])}\n                    helperText={errors['angle'] ?? ''}\n                />\n                {/* isGlobal */}\n                <FormControlLabel\n                    label=\"全体座標系\"\n                    control={\n                        <Checkbox\n                            name=\"isGlobal\"\n                            size=\"small\"\n                            checked={values.isGlobal ?? false}\n                            onChange={handleChangeIsGlobal}\n                        />\n                    }\n                />\n                <Stack direction=\"row\" justifyContent=\"flex-end\" spacing={1}>\n                    <Button size=\"small\" onClick={onClose}>\n                        キャンセル\n                    </Button>\n                    <Button type=\"submit\" size=\"small\" variant=\"contained\">\n                        OK\n                    </Button>\n                </Stack>\n            </Stack>\n        </Paper>\n    );\n};\n\nconst ConnectedTrapezoidEditor: React.VFC<Props> = ({ values, ...props }) => {\n    const trapezoid = useMemo(() => {\n        if (isTrapezoid(values)) {\n            return values;\n        }\n        // 空データを返す\n        return {\n            id: '',\n            name: '',\n            beam: '',\n            forceI: 0,\n            distanceI: 0,\n            forceJ: 0,\n            distanceJ: 0,\n        };\n    }, [values]);\n\n    return <TrapezoidEditor {...props} trapezoid={trapezoid} />;\n};\n\nexport default ConnectedTrapezoidEditor;\n","import { Box } from '@mui/material';\nimport { useContext } from 'react';\nimport { PopupContext } from '../provider/PopupProvider';\nimport ForceEditor from './ForceEditor';\nimport PinSelector from './PinSelector';\nimport TrapezoidEditor from './TrapezoidEditor';\n\nconst Popup: React.VFC = () => {\n    const { popupType, popupPosition, popupParams, close, callback } = useContext(PopupContext);\n\n    if (typeof popupType === 'undefined') {\n        return null;\n    }\n\n    return (\n        <Box\n            sx={{\n                position: 'fixed',\n                zIndex: 5000,\n                ...popupPosition,\n            }}\n        >\n            {popupType === 'forces' && (\n                <ForceEditor values={popupParams ?? {}} onClose={close} onChange={callback} />\n            )}\n            {popupType === 'trapezoids' && (\n                <TrapezoidEditor values={popupParams ?? {}} onClose={close} onChange={callback} />\n            )}\n            {popupType === 'nodes' && (\n                <PinSelector values={popupParams ?? {}} onClose={close} onChange={callback} />\n            )}\n        </Box>\n    );\n};\n\nexport default Popup;\n","import { Box } from '@mui/material';\nimport { forwardRef, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport { CanvasTool, DOMSize } from '../../types/common';\nimport { defaultCanvasProps, StructureCanvasProps } from '../../types/note';\nimport CanvasCore from './core';\nimport Popup from './popup';\nimport PopupProvider from './provider/PopupProvider';\nimport { CanvasCoreHandler } from './types';\n\ninterface Props extends StructureCanvasProps {\n    readonly?: boolean;\n    tool?: CanvasTool;\n}\n\nexport type CanvasHandler = CanvasCoreHandler;\n\nconst Canvas: React.ForwardRefRenderFunction<CanvasHandler, Props> = (\n    { tool = 'select', readonly = false, children, ...props },\n    ref\n) => {\n    // キャンバス表示領域\n    const [size, setSize] = useState<DOMSize>({ width: 0, height: 0 });\n    // キャンバスの親要素\n    const containerRef = useRef<HTMLDivElement>(null);\n    // キャンバス本体\n    const canvasRef = useRef<CanvasCoreHandler>(null);\n\n    useImperativeHandle(\n        ref,\n        () => ({\n            getStructure: () => {\n                if (canvasRef.current) {\n                    return canvasRef.current.getStructure();\n                }\n                return defaultCanvasProps;\n            },\n        }),\n        []\n    );\n\n    // 要素のリサイズを監視\n    useEffect(() => {\n        const observer = new ResizeObserver((entries) => {\n            const { width, height } = entries[0].contentRect;\n            setSize({\n                width,\n                height,\n            });\n        });\n\n        if (containerRef.current) {\n            observer.observe(containerRef.current);\n        }\n\n        return () => {\n            observer.disconnect();\n        };\n    }, []);\n\n    return (\n        <Box\n            ref={containerRef}\n            sx={{\n                width: 'auto',\n                height: '100%',\n                backgroundColor: '#ffffff',\n                overscrollBehavior: 'contain',\n            }}\n        >\n            <PopupProvider>\n                <CanvasCore\n                    ref={canvasRef}\n                    tool={tool}\n                    readonly={readonly}\n                    canvasSize={size}\n                    {...props}\n                />\n                <Popup />\n            </PopupProvider>\n        </Box>\n    );\n};\n\nexport default forwardRef(Canvas);\n","// --- app 共通 ---\nexport interface DOMSize {\n    width: number;\n    height: number;\n}\nexport interface DOMPosition {\n    top: number;\n    left: number;\n}\n\nexport interface ShapePosition {\n    x: number;\n    y: number;\n}\n\nexport type SizePosition = DOMSize & ShapePosition;\n\nexport const AppModes = ['note', 'canvas'] as const;\nexport type AppMode = typeof AppModes[number];\n\n// --- canvas関係 ---\n\nexport const CanvasTools = ['select', 'pen', 'force', 'trapezoid', 'delete'] as const;\nexport type CanvasTool = typeof CanvasTools[number];\nexport const isCanvasTool = (item: unknown): item is CanvasTool => {\n    if (typeof item === 'string') {\n        return CanvasTools.some((tool) => tool === item);\n    }\n    return false;\n};\n\nexport const isNumberArray = (item: unknown): item is number[] => {\n    if (Array.isArray(item)) {\n        if (item.length === 0) {\n            return true;\n        }\n\n        return item.every((value) => typeof value === 'number');\n    }\n    return false;\n};\n\nexport const isLinePoints = (item: unknown): item is [number, number, number, number] => {\n    if (isNumberArray(item)) {\n        return item.length === 4;\n    }\n    return false;\n};\n\n// fabric の座標\nexport type Point = {\n    x: number;\n    y: number;\n};\n\nexport interface ShapeCoordinates {\n    tl: Point;\n    tr: Point;\n    bl: Point;\n    br: Point;\n}\n\nexport const isPoint = (item: unknown): item is Point => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return typeof value.x === 'number' && typeof value.y === 'number';\n    }\n    return false;\n};\n\nexport const isShapeCoordinates = (item: unknown): item is ShapeCoordinates => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return isPoint(value.tl) && isPoint(value.tr) && isPoint(value.bl) && isPoint(value.br);\n    }\n    return false;\n};\n","import { fabric } from 'fabric';\nimport { isShapeCoordinates, ShapeCoordinates } from '../../../types/common';\nimport { StructureCanvasProps } from '../../../types/note';\nimport PageManager from '../manager';\n\nconst defaultLayerOptions: fabric.IRectOptions = {\n    lockRotation: true,\n    fill: '#fff',\n    stroke: '#000',\n    strokeWidth: 1,\n    hasRotatingPoint: false,\n    erasable: false,\n};\nconst defaultImageOptions: fabric.IObjectOptions = {\n    // イベントに反応させない\n    selectable: false,\n    evented: false,\n    // 消しゴムで消せない\n    erasable: false,\n};\n\nclass StructureRect {\n    private manager: PageManager;\n    private data: StructureCanvasProps;\n    private layer: fabric.Rect;\n    private image?: fabric.Object;\n\n    private dragging = false;\n\n    constructor(manager: PageManager, props: StructureCanvasProps) {\n        this.manager = manager;\n        this.data = props;\n\n        // レイヤーの作成\n        this.layer = this.createLayer();\n        this.manager.canvas.add(this.layer);\n\n        // イメージの読み込み\n        this.loadImage();\n\n        // イベントの割当\n        this.attachEvents();\n    }\n\n    // --- public properties ---\n\n    /**\n     * 座標を返す\n     */\n    public get coordinates(): ShapeCoordinates {\n        return this.layer.calcCoords();\n    }\n\n    // --- public methods ---\n\n    public update(): void;\n    public update(data: StructureCanvasProps): void;\n\n    /**\n     * 更新処理\n     * @param data\n     */\n    public update(data?: StructureCanvasProps): void {\n        if (data) {\n            this.data = data;\n        }\n\n        // キャンバスから除去\n        this.remove();\n\n        // レイヤーの作成\n        this.layer = this.createLayer();\n        this.manager.canvas.add(this.layer);\n\n        // イメージの読み込み\n        this.loadImage();\n\n        // イベントの割当\n        this.attachEvents();\n    }\n\n    /**\n     * 削除処理\n     */\n    public remove(): void {\n        this.layer.off(); // イベント割当を全削除\n        this.manager.canvas.remove(this.layer);\n        if (this.image) {\n            this.manager.canvas.remove(this.image);\n        }\n    }\n\n    public getCanvasProps(): StructureCanvasProps {\n        return this.data;\n    }\n\n    /**\n     * リサイズのコントロールを非表示にする\n     */\n    public hideControls(): void {\n        this.layer.hasControls = false;\n        // 強制的に再描画\n        this.manager.canvas.renderAll();\n    }\n\n    public select(): void {\n        this.manager.canvas.setActiveObject(this.layer);\n        this.manager.selectedCanvasId = this.data.id;\n    }\n\n    // --- private methods ---\n\n    private createLayer(): fabric.Rect {\n        const rect = new fabric.Rect({\n            top: this.data.y,\n            left: this.data.x,\n            height: this.data.height,\n            width: this.data.width,\n            ...defaultLayerOptions,\n            name: this.data.id,\n            data: {\n                type: 'layer',\n            },\n        });\n        rect.setControlsVisibility({\n            bl: true,\n            br: true,\n            mb: true,\n            ml: true,\n            mr: true,\n            mt: true,\n            tl: true,\n            tr: true,\n            mtr: false,\n        });\n\n        return rect;\n    }\n\n    private loadImage(): void {\n        if (this.image) {\n            this.manager.canvas.remove(this.image);\n            this.image = undefined;\n        }\n\n        if (this.data.image) {\n            fabric.loadSVGFromString(this.data.image, (objects, options) => {\n                this.image = fabric.util.groupSVGElements(objects, options);\n                let scale = 1;\n                if (typeof options.width === 'number') {\n                    scale = this.data.width / options.width;\n                }\n                console.log(scale);\n                // プロパティ設定\n                this.image.setOptions({\n                    ...defaultImageOptions,\n                    top: this.layer.top,\n                    left: this.layer.left,\n                    scaleX: scale,\n                    scaleY: scale,\n                });\n\n                // キャンバスに追加\n                this.manager.canvas.add(this.image);\n                // 節点が一つでも存在すればレイヤーを透明にする\n                this.layer.opacity = this.data.data.nodes.length > 0 ? 0 : 1;\n                // レイヤーを最前面に持ってくる\n                this.layer.bringToFront();\n            });\n        }\n    }\n\n    // --- events ---\n\n    /**\n     * イベントの割当\n     */\n    private attachEvents() {\n        this.layer.on('selected', this.onSelected.bind(this));\n        this.layer.on('deselected', this.onDeselected.bind(this));\n        // 伸縮\n        this.layer.on('scaling', this.onScaling.bind(this));\n        this.layer.on('scaled', this.onScaled.bind(this));\n        // 移動\n        this.layer.on('moving', this.onMoving.bind(this));\n        this.layer.on('moved', this.onMoved.bind(this));\n    }\n\n    /**\n     * 選択されたらナビゲーションを表示する\n     * @param event\n     */\n    private onSelected(event: fabric.IEvent<Event>): void {\n        this.manager.updateCanvasState(this.data.id);\n    }\n\n    /**\n     * 選択が解除されたらナビゲーションを閉じる\n     * @param event\n     */\n    private onDeselected(event: fabric.IEvent<Event>): void {\n        // NOTE: ナビゲーションを閉じる処理は PageManager で実施\n    }\n\n    private onScaling(event: fabric.IEvent<Event>): void {\n        if (!this.dragging) {\n            // レイヤーを半透明にする (画像がなければそのまま)\n            this.layer.opacity = this.image ? 0.1 : 1;\n\n            this.dragging = true;\n        }\n    }\n\n    private onScaled(event: fabric.IEvent<Event>): void {\n        if (this.dragging) {\n            const scaleX = this.layer.scaleX ?? 1;\n            const scaleY = this.layer.scaleY ?? 1;\n            const width = this.data.width * scaleX;\n            const height = this.data.height * scaleY;\n\n            // scale をリセット\n            this.layer.scaleX = 1;\n            this.layer.scaleY = 1;\n            this.layer.width = width;\n            this.layer.height = height;\n\n            // 構造データを更新\n            this.data.width = width;\n            this.data.height = height;\n\n            // TODO: 画像を再生成する?\n\n            // 透明度を戻す\n            this.layer.opacity = this.image ? 0 : 1;\n\n            // ドラッグ終了\n            this.dragging = false;\n            // ナビゲーションの更新\n            this.onSelected(event);\n        }\n    }\n\n    private onMoving(event: fabric.IEvent<Event>): void {\n        if (!this.dragging) {\n            // ナビゲーションを閉じる\n            this.manager.clearCanvasState();\n\n            this.dragging = true;\n        }\n\n        // レイヤーの位置に画像を移動する\n        if (this.image) {\n            this.image.top = this.layer.top;\n            this.image.left = this.layer.left;\n        }\n    }\n\n    private onMoved(event: fabric.IEvent<Event>): void {\n        if (this.dragging) {\n            // ノート上での絶対座標を取得\n            const coords = this.layer.calcCoords(true);\n            if (isShapeCoordinates(coords)) {\n                this.data.x = coords.tl.x;\n                this.data.y = coords.tl.y;\n            }\n\n            // ナビゲーションを再表示\n            this.onSelected(event);\n\n            // ドラッグ終了\n            this.dragging = false;\n        }\n    }\n}\n\nexport default StructureRect;\n","import { fabric } from 'fabric';\nimport { v4 as uuid } from 'uuid';\nimport { Point, ShapePosition } from '../../types/common';\nimport {\n    defaultCanvasProps,\n    defaultDrawSettings,\n    DrawSettings,\n    NoteMode,\n    PageProps,\n    PageSize,\n    StructureCanvasProps,\n    StructureCanvasState,\n} from '../../types/note';\nimport { equalPoints } from '../../utils/coordinates';\nimport { debug } from '../../utils/logger';\nimport { clone, getPointerPosition } from '../Canvas/util';\nimport StructureRect from './shape/StructureRect';\n\ninterface Parameters extends PageProps {\n    setCanvasState: (props: StructureCanvasState) => void;\n    clearCanvasState: (closingCanvas?: boolean) => void;\n}\n\n/**\n * 背景のグリッド線の設定\n */\nconst defaultGridLineProps: fabric.ILineOptions = {\n    stroke: '#eee',\n    strokeWidth: 1,\n    // イベントに反応させない\n    evented: false,\n    hasControls: false,\n    selectable: false,\n    // 出力対象外\n    excludeFromExport: true,\n    // 消しゴムで消えないようにする\n    erasable: false,\n    data: {\n        type: 'background',\n        excludeExport: true,\n    },\n};\n\nclass PageManager {\n    public canvas: fabric.Canvas;\n    private _mode: NoteMode = 'edit';\n    private _readonly = false;\n\n    /**\n     * ページサイズ\n     */\n    private pageWidth = 0;\n    /**\n     * ページサイズ\n     */\n    private pageHeight = 0;\n\n    /**\n     * 背景グリッド線の感覚\n     */\n    private gridSize = 25;\n\n    /**\n     * 描画設定\n     */\n    private _settings: DrawSettings = defaultDrawSettings;\n\n    /**\n     * パンの可否\n     */\n    private enablePan = true;\n    /**\n     * ドラッグ中フラグ\n     */\n    private dragging = false;\n    /**\n     * ドラッグ時のポインタ位置\n     */\n    private lastPos: ShapePosition = { x: 0, y: 0 };\n\n    /**\n     * ズーム開始時のscale\n     */\n    private zoomStartScale = 1;\n\n    /**\n     * 構造データ\n     */\n    private structures: Record<string, StructureRect> = {};\n    /**\n     * 選択中の構造データキャンバス\n     */\n    public selectedCanvasId: string | undefined;\n\n    /**\n     * 構造データの情報を返す\n     */\n    private setCanvasState: (props: StructureCanvasState) => void;\n    /**\n     * 構造データの情報をクリアする\n     */\n    public clearCanvasState: (closingCanvas?: boolean) => void;\n\n    constructor(\n        canvasDom: HTMLCanvasElement,\n        { size, zoom, viewport, drawData, structures, setCanvasState, clearCanvasState }: Parameters\n    ) {\n        debug('::: initialize PageManager :::');\n        this.canvas = new fabric.Canvas(canvasDom, {\n            selection: true,\n            isDrawingMode: false,\n            stopContextMenu: true,\n        });\n\n        this.canvas.setZoom(zoom);\n        this.canvas.setViewportTransform(viewport);\n\n        this.readonly = false;\n        this.mode = 'select';\n        const pageSize = PageSize[size];\n        this.pageHeight = pageSize.height;\n        this.pageWidth = pageSize.width;\n        this.gridSize = 25; // ひとまず固定で指定\n        this.setCanvasState = setCanvasState;\n        this.clearCanvasState = clearCanvasState;\n\n        // 背景のグリッド線を描画する\n        this.drawBackgroundGrid();\n\n        if (drawData) {\n            // 描画データが渡された場合は表示処理を行う\n            this.canvas.loadFromJSON(drawData, this.canvas.renderAll.bind(this.canvas));\n        }\n\n        // 構造データの配置\n        structures.forEach((structure) => {\n            const rect = new StructureRect(this, structure);\n            this.structures[structure.id] = rect;\n        });\n\n        // イベント割当\n        this.attachEvents();\n    }\n\n    // --- public properties ---\n\n    public get mode(): NoteMode {\n        return this._mode;\n    }\n\n    public set mode(value: NoteMode) {\n        this._mode = value;\n        // モード変更時の処理\n        this.canvas.selection = this._mode === 'select';\n        this.canvas.isDrawingMode = this._mode === 'edit';\n        this.enablePan = this._mode === 'select';\n    }\n\n    public get readonly(): boolean {\n        return this._readonly;\n    }\n\n    public set readonly(value: boolean) {\n        this._readonly = value;\n\n        this.canvas.isDrawingMode = value ? false : this._mode === 'edit';\n        this.canvas.selection = value ? false : this._mode === 'select';\n        // TODO: 読み取り専用時は完全に操作できないようにしたい\n    }\n\n    public get drawSettings(): DrawSettings {\n        return this._settings;\n    }\n\n    public set drawSettings(value: DrawSettings) {\n        // ブラシの設定を更新する\n        let brush = this.canvas.freeDrawingBrush;\n        if (!Boolean(brush) || this._settings.eraser !== value.eraser) {\n            // ブラシ未定義 あるいは 鉛筆と消しゴムを切り替えた場合は生成\n            if (value.eraser) {\n                // 消しゴム\n                brush = new fabric.EraserBrush(this.canvas);\n            } else {\n                // 鉛筆\n                brush = new fabric.PencilBrush(this.canvas);\n            }\n            this.canvas.freeDrawingBrush = brush;\n        }\n\n        const { stroke: color, strokeWidth: width } = value;\n        brush.color = color;\n        brush.width = width;\n\n        this._settings = { ...value };\n    }\n\n    /**\n     * 現在選択されている構造データを取得する\n     */\n    public get activeStructure(): StructureCanvasProps {\n        if (this.selectedCanvasId) {\n            return this.structures[this.selectedCanvasId].getCanvasProps();\n        }\n        return defaultCanvasProps;\n    }\n\n    /**\n     * 構造データを更新する\n     */\n    public set activeStructure(props: StructureCanvasProps) {\n        const structure = this.structures[props.id];\n        if (structure) {\n            // zoom の値を補正する\n            const pageZoom = this.canvas.getZoom();\n            const state = clone(props);\n            state.zoom = state.zoom / pageZoom;\n            // 更新・再描画\n            structure.update(state);\n            // Page.tsx の CanvasState を更新する\n            this.updateCanvasState();\n        }\n    }\n\n    /**\n     * 現在選択されているキャンバスを取得する\n     */\n    public get activeCanvas(): StructureRect | undefined {\n        if (this.selectedCanvasId) {\n            return this.structures[this.selectedCanvasId];\n        }\n    }\n\n    // --- public methods ---\n\n    public save(): void {\n        // TODO: 描画内容を保存する\n    }\n\n    public load(): void {\n        // TODO: 描画内容を読み込む\n    }\n\n    public clear(): void {\n        // TODO: ノートの全クリア\n    }\n\n    public undo(): void {\n        // TODO: 実装\n    }\n\n    public redo(): void {\n        // TODO: 実装\n    }\n\n    /**\n     * 構造データキャンバスのメニューを表示する\n     * @param canvasProps\n     * @param coordinates\n     */\n    public updateCanvasState(canvasId?: string): void {\n        if (canvasId) {\n            // ID を保持\n            this.selectedCanvasId = canvasId;\n        }\n\n        if (this.selectedCanvasId) {\n            const canvasProps = this.structures[this.selectedCanvasId].getCanvasProps();\n            const coordinates = this.structures[this.selectedCanvasId].coordinates;\n\n            // ズーム\n            const pageZoom = this.canvas.getZoom();\n\n            const params: StructureCanvasState = {\n                ...canvasProps,\n                coordinates,\n                pageZoom,\n            };\n\n            this.setCanvasState(params);\n        }\n    }\n\n    /**\n     * キャンバスのリサイズ\n     * @param view\n     */\n    public resize(view: DOMRect): void {\n        const { width, height } = view;\n        const zoom = this.canvas.getZoom();\n        this.canvas.setWidth(width * zoom);\n        this.canvas.setHeight(height * zoom);\n    }\n\n    /**\n     * 構造データの追加/コピー\n     * @param props\n     */\n    public addCanvas(props?: StructureCanvasProps): void {\n        const canvasProps = clone(props ?? defaultCanvasProps);\n        canvasProps.id = uuid();\n\n        // 位置が重ならないように調整\n        const items = Object.values(this.structures);\n        const pos: Point = {\n            x: canvasProps.x,\n            y: canvasProps.y,\n        };\n        while (items.some((rect) => equalPoints(pos, rect.coordinates.tl))) {\n            // 左上の座標が一致する要素が存在する場合、すこし位置をずらす\n            pos.x += 20;\n            pos.y += 20;\n        }\n\n        canvasProps.x = pos.x;\n        canvasProps.y = pos.y;\n\n        const rect = new StructureRect(this, canvasProps);\n        this.structures[canvasProps.id] = rect;\n\n        rect.select();\n    }\n\n    /**\n     * 構造データの削除\n     * @param props\n     */\n    public removeCanvas(props: string | StructureCanvasProps): void {\n        let canvasId: string;\n        if (typeof props === 'string') {\n            canvasId = props;\n        } else {\n            canvasId = props.id;\n        }\n\n        const structure = this.structures[canvasId];\n        if (structure) {\n            structure.remove();\n            delete this.structures[canvasId];\n            this.selectedCanvasId = undefined;\n        }\n    }\n\n    // --- private methods ---\n\n    /**\n     * 背景の描画\n     */\n    private drawBackgroundGrid() {\n        const lines: fabric.Line[] = [];\n\n        for (let y = 0; y <= this.pageHeight; y += this.gridSize) {\n            const hl = new fabric.Line([0, y, this.pageWidth, y], { ...defaultGridLineProps });\n            lines.push(hl);\n        }\n\n        // 最下部\n        const h = new fabric.Line([0, this.pageHeight, this.pageWidth, this.pageHeight], {\n            ...defaultGridLineProps,\n        });\n        lines.push(h);\n\n        for (let x = 0; x <= this.pageWidth; x += this.gridSize) {\n            const vl = new fabric.Line([x, 0, x, this.pageHeight], { ...defaultGridLineProps });\n            lines.push(vl);\n        }\n\n        // 右端\n        const v = new fabric.Line([this.pageWidth, 0, this.pageWidth, this.pageHeight], {\n            ...defaultGridLineProps,\n        });\n        lines.push(v);\n\n        this.canvas.add(...lines);\n    }\n\n    /**\n     * viewport の補正\n     */\n    private fitViewport(diffX?: number, diffY?: number): void {\n        const vpt = this.canvas.viewportTransform;\n        const zoom = this.canvas.getZoom();\n        const canvasWidth = this.canvas.getWidth();\n        const canvasHeight = this.canvas.getHeight();\n        if (vpt) {\n            let px = vpt[4];\n            let py = vpt[5];\n\n            // ページ幅がキャンバス幅に収まる\n            if (canvasWidth >= this.pageWidth * zoom) {\n                px = canvasWidth / 2 - (this.pageWidth * zoom) / 2;\n            } else {\n                if (typeof diffX === 'number') {\n                    px += diffX;\n                }\n\n                if (px >= 0) {\n                    px = 0;\n                } else if (px < canvasWidth - this.pageWidth * zoom) {\n                    px = canvasWidth - this.pageWidth * zoom;\n                }\n            }\n            // ページ高がキャンバス高に収まる\n            if (canvasHeight >= this.pageHeight * zoom) {\n                py = canvasHeight / 2 - (this.pageHeight * zoom) / 2;\n            } else {\n                if (typeof diffY === 'number') {\n                    py += diffY;\n                }\n\n                if (py >= 0) {\n                    py = 0;\n                } else if (py < canvasHeight - this.pageHeight * zoom) {\n                    py = canvasHeight - this.pageHeight * zoom;\n                }\n            }\n\n            vpt[4] = px;\n            vpt[5] = py;\n\n            this.canvas.requestRenderAll();\n        }\n    }\n\n    // --- events ---\n\n    private attachEvents(): void {\n        // イベント割当\n        this.canvas.on('mouse:down', this.onMouseDown.bind(this));\n        this.canvas.on('mouse:move', this.onMouseMove.bind(this));\n        this.canvas.on('mouse:up', this.onMouseUp.bind(this));\n        this.canvas.on('selection:created', this.onSelect.bind(this));\n        this.canvas.on('selection:updated', this.onSelect.bind(this));\n        this.canvas.on('selection:cleared', this.onDeselect.bind(this));\n        this.canvas.on('object:added', this.onCreateObject.bind(this));\n        this.canvas.on('touch:gesture', this.onTouchGesture.bind(this));\n        this.canvas.on('mouse:wheel', this.onMouseWheel.bind(this));\n    }\n\n    private onSelect(): void {\n        this.enablePan = false;\n    }\n\n    private onDeselect(): void {\n        this.enablePan = this.mode === 'select';\n        // キャンバスが選択されている場合\n        if (this.selectedCanvasId) {\n            // キャンバスのヘッダーメニューを閉じる\n            this.clearCanvasState(false); // onCloseCanvas は呼ばない\n            this.selectedCanvasId = undefined;\n        }\n    }\n\n    /**\n     * ピンチイン・ピンチアウト\n     * @param event\n     */\n    private onTouchGesture(event: fabric.IGestureEvent<Event>): void {\n        if (!this.readonly && event.e.type.indexOf('touch') === 0) {\n            const { touches } = event.e as TouchEvent;\n            if (touches && touches.length === 2 && event.self) {\n                const point = new fabric.Point(event.self.x, event.self.y);\n                if (event.self.state === 'start') {\n                    // イベント開始時の scale を保持\n                    this.zoomStartScale = this.canvas.getZoom();\n                }\n                const delta = this.zoomStartScale * event.self.scale;\n                this.canvas.zoomToPoint(point, delta);\n\n                this.fitViewport();\n\n                // イベント終了時\n                if (event.self.state === 'end') {\n                    // ナビゲーションの更新\n                    this.updateCanvasState();\n                }\n            }\n        }\n    }\n\n    /**\n     * マウスホイールによるズームイン・ズームアウト\n     * @param event\n     */\n    private onMouseWheel(event: fabric.IEvent<Event>): void {\n        if (!this.readonly && event.e.type.indexOf('wheel') === 0 && event.pointer) {\n            const evt = event.e as WheelEvent;\n            const { deltaY } = evt;\n            let zoom = this.canvas.getZoom();\n            zoom *= 0.999 ** deltaY;\n\n            const point = event.pointer;\n            this.canvas.zoomToPoint(point, zoom);\n\n            evt.preventDefault();\n            evt.stopPropagation();\n\n            this.fitViewport();\n\n            // ナビゲーションの更新\n            this.updateCanvasState();\n        }\n    }\n\n    private onMouseDown(event: fabric.IEvent<Event>): void {\n        if (this.enablePan) {\n            // ポインタ位置\n            const { clientX: x, clientY: y } = getPointerPosition(event);\n            // ドラッグ開始\n            this.canvas.selection = false; // 選択範囲の矩形を出さない\n            this.dragging = true;\n            this.lastPos = { x, y };\n        }\n    }\n\n    private onMouseMove(event: fabric.IEvent<Event>): void {\n        if (this.dragging) {\n            // ポインタ位置\n            const { clientX: x, clientY: y } = getPointerPosition(event);\n\n            const diffX = x - this.lastPos.x;\n            const diffY = y - this.lastPos.y;\n            this.fitViewport(diffX, diffY);\n\n            this.lastPos = { x, y };\n        }\n    }\n\n    private onMouseUp(): void {\n        if (this.dragging) {\n            const vpt = this.canvas.viewportTransform;\n            if (vpt) {\n                this.canvas.setViewportTransform(vpt);\n            }\n        }\n\n        // ドラッグ終了\n        this.dragging = false;\n        // 複数選択を可能にする\n        this.canvas.selection = this.mode === 'select';\n    }\n\n    /**\n     * 要素が追加されたとき\n     * @param event\n     */\n    private onCreateObject(event: fabric.IEvent<Event>): void {\n        // TODO: UNDO/REDO のための履歴管理\n    }\n\n    // --- dispose ---\n\n    /**\n     * 保持しているデータを破棄する\n     */\n    public dispose(): void {\n        debug('::: dispose PageManager :::');\n        this.canvas.clear();\n        this.canvas.dispose();\n    }\n}\n\nexport default PageManager;\n","import { Point } from '../types/common';\n\nexport const equalPoints = (a: Point, b: Point): boolean => {\n    return a.x === b.x && a.y === b.y;\n};\n","import CloseIcon from '@mui/icons-material/Close';\nimport EditIcon from '@mui/icons-material/Edit';\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport { Box, IconButton, Menu, MenuItem, styled } from '@mui/material';\nimport { MouseEvent, useCallback, useMemo, useState } from 'react';\nimport { AppMode } from '../../../types/common';\nimport { StructureCanvasState } from '../../../types/note';\n\ninterface Props extends StructureCanvasState {\n    mode: AppMode;\n    onEdit?: VoidFunction;\n    onCopy?: VoidFunction;\n    onDelete?: VoidFunction;\n    onCancel?: VoidFunction;\n}\n\nconst Background = styled('div')({\n    display: 'flex',\n    alignItems: 'center',\n    width: '100%',\n    padding: '0 8',\n});\nconst Spacer = styled('div')({\n    flex: 1,\n});\n\nconst CanvasNavigation: React.VFC<Props> = ({\n    mode,\n    coordinates,\n    width,\n    pageZoom,\n    onEdit,\n    onCopy,\n    onDelete,\n    onCancel,\n}) => {\n    const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\n\n    const handleClickMore = useCallback((event: MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget);\n    }, []);\n\n    const handleCloseMenu = useCallback(() => {\n        setAnchorEl(null);\n    }, []);\n\n    const handleCopy = useCallback(() => {\n        onCopy && onCopy();\n        // メニューを閉じる\n        setAnchorEl(null);\n    }, [onCopy]);\n\n    const handleDelete = useCallback(() => {\n        onDelete && onDelete();\n        // メニューを閉じる\n        setAnchorEl(null);\n    }, [onDelete]);\n\n    const [top, left] = useMemo(() => {\n        let top = coordinates.tl.y - 34; // 34 はナビゲーションの高さ\n        const left = coordinates.tl.x;\n\n        if (top < 0) {\n            // ナビゲーションがキャンバスをはみ出す場合は\n            // 下側にナビゲーションを出す\n            top = coordinates.bl.y;\n        }\n\n        return [top, left];\n    }, [coordinates.bl.y, coordinates.tl.x, coordinates.tl.y]);\n\n    return (\n        <Box\n            sx={{\n                position: 'absolute',\n                top,\n                left,\n                width: width * pageZoom,\n            }}\n        >\n            <Background>\n                {mode === 'canvas' && (\n                    <IconButton size=\"small\" onClick={onCancel}>\n                        <CloseIcon />\n                    </IconButton>\n                )}\n                {mode === 'note' && (\n                    <>\n                        <IconButton size=\"small\" onClick={onEdit}>\n                            <EditIcon />\n                        </IconButton>\n                        <Spacer />\n                        <IconButton size=\"small\" onClick={handleClickMore}>\n                            <MoreVertIcon />\n                        </IconButton>\n                    </>\n                )}\n            </Background>\n            <Menu anchorEl={anchorEl} open={Boolean(anchorEl)} onClose={handleCloseMenu}>\n                <MenuItem onClick={handleCopy}>コピー</MenuItem>\n                <MenuItem onClick={handleDelete}>削除</MenuItem>\n            </Menu>\n        </Box>\n    );\n};\n\nexport default CanvasNavigation;\n","import {\n    forwardRef,\n    useCallback,\n    useEffect,\n    useImperativeHandle,\n    useLayoutEffect,\n    useRef,\n    useState,\n} from 'react';\nimport { AppMode } from '../../types/common';\nimport {\n    CommitStructureFunction,\n    DrawSettings,\n    NoteMode,\n    PageProps,\n    StructureCanvasProps,\n    StructureCanvasState,\n} from '../../types/note';\nimport PageManager from './manager';\nimport CanvasNavigation from './nav/CanvasNavigation';\n\ninterface Props extends PageProps {\n    mode: AppMode;\n    tool: NoteMode;\n    viewSize: DOMRect;\n    drawSettings: DrawSettings;\n    onEditCanvas?: (props: StructureCanvasState, callback: CommitStructureFunction) => void;\n    onCloseCanvas?: VoidFunction;\n}\n\nexport interface PageHandler {\n    getActiveStructure: () => StructureCanvasProps | undefined;\n    setActiveStructure: (props: StructureCanvasProps) => void;\n    addStructureCanvas: (props?: StructureCanvasProps) => void;\n    removeStructureCanvas: (props: StructureCanvasProps) => void;\n}\n\nconst Page: React.ForwardRefRenderFunction<PageHandler, Props> = (\n    { mode, tool, viewSize, drawSettings, onEditCanvas, onCloseCanvas, ...props },\n    ref\n) => {\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    const managerRef = useRef<PageManager>();\n\n    const [canvasProps, setCanvasProps] = useState<StructureCanvasState>();\n\n    useImperativeHandle(ref, () => ({\n        getActiveStructure: () => {\n            if (managerRef.current) {\n                return managerRef.current.activeStructure;\n            }\n        },\n        setActiveStructure: (props: StructureCanvasProps) => {\n            if (managerRef.current) {\n                managerRef.current.activeStructure = props;\n            }\n        },\n        addStructureCanvas: (props?: StructureCanvasProps) => {\n            if (managerRef.current) {\n                managerRef.current.addCanvas(props);\n            }\n        },\n        removeStructureCanvas: (props: StructureCanvasProps) => {\n            if (managerRef.current) {\n                managerRef.current.removeCanvas(props.id);\n            }\n        },\n    }));\n\n    /**\n     * 選択された構造データに編集メニューを表示する\n     */\n    const setCanvasState = useCallback((params: StructureCanvasState) => {\n        setCanvasProps(params);\n    }, []);\n\n    /**\n     * 編集メニューを閉じる\n     */\n    const clearCanvasState = useCallback(\n        (closingCanvas = true) => {\n            setCanvasProps(undefined);\n            if (closingCanvas) {\n                onCloseCanvas && onCloseCanvas();\n            }\n        },\n        [onCloseCanvas]\n    );\n\n    /**\n     * キャンバスの編集を開始する\n     */\n    const handleEdit = useCallback(() => {\n        if (onEditCanvas && canvasProps) {\n            if (managerRef.current) {\n                // リサイズのコントロールを非表示にする\n                managerRef.current.activeCanvas?.hideControls();\n            }\n\n            onEditCanvas(canvasProps, (data) => {\n                if (managerRef.current) {\n                    managerRef.current.activeStructure = data;\n                }\n            });\n        }\n    }, [canvasProps, onEditCanvas]);\n\n    const handleCopy = useCallback(() => {\n        if (managerRef.current) {\n            const data = managerRef.current.activeCanvas;\n            if (data) {\n                managerRef.current.addCanvas(data.getCanvasProps());\n            }\n        }\n    }, []);\n\n    const handleDelete = useCallback(() => {\n        if (managerRef.current) {\n            const data = managerRef.current.activeCanvas;\n            if (data) {\n                managerRef.current.removeCanvas(data.getCanvasProps());\n            }\n            setCanvasProps(undefined);\n        }\n    }, []);\n\n    // 初期化\n    useLayoutEffect(() => {\n        if (canvasRef.current && viewSize.width !== 0 && viewSize.height !== 0) {\n            if (typeof managerRef.current === 'undefined') {\n                managerRef.current = new PageManager(canvasRef.current, {\n                    ...props,\n                    setCanvasState,\n                    clearCanvasState,\n                });\n            }\n        }\n    }, [clearCanvasState, props, setCanvasState, viewSize.height, viewSize.width]);\n\n    // AppMode が変更された場合\n    useEffect(() => {\n        if (managerRef.current) {\n            // キャンバスモード時は readonly とする\n            managerRef.current.readonly = mode === 'canvas';\n        }\n    }, [mode]);\n\n    // NoteMode (ツール) が変更された場合\n    useEffect(() => {\n        if (managerRef.current) {\n            managerRef.current.mode = tool;\n        }\n    }, [tool]);\n\n    // 描画ツールが変更された場合\n    useEffect(() => {\n        if (managerRef.current) {\n            managerRef.current.drawSettings = drawSettings;\n        }\n    }, [drawSettings]);\n\n    // DOM要素のリサイズが発生した場合\n    useEffect(() => {\n        if (managerRef.current) {\n            managerRef.current.resize(viewSize);\n        }\n    }, [viewSize]);\n\n    return (\n        <>\n            <canvas ref={canvasRef} width={viewSize.width} height={viewSize.height} />\n            {canvasProps && (\n                <CanvasNavigation\n                    mode={mode}\n                    {...canvasProps}\n                    onEdit={handleEdit}\n                    onCopy={handleCopy}\n                    onDelete={handleDelete}\n                    onCancel={clearCanvasState}\n                />\n            )}\n        </>\n    );\n};\n\nexport default forwardRef(Page);\n","import { Box } from '@mui/material';\nimport { forwardRef, useContext, useEffect, useRef, useState } from 'react';\nimport { AppSettingsContext } from '../../providers/AppSettingsProvider';\nimport { NoteSettingsContext } from '../../providers/NoteSettingsProvider';\nimport { defaultPageProps } from '../../types/note';\nimport Page, { PageHandler } from './Page';\n\nexport type NoteHandler = PageHandler;\n\nconst Note: React.ForwardRefRenderFunction<NoteHandler> = (_, ref) => {\n    // キャンバスの親要素\n    const containerRef = useRef<HTMLDivElement>(null);\n    // 表示領域\n    const [viewSize, setViewSize] = useState<DOMRect>();\n\n    const { mode, editCanvas, closeCanvas } = useContext(AppSettingsContext);\n    const { mode: tool, settings } = useContext(NoteSettingsContext);\n\n    // 要素のリサイズを監視\n    useEffect(() => {\n        const observer = new ResizeObserver((entries) => {\n            const rect = entries[0].target.getBoundingClientRect();\n            setViewSize(rect);\n        });\n\n        if (containerRef.current) {\n            observer.observe(containerRef.current);\n        }\n\n        return () => {\n            observer.disconnect();\n        };\n    }, []);\n\n    return (\n        <Box\n            ref={containerRef}\n            sx={{\n                width: 'auto',\n                height: '100%',\n                backgroundColor: '#ffffff',\n                overscrollBehavior: 'contain',\n                overflow: 'hidden',\n            }}\n        >\n            {viewSize && (\n                <Page\n                    ref={ref}\n                    mode={mode}\n                    tool={tool}\n                    viewSize={viewSize}\n                    drawSettings={settings}\n                    onEditCanvas={editCanvas}\n                    onCloseCanvas={closeCanvas}\n                    {...defaultPageProps}\n                />\n            )}\n        </Box>\n    );\n};\n\nexport default forwardRef(Note);\n","import { Box } from '@mui/material';\nimport { useContext } from 'react';\nimport { AppSettingsContext } from '../providers/AppSettingsProvider';\nimport { ConfigurationContext } from '../providers/ConfigurationProvider';\nimport Canvas from './Canvas';\nimport Note from './Note';\n\nconst MainContainer: React.VFC = () => {\n    const { mode, canvasProps, canvasRef, noteRef } = useContext(AppSettingsContext);\n    const { tool } = useContext(ConfigurationContext);\n\n    return (\n        <Box\n            sx={{\n                position: 'relative',\n                boxSizing: 'border-box',\n                ml: 1,\n                mb: 1,\n                flex: 1,\n                border: (theme) => `1px solid ${theme.palette.divider}`,\n                borderRadius: 1,\n                overflow: 'hidden',\n            }}\n        >\n            <Note ref={noteRef} />\n            {canvasProps && (\n                <Box\n                    sx={{\n                        position: 'absolute',\n                        top: canvasProps.coordinates.tl.y,\n                        left: canvasProps.coordinates.tl.x,\n                        width: canvasProps.width * canvasProps.pageZoom,\n                        height: canvasProps.height * canvasProps.pageZoom,\n                    }}\n                >\n                    <Canvas\n                        ref={canvasRef}\n                        tool={tool}\n                        readonly={mode === 'note'}\n                        {...canvasProps}\n                    />\n                </Box>\n            )}\n        </Box>\n    );\n};\n\nexport default MainContainer;\n","import { ArrowDownward, Delete, Edit, PanToolAlt, Texture } from '@mui/icons-material';\nimport { Stack, ToggleButton, ToggleButtonGroup, Typography } from '@mui/material';\nimport { MouseEvent, ReactElement, useCallback, useContext } from 'react';\nimport { ConfigurationContext } from '../../providers/ConfigurationProvider';\nimport { CanvasTool, isCanvasTool } from '../../types/common';\n\ninterface Props {\n    tool: CanvasTool;\n    onChange: (tool: CanvasTool) => void;\n}\n\ninterface ButtonProps {\n    tool: CanvasTool;\n    icon: ReactElement;\n    label: string;\n}\n\nconst ToolboxButtons: Readonly<Record<CanvasTool, ButtonProps>> = {\n    select: {\n        tool: 'select',\n        icon: <PanToolAlt />,\n        label: '選択',\n    },\n    pen: {\n        tool: 'pen',\n        icon: <Edit />,\n        label: '梁要素の描画',\n    },\n    force: {\n        tool: 'force',\n        icon: <ArrowDownward />,\n        label: '集中荷重の追加',\n    },\n    trapezoid: {\n        tool: 'trapezoid',\n        icon: <Texture />,\n        label: '分布荷重の追加',\n    },\n    delete: {\n        tool: 'delete',\n        icon: <Delete />,\n        label: '要素の削除',\n    },\n};\n\nconst CanvasToolboxCore: React.VFC<Props> = ({ tool, onChange }) => {\n    /**\n     * ツールの変更\n     */\n    const handleChange = useCallback(\n        (_: MouseEvent<HTMLElement>, newValue: string | null) => {\n            if (newValue !== null && isCanvasTool(newValue)) {\n                onChange(newValue);\n            }\n        },\n        [onChange]\n    );\n\n    return (\n        <Stack sx={{ width: 160 }} alignItems=\"flex-start\">\n            <Typography variant=\"caption\">Toolbox</Typography>\n            <ToggleButtonGroup\n                orientation=\"vertical\"\n                value={tool}\n                exclusive\n                fullWidth\n                onChange={handleChange}\n            >\n                {Object.entries(ToolboxButtons).map(([key, { icon, label }]) => (\n                    <ToggleButton\n                        key={key}\n                        value={key}\n                        sx={{ justifyContent: 'flex-start', alignItems: 'center' }}\n                    >\n                        {icon}\n                        <Typography variant=\"caption\" sx={{ ml: 1 }}>\n                            {label}\n                        </Typography>\n                    </ToggleButton>\n                ))}\n            </ToggleButtonGroup>\n        </Stack>\n    );\n};\n\nconst CanvasToolbox: React.VFC = () => {\n    const { tool, setTool } = useContext(ConfigurationContext);\n    return <CanvasToolboxCore tool={tool} onChange={setTool} />;\n};\n\nexport default CanvasToolbox;\n","import { AddBox, AutoFixNormal, Edit, PanToolAlt } from '@mui/icons-material';\nimport {\n    Button,\n    Slider,\n    Stack,\n    TextField,\n    ToggleButton,\n    ToggleButtonGroup,\n    Typography,\n} from '@mui/material';\nimport {\n    ChangeEvent,\n    Dispatch,\n    MouseEvent,\n    ReactElement,\n    SetStateAction,\n    useCallback,\n    useContext,\n} from 'react';\nimport { AppSettingsContext } from '../../providers/AppSettingsProvider';\nimport { NoteSettingsContext } from '../../providers/NoteSettingsProvider';\nimport { DrawSettings, isNoteMode, NoteMode } from '../../types/note';\n\ninterface Props {\n    mode: NoteMode;\n    settings: DrawSettings;\n    onChangeMode: Dispatch<SetStateAction<NoteMode>>;\n    onChangeDrawSettings: Dispatch<SetStateAction<DrawSettings>>;\n    onClickAddCanvas: VoidFunction;\n}\n\nconst DrawModes = ['pen', 'eraser'] as const;\ntype DrawMode = typeof DrawModes[number];\nconst isDrawMode = (item: unknown): item is DrawMode => {\n    if (typeof item === 'string') {\n        return DrawModes.some((mode) => mode === item);\n    }\n    return false;\n};\n\ninterface ButtonProps {\n    mode: NoteMode | DrawMode;\n    icon: ReactElement;\n    label: string;\n}\n\nconst NoteModeButtons: Readonly<Record<NoteMode, ButtonProps>> = {\n    select: {\n        mode: 'select',\n        icon: <PanToolAlt />,\n        label: '選択',\n    },\n    edit: {\n        mode: 'edit',\n        icon: <Edit />,\n        label: '描画',\n    },\n};\n\nconst DrawModeButtons: Readonly<Record<DrawMode, ButtonProps>> = {\n    pen: {\n        mode: 'pen',\n        icon: <Edit />,\n        label: 'ペンツール',\n    },\n    eraser: {\n        mode: 'eraser',\n        icon: <AutoFixNormal />,\n        label: '消しゴム',\n    },\n};\n\nconst MinStrokeWidth = 1;\nconst MaxStrokeWidth = 20;\nconst StrokeWidthStep = 1;\n\nconst NoteToolboxCore: React.VFC<Props> = ({\n    mode,\n    settings,\n    onChangeMode,\n    onChangeDrawSettings,\n    onClickAddCanvas,\n}) => {\n    /**\n     * モードの変更\n     */\n    const handleChangeMode = useCallback(\n        (_: MouseEvent<HTMLElement>, newValue: string | null) => {\n            if (newValue !== null && isNoteMode(newValue)) {\n                onChangeMode(newValue);\n            }\n        },\n        [onChangeMode]\n    );\n\n    /**\n     * 描画ツールの選択\n     */\n    const handleChangeTool = useCallback(\n        (_: MouseEvent<HTMLElement>, newValue: string | null) => {\n            if (newValue !== null && isDrawMode(newValue)) {\n                onChangeDrawSettings((state) => ({\n                    ...state,\n                    eraser: newValue === 'eraser',\n                }));\n            }\n        },\n        [onChangeDrawSettings]\n    );\n\n    const handleChangeStrokeWidth = useCallback(\n        (_: Event, value: number | number[]) => {\n            if (typeof value === 'number') {\n                onChangeDrawSettings((state) => ({\n                    ...state,\n                    strokeWidth: value,\n                }));\n            }\n        },\n        [onChangeDrawSettings]\n    );\n\n    const handleChangeStroke = useCallback(\n        (event: ChangeEvent<HTMLInputElement>) => {\n            if (event.target.checkValidity()) {\n                const { value } = event.target;\n                onChangeDrawSettings((state) => ({\n                    ...state,\n                    stroke: value,\n                }));\n            }\n        },\n        [onChangeDrawSettings]\n    );\n\n    return (\n        <Stack sx={{ width: 160 }} alignItems=\"flex-start\">\n            <Typography variant=\"caption\">Toolbox</Typography>\n            {/* 選択 / 編集の切り替え */}\n            <ToggleButtonGroup\n                orientation=\"vertical\"\n                value={mode}\n                exclusive\n                fullWidth\n                onChange={handleChangeMode}\n            >\n                {Object.entries(NoteModeButtons).map(([key, { icon, label }]) => (\n                    <ToggleButton\n                        key={key}\n                        value={key}\n                        sx={{ justifyContent: 'flex-start', alignItems: 'center' }}\n                    >\n                        {icon}\n                        <Typography variant=\"caption\" sx={{ ml: 1 }}>\n                            {label}\n                        </Typography>\n                    </ToggleButton>\n                ))}\n            </ToggleButtonGroup>\n            <Typography variant=\"caption\" sx={{ mt: 1 }}>\n                描画ツール\n            </Typography>\n            {/* eraser */}\n            <ToggleButtonGroup\n                orientation=\"vertical\"\n                value={settings.eraser ? 'eraser' : 'pen'}\n                exclusive\n                fullWidth\n                disabled={mode !== 'edit'}\n                onChange={handleChangeTool}\n            >\n                {Object.entries(DrawModeButtons).map(([key, { icon, label }]) => (\n                    <ToggleButton\n                        key={key}\n                        value={key}\n                        sx={{ justifyContent: 'flex-start', alignItems: 'center' }}\n                    >\n                        {icon}\n                        <Typography variant=\"caption\" sx={{ ml: 1 }}>\n                            {label}\n                        </Typography>\n                    </ToggleButton>\n                ))}\n            </ToggleButtonGroup>\n            {/* strokeWidth */}\n            <Typography variant=\"caption\" sx={{ mt: 1 }}>\n                太さ\n            </Typography>\n            <Slider\n                sx={{ ml: 1, mb: 2, boxSizing: 'border-box', width: 140 }}\n                value={settings.strokeWidth}\n                min={MinStrokeWidth}\n                max={MaxStrokeWidth}\n                step={StrokeWidthStep}\n                valueLabelDisplay=\"auto\"\n                disabled={mode !== 'edit'}\n                onChange={handleChangeStrokeWidth}\n            />\n            {/* stroke */}\n            <TextField\n                type=\"color\"\n                label=\"ペンの色\"\n                value={settings.stroke}\n                disabled={mode !== 'edit' || settings.eraser}\n                fullWidth\n                margin=\"dense\"\n                size=\"small\"\n                onChange={handleChangeStroke}\n            />\n            {/* 構造データの追加 */}\n            <Button\n                startIcon={<AddBox />}\n                variant=\"contained\"\n                fullWidth\n                sx={{ mt: 2 }}\n                onClick={onClickAddCanvas}\n            >\n                構造データ追加\n            </Button>\n        </Stack>\n    );\n};\n\nconst NoteToolbox: React.VFC = () => {\n    const { noteRef } = useContext(AppSettingsContext);\n    const props = useContext(NoteSettingsContext);\n\n    /**\n     * 構造データ追加\n     */\n    const handleAddCanvas = useCallback(() => {\n        noteRef.current?.addStructureCanvas();\n    }, [noteRef]);\n\n    return <NoteToolboxCore {...props} onClickAddCanvas={handleAddCanvas} />;\n};\n\nexport default NoteToolbox;\n","import { useContext } from 'react';\nimport { AppSettingsContext } from '../../providers/AppSettingsProvider';\nimport CanvasToolbox from './CanvasToolbox';\nimport NoteToolbox from './NoteToolbox';\n\nconst Toolbox: React.VFC = () => {\n    const { mode } = useContext(AppSettingsContext);\n    if (mode === 'canvas') {\n        return <CanvasToolbox />;\n    }\n    return <NoteToolbox />;\n};\n\nexport default Toolbox;\n","import { Box } from '@mui/material';\nimport { useCallback, useEffect, useState } from 'react';\nimport { DOMSize } from '../types/common';\nimport Header from './Header';\nimport MainContainer from './MainContainer';\nimport Toolbox from './Toolbox';\n\nconst Layout: React.VFC = () => {\n    const [windowRect, setWindowRect] = useState<DOMSize>({ width: 0, height: 0 });\n\n    const fitWindowSize = useCallback(() => {\n        const { innerHeight, innerWidth } = window;\n        setWindowRect({\n            height: innerHeight,\n            width: innerWidth,\n        });\n    }, []);\n\n    useEffect(() => {\n        fitWindowSize();\n        window.addEventListener('resize', fitWindowSize);\n\n        return () => {\n            window.removeEventListener('resize', fitWindowSize);\n        };\n    }, [fitWindowSize]);\n\n    return (\n        <Box sx={{ ...windowRect, overflow: 'hidden' }}>\n            <Header />\n            <Box\n                sx={{\n                    boxSizing: 'border-box',\n                    width: 'auto',\n                    height: 'calc(100% - 48px)',\n                    display: 'flex',\n                    flexDirection: 'row',\n                    flexWrap: 'nowrap',\n                    alignItems: 'stretch',\n                    pt: 1,\n                    px: 1,\n                }}\n            >\n                <Toolbox />\n                <MainContainer />\n            </Box>\n        </Box>\n    );\n};\n\nexport default Layout;\n","import { createTheme, CssBaseline, ThemeProvider } from '@mui/material';\nimport React from 'react';\nimport AppSettingsProvider from '../providers/AppSettingsProvider';\nimport ConfigurationProvider from '../providers/ConfigurationProvider';\nimport NoteSettingsProvider from '../providers/NoteSettingsProvider';\nimport Layout from './Layout';\n\nconst theme = createTheme();\n\nconst App: React.VFC = () => {\n    return (\n        <ThemeProvider theme={theme}>\n            <AppSettingsProvider>\n                <ConfigurationProvider>\n                    <NoteSettingsProvider>\n                        <CssBaseline />\n                        <Layout />\n                    </NoteSettingsProvider>\n                </ConfigurationProvider>\n            </AppSettingsProvider>\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}