{"version":3,"sources":["providers/ConfigurationProvider.tsx","types/shape.ts","types/note.ts","providers/NoteSettingsProvider.tsx","components/Version.tsx","components/Header.tsx","components/Canvas/util/vector.ts","components/Note/layer/Draw.tsx","components/Note/layer/Grid.tsx","components/Note/Page.tsx","components/Canvas/util/common.ts","components/Note/index.tsx","components/NoteContainer.tsx","components/Toolbox/NoteToolbox.tsx","components/Layout.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["ConfigurationContext","createContext","undefined","ConfigurationProvider","children","useState","tool","setTool","Provider","value","emptyStructure","unit","force","length","nodes","beams","forces","trapezoids","NoteModes","PageSize","A3","width","height","A4","B4","B5","defaultDrawSettings","stroke","strokeWidth","eraser","lineJoin","lineCap","defaultPageProps","size","drawings","structures","data","x","y","NoteSettingsContext","NoteSettingsProvider","mode","setMode","settings","setSettings","onChangeMode","onChangeDrawSettings","hash","process","substring","date","version","Version","Typography","variant","sx","ml","Header","AppBar","position","Toolbar","component","color","Vector","Draw","points","map","index","lineProps","globalCompositeOperation","defaultLineProps","id","dash","listening","Grid","layerSize","useMemo","horizontalLines","lines","count","push","verticalLines","props","Page","viewBox","onChange","stageRef","useRef","useContext","isDrawing","setPoints","pageSize","handleDragMove","useCallback","event","target","attrs","current","newX","newY","modified","Math","abs","setPosition","handlePointerDown","point","getStage","getPointerPosition","getPosition","handlePointerMove","state","handlePointerUp","_","page","JSON","parse","stringify","clone","ref","draggable","onDragMove","onPointerDown","onPointerMove","onPointerUp","Note","containerRef","setViewBox","pageProps","setPageProps","useEffect","observer","ResizeObserver","entries","contentRect","observe","disconnect","Box","backgroundColor","overscrollBehavior","overflow","NoteContainer","boxSizing","mb","flex","border","theme","palette","divider","borderRadius","DrawModes","NoteModeButtons","select","icon","PanToolAlt","label","edit","Edit","DrawModeButtons","pen","AutoFixNormal","NoteToolboxCore","handleChangeMode","newValue","item","some","handleChangeTool","handleChangeStrokeWidth","handleChangeStroke","checkValidity","Stack","alignItems","ToggleButtonGroup","orientation","exclusive","fullWidth","Object","key","ToggleButton","justifyContent","mt","disabled","Slider","min","max","step","marks","valueLabelDisplay","TextField","type","margin","NoteToolbox","Layout","windowRect","setWindowRect","fitWindowSize","window","innerHeight","innerWidth","addEventListener","removeEventListener","display","flexDirection","flexWrap","pt","px","createTheme","App","ThemeProvider","CssBaseline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.80cfc1f6.chunk.js","sourcesContent":["import { createContext, useState } from 'react';\nimport { CanvasTool } from '../types/common';\n\ninterface Props {\n    children: React.ReactNode;\n}\n\ninterface IConfigurationContext {\n    tool: CanvasTool;\n    setTool: (tool: CanvasTool) => void;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nexport const ConfigurationContext = createContext<IConfigurationContext>(undefined!);\n\nconst ConfigurationProvider: React.VFC<Props> = ({ children }) => {\n    const [tool, setTool] = useState<CanvasTool>('select');\n\n    return (\n        <ConfigurationContext.Provider value={{ tool, setTool }}>\n            {children}\n        </ConfigurationContext.Provider>\n    );\n};\n\nexport default ConfigurationProvider;\n","/**\n * 単位: 力\n */\nexport const ForceUnitValues = ['N', 'kN'] as const;\n\n/**\n * 単位: 長さ\n */\nexport const LengthUnitValues = ['mm', 'cm', 'm'] as const;\n\nexport type ForceUnitType = typeof ForceUnitValues[number];\nexport type LengthUnitType = typeof LengthUnitValues[number];\n\n/**\n * 単位\n */\nexport interface Unit {\n    force: ForceUnitType;\n    length: LengthUnitType;\n}\n\nexport const NodePinTypes = ['free', 'pin', 'pinX', 'pinZ', 'fixX', 'fix'] as const;\nexport type NodePinType = typeof NodePinTypes[number];\n\nexport const isNodePinType = (item: unknown): item is NodePinType => {\n    if (typeof item === 'string') {\n        return NodePinTypes.some((type) => type === item);\n    }\n    return false;\n};\n\nexport interface Node {\n    id: string;\n    x: number;\n    y: number;\n    pin?: NodePinType;\n}\n\nexport const isNode = (item: unknown): item is Node => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return (\n            typeof value.id === 'string' &&\n            typeof value.x === 'number' &&\n            typeof value.y === 'number'\n        );\n    }\n    return false;\n};\n\nexport interface Beam {\n    id: string;\n    name: string;\n    nodeI: string;\n    nodeJ: string;\n}\n\nexport interface Force {\n    id: string;\n    name: string;\n    beam: string;\n    force: number;\n    // i端からの距離 (0 〜 1)\n    distanceI: number;\n}\nexport const isForce = (item: unknown): item is Force => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return (\n            typeof value.id === 'string' &&\n            typeof value.name === 'string' &&\n            typeof value.beam === 'string' &&\n            typeof value.force === 'number' &&\n            typeof value.distanceI === 'number'\n        );\n    }\n    return false;\n};\n\nexport interface Trapezoid {\n    id: string;\n    name: string;\n    beam: string;\n    // kN/m\n    forceI: number;\n    // kN/m\n    forceJ: number;\n    // i端からの距離 (0 〜 1, distanceI + distanceJ <= 1)\n    distanceI: number;\n    // j端からの距離 (0 〜 1, distanceI + distanceJ <= 1)\n    distanceJ: number;\n    // 角度、デフォルト 90度、-179 〜 180 度の間で指定 (-180 = 180)\n    angle?: number;\n    // 全体座標系に垂直か、部材に垂直か デフォルト false\n    isGlobal?: boolean;\n}\n\nexport const isTrapezoid = (item: unknown): item is Trapezoid => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return (\n            typeof value.id === 'string' &&\n            typeof value.name === 'string' &&\n            typeof value.beam === 'string' &&\n            typeof value.forceI === 'number' &&\n            typeof value.distanceI === 'number' &&\n            typeof value.forceJ === 'number' &&\n            typeof value.distanceJ === 'number'\n        );\n    }\n    return false;\n};\n\nexport interface Structure {\n    unit: Unit;\n    nodes: Node[];\n    beams: Beam[];\n    forces: Force[];\n    trapezoids: Trapezoid[];\n}\n\nexport type StructureFieldType = keyof Omit<Structure, 'unit'>;\n\nexport const defaultUnit: Unit = {\n    force: 'kN',\n    length: 'm',\n};\n\nexport const emptyStructure: Structure = {\n    unit: defaultUnit,\n    nodes: [],\n    beams: [],\n    forces: [],\n    trapezoids: [],\n};\n","import { LineCap, LineJoin } from 'konva/lib/Shape';\nimport { DOMSize } from './common';\nimport { emptyStructure, Structure } from './shape';\n\nconst NoteModes = ['select', 'edit'] as const;\nexport type NoteMode = typeof NoteModes[number];\nexport const isNoteMode = (item: unknown): item is NoteMode => {\n    if (typeof item === 'string') {\n        return NoteModes.some((mode) => mode === item);\n    }\n    return false;\n};\n\nexport const PageSizeTypes = ['A4', 'A3', 'B5', 'B4'] as const;\nexport type PageSizeType = typeof PageSizeTypes[number];\n\nexport const PageSize: Record<PageSizeType, DOMSize> = {\n    A3: {\n        width: 0,\n        height: 0,\n    },\n    A4: {\n        width: 2970,\n        height: 2100,\n    },\n    B4: {\n        width: 0,\n        height: 0,\n    },\n    B5: {\n        width: 0,\n        height: 0,\n    },\n};\n\nexport interface StructureCanvasProps {\n    data: Structure;\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n}\n\nexport const MinCanvasSize: DOMSize = {\n    width: 160,\n    height: 90,\n};\n\nexport interface DrawingProps {\n    stroke: string;\n    strokeWidth: number;\n    eraser?: boolean;\n    points: number[];\n    lineJoin?: LineJoin;\n    lineCap?: LineCap;\n}\nexport type DrawSettings = Omit<DrawingProps, 'points'>;\nexport const defaultDrawSettings: DrawSettings = {\n    stroke: '#000000',\n    strokeWidth: 4,\n    eraser: false,\n    lineJoin: 'round',\n    lineCap: 'round',\n};\n\nexport interface PageProps {\n    size: PageSizeType;\n    drawings: DrawingProps[];\n    structures: StructureCanvasProps[];\n}\n\nexport const defaultPageProps: PageProps = {\n    size: 'A4',\n    drawings: [],\n    structures: [\n        {\n            data: emptyStructure,\n            x: 100,\n            y: 100,\n            ...MinCanvasSize,\n        },\n    ],\n};\n","import { createContext, Dispatch, SetStateAction, useState } from 'react';\nimport { defaultDrawSettings, DrawSettings, NoteMode } from '../types/note';\n\ninterface Props {\n    children: React.ReactNode;\n}\n\ninterface INoteSettingsContext {\n    mode: NoteMode;\n    settings: DrawSettings;\n    onChangeMode: Dispatch<SetStateAction<NoteMode>>;\n    onChangeDrawSettings: Dispatch<SetStateAction<DrawSettings>>;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nexport const NoteSettingsContext = createContext<INoteSettingsContext>(undefined!);\n\nconst NoteSettingsProvider: React.VFC<Props> = ({ children }) => {\n    const [mode, setMode] = useState<NoteMode>('select');\n    const [settings, setSettings] = useState<DrawSettings>(defaultDrawSettings);\n\n    return (\n        <NoteSettingsContext.Provider\n            value={{ mode, settings, onChangeMode: setMode, onChangeDrawSettings: setSettings }}\n        >\n            {children}\n        </NoteSettingsContext.Provider>\n    );\n};\n\nexport default NoteSettingsProvider;\n","import { Typography } from '@mui/material';\n\nconst hash = process.env.REACT_APP_GIT_COMMIT_HASH?.substring(0, 7) ?? '';\nconst date = process.env.REACT_APP_GIT_COMMIT_DATE ?? '';\nconst version = process.env.REACT_APP_PACKAGE_VERSION ?? '';\n\nconst Version: React.VFC = () => {\n    return (\n        <Typography\n            variant=\"caption\"\n            sx={{ ml: 2 }}\n        >{`ver ${version} (${hash}: ${date})`}</Typography>\n    );\n};\n\nexport default Version;\n","import { AppBar, Toolbar, Typography } from '@mui/material';\nimport Version from './Version';\n\nconst Header: React.VFC = () => {\n    return (\n        <AppBar position=\"static\">\n            <Toolbar variant=\"dense\">\n                <Typography component=\"h1\" variant=\"h6\" color=\"inherit\">\n                    Drawing Sample\n                </Typography>\n                <Version />\n            </Toolbar>\n        </AppBar>\n    );\n};\n\nexport default Header;\n","import Vector from 'victor';\n\nexport { Vector };\n\n// X方向のベクトル\nexport const vX = new Vector(1, 0);\n// Y方向のベクトル\nexport const vY = new Vector(0, 1);\n\n/**\n * v1 と v2 の間にある vp を取得する\n * @param v1\n * @param v2\n * @param alpha\n * @returns\n */\nexport const lerp = (v1: Vector, v2: Vector, alpha: number): Vector => {\n    if (alpha >= 1) {\n        return v2;\n    }\n    if (alpha <= 0) {\n        return v1;\n    }\n    const dir = v2.clone().subtract(v1).normalize();\n    const distance = v1.distance(v2);\n    const mv = dir.multiplyScalar(distance * alpha);\n    return v1.clone().add(mv);\n};\n\n/**\n * v1 と v2 に直交する単位ベクトルを返す\n * @param v1\n * @param v2\n * @returns\n */\nexport const verticalNormalizeVector = (v1: Vector, v2: Vector): Vector => {\n    const dir = v2.clone().subtract(v1).normalize();\n    const v = new Vector(dir.y, dir.x * -1).normalize();\n\n    const value = vY.dot(v);\n    if (value > 0) {\n        v.invert();\n    }\n\n    return v;\n};\n","import { Layer, Line } from 'react-konva';\nimport { DrawingProps, DrawSettings } from '../../../types/note';\n\ninterface Props {\n    drawings: DrawingProps[];\n    // 描画中のデータ\n    settings: DrawSettings;\n    points?: number[];\n}\n\nconst Draw: React.VFC<Props> = ({ drawings, settings, points }) => {\n    return (\n        <Layer>\n            {drawings.map(({ eraser = false, ...lineProps }, index) => (\n                <Line\n                    key={`note-drawing-${index}`}\n                    {...lineProps}\n                    globalCompositeOperation={eraser ? 'destination-out' : 'source-over'}\n                />\n            ))}\n            {points && (\n                <Line\n                    {...settings}\n                    points={points}\n                    globalCompositeOperation={settings.eraser ? 'destination-out' : 'source-over'}\n                />\n            )}\n        </Layer>\n    );\n};\n\nexport default Draw;\n","import { useMemo } from 'react';\nimport { Layer, Line } from 'react-konva';\nimport { PageSize, PageSizeType } from '../../../types/note';\n\ninterface LineProps {\n    id: string;\n    points: number[];\n    stroke: string;\n    strokeWidth: number;\n    dash: [number, number];\n    listening: boolean;\n}\n\nconst defaultLineProps: LineProps = {\n    id: '',\n    points: [],\n    stroke: '#c9e1ff',\n    strokeWidth: 1,\n    dash: [5, 3],\n    listening: false,\n};\n\nconst GridSize = 50;\n\ninterface Props {\n    size: PageSizeType;\n}\n\nconst Grid: React.VFC<Props> = ({ size }) => {\n    const layerSize = useMemo(() => {\n        return PageSize[size];\n    }, [size]);\n\n    const horizontalLines: LineProps[] = useMemo(() => {\n        const lines: LineProps[] = [];\n        let count = 1;\n        for (let y = 0; y <= layerSize.height; y += GridSize) {\n            lines.push({\n                ...defaultLineProps,\n                id: `Horizontal_${count}`,\n                points: [0, y, layerSize.width, y],\n            });\n            count++;\n        }\n        return lines;\n    }, [layerSize]);\n\n    const verticalLines: LineProps[] = useMemo(() => {\n        const lines: LineProps[] = [];\n        let count = 1;\n        for (let x = 0; x <= layerSize.width; x += GridSize) {\n            lines.push({\n                ...defaultLineProps,\n                id: `Vertical_${count}`,\n                points: [x, 0, x, layerSize.height],\n            });\n            count++;\n        }\n        return lines;\n    }, [layerSize]);\n\n    return (\n        <Layer>\n            {/* horizontal */}\n            {horizontalLines.map((props) => (\n                <Line key={props.id} {...props} />\n            ))}\n            {/* vertical */}\n            {verticalLines.map((props) => (\n                <Line key={props.id} {...props} />\n            ))}\n        </Layer>\n    );\n};\n\nexport default Grid;\n","import Konva from 'konva';\nimport { KonvaEventObject } from 'konva/lib/Node';\nimport {\n    Dispatch,\n    SetStateAction,\n    useCallback,\n    useContext,\n    useMemo,\n    useRef,\n    useState,\n} from 'react';\nimport { Stage } from 'react-konva';\nimport { NoteSettingsContext } from '../../providers/NoteSettingsProvider';\nimport { DOMSize } from '../../types/common';\nimport { PageProps, PageSize } from '../../types/note';\nimport { clone } from '../Canvas/util';\nimport Draw from './layer/Draw';\nimport Grid from './layer/Grid';\n\ninterface Props extends PageProps {\n    viewBox: DOMSize;\n    onChange: Dispatch<SetStateAction<PageProps>>;\n}\n\nconst Page: React.VFC<Props> = ({ viewBox, size, drawings, onChange }) => {\n    const stageRef = useRef<Konva.Stage>(null);\n    const { mode, settings } = useContext(NoteSettingsContext);\n\n    // 描画用\n    const isDrawing = useRef<boolean>();\n    const [points, setPoints] = useState<number[]>([]);\n\n    const pageSize = useMemo(() => {\n        return PageSize[size];\n    }, [size]);\n\n    /**\n     * ページサイズの範囲で表示領域を移動する\n     */\n    const handleDragMove = useCallback(\n        (event: KonvaEventObject<Event>) => {\n            const { x, y } = event.target.attrs;\n            if (stageRef.current && typeof x === 'number' && typeof y === 'number') {\n                let [newX, newY] = [x, y];\n                let modified = false;\n\n                if (newX > 0) {\n                    newX = 0;\n                    modified = true;\n                } else if (Math.abs(newX) + viewBox.width > pageSize.width) {\n                    newX = viewBox.width - pageSize.width;\n                    modified = true;\n                }\n\n                if (newY > 0) {\n                    newY = 0;\n                    modified = true;\n                } else if (Math.abs(newY) + viewBox.height > pageSize.height) {\n                    newY = viewBox.height - pageSize.height;\n                    modified = true;\n                }\n\n                if (modified) {\n                    stageRef.current.setPosition({ x: newX, y: newY });\n                }\n            }\n        },\n        [pageSize.height, pageSize.width, viewBox.height, viewBox.width]\n    );\n\n    const handlePointerDown = useCallback(\n        (event: KonvaEventObject<Event>) => {\n            if (mode !== 'edit') {\n                return;\n            }\n\n            const point = event.target.getStage()?.getPointerPosition();\n            if (stageRef.current && point) {\n                isDrawing.current = true;\n\n                const { x, y } = stageRef.current.getPosition();\n                setPoints([point.x + Math.abs(x), point.y + Math.abs(y)]);\n            }\n        },\n        [mode]\n    );\n\n    const handlePointerMove = useCallback(\n        (event: KonvaEventObject<Event>) => {\n            if (mode !== 'edit') {\n                return;\n            }\n            if (!isDrawing.current) {\n                return;\n            }\n\n            const point = event.target.getStage()?.getPointerPosition();\n            if (stageRef.current && point) {\n                const { x, y } = stageRef.current.getPosition();\n                setPoints((state) => [...state, point.x + Math.abs(x), point.y + Math.abs(y)]);\n            }\n        },\n        [mode]\n    );\n\n    const handlePointerUp = useCallback(\n        (_: KonvaEventObject<Event>) => {\n            if (mode !== 'edit') {\n                return;\n            }\n            if (!isDrawing.current) {\n                return;\n            }\n\n            isDrawing.current = false;\n            // 更新を確定\n            onChange((page) => {\n                const data = clone(page);\n                // 描画データを追加\n                data.drawings.push({\n                    ...settings,\n                    points,\n                });\n\n                return data;\n            });\n            // 現在の描画データをクリア\n            setPoints([]);\n        },\n        [mode, onChange, points, settings]\n    );\n\n    return (\n        <Stage\n            ref={stageRef}\n            width={viewBox.width}\n            height={viewBox.height}\n            draggable={mode === 'select'}\n            onDragMove={handleDragMove}\n            onPointerDown={handlePointerDown}\n            onPointerMove={handlePointerMove}\n            onPointerUp={handlePointerUp}\n        >\n            <Grid size={size} />\n            <Draw drawings={drawings} settings={settings} points={points} />\n        </Stage>\n    );\n};\n\nexport default Page;\n","import { Point } from '../types';\nimport { lerp, Vector } from './vector';\n\nexport const clone = <T>(data: T): T => {\n    return JSON.parse(JSON.stringify(data)) as T;\n};\n\nexport const round = (value: number, figure = 3): number => {\n    const n = 10 ** figure;\n    const result = Math.round(value * n) / n;\n    return result;\n};\n\nconst snapping = (value: number, snapSize = 25): number => {\n    const n = value / snapSize;\n    const i = Math.round(n) * snapSize;\n    return i;\n};\n\nexport const DEFAULT_SNAP_SIZE = 25;\n\nexport const snap = ([x, y]: [number, number], snapSize = DEFAULT_SNAP_SIZE): [number, number] => {\n    return [snapping(x, snapSize), snapping(y, snapSize)];\n};\n\nconst InsideArrowCount = 10;\nconst InsideArrowInterval = 25;\nconst InsideArrowMinInterval = 10;\n\n/**\n * 開始点から終了点まで等間隔に点を取る\n * @param start\n * @param end\n * @param direction\n * @returns\n */\nexport const getInsidePoints = (start: Vector, end: Vector, direction: Vector): Vector[] => {\n    const points: Vector[] = [];\n    // 2点間の距離\n    const distance = start.distance(end);\n    // 分割数\n    let count = InsideArrowCount;\n    // 間隔\n    let interval = distance / (count + 1);\n    while (interval < InsideArrowInterval && count > 0) {\n        count--;\n        interval = distance / (count + 1);\n    }\n\n    if (count > 0) {\n        // 始点から interval の間隔で count 個 点を取る\n        for (let i = 1; i <= count; i++) {\n            const point = start.clone().add(direction.clone().multiplyScalar(interval * i));\n            points.push(point);\n        }\n    } else {\n        // 半分にしてみる\n        interval = distance / 2;\n        if (interval >= InsideArrowMinInterval) {\n            // 半分の位置に点を置く\n            const point = lerp(start, end, 0.5);\n            points.push(point);\n        }\n    }\n\n    return points;\n};\n\n/**\n * 開始点からある方向に伸ばした線が対象となる線と交わる点を取得する\n * @param targetLine 対象となる Line [始点、終点、傾き、切片]\n * @param start 開始点\n * @param dir 方向\n * @returns 交点（なければ null）\n */\nexport const intercectPoint = (\n    targetLine: [Vector, Vector, number, number],\n    start: Vector,\n    dir: Vector\n): Point | null => {\n    const [pi, pj, slope1, intercept1] = targetLine;\n    let point: Point | null = null;\n    try {\n        // dir の傾き\n        const end: Vector = start.clone().add(dir);\n        const slope2 = end.x - start.x !== 0 ? (end.y - start.y) / (end.x - start.x) : NaN;\n        // dir の切片\n        const intercept2 = isNaN(slope2) ? NaN : start.y - slope2 * start.x;\n\n        if (slope1 === slope2) {\n            // 平行なので交点なし\n            return null;\n        }\n\n        if (!isNaN(slope1) && !isNaN(slope2)) {\n            // どちらも垂直でない\n            const px = (intercept2 - intercept1) / (slope1 - slope2);\n            const py = slope1 * px + intercept1;\n\n            point = [px, py];\n        } else if (isNaN(slope1)) {\n            // 対象の Line が垂直\n            const px = pi.x;\n            const py = px * slope2 + intercept2;\n\n            point = [px, py];\n        } else if (isNaN(slope2)) {\n            // dir が垂直\n            const px = start.x;\n            const py = px * slope1 + intercept1;\n\n            point = [px, py];\n        }\n\n        // 交点が Line の内側？\n        if (point) {\n            const [x, y] = point;\n            const rangeX = [pi.x, pj.x].sort((a, b) => a - b);\n            const rangeY = [pi.y, pj.y].sort((a, b) => a - b);\n            if (x >= rangeX[0] && x <= rangeX[1] && y >= rangeY[0] && y <= rangeY[1]) {\n                return point;\n            }\n        }\n        return null;\n    } catch (err) {\n        console.error(err);\n    }\n\n    return null;\n};\n","import { Box } from '@mui/material';\nimport { useEffect, useRef, useState } from 'react';\nimport { DOMSize } from '../../types/common';\nimport { defaultPageProps, PageProps } from '../../types/note';\nimport Page from './Page';\n\nconst Note: React.VFC = () => {\n    // キャンバスの親要素\n    const containerRef = useRef<HTMLDivElement>(null);\n    // 表示領域\n    const [viewBox, setViewBox] = useState<DOMSize>({ width: 0, height: 0 });\n    // ページデータ\n    const [pageProps, setPageProps] = useState<PageProps>(defaultPageProps);\n\n    // 要素のリサイズを監視\n    useEffect(() => {\n        const observer = new ResizeObserver((entries) => {\n            const { width, height } = entries[0].contentRect;\n            setViewBox({\n                width,\n                height,\n            });\n        });\n\n        if (containerRef.current) {\n            observer.observe(containerRef.current);\n        }\n\n        return () => {\n            observer.disconnect();\n        };\n    }, []);\n\n    return (\n        <Box\n            ref={containerRef}\n            sx={{\n                width: 'auto',\n                height: '100%',\n                backgroundColor: '#ffffff',\n                overscrollBehavior: 'contain',\n                overflow: 'hidden',\n            }}\n        >\n            <Page viewBox={viewBox} {...pageProps} onChange={setPageProps} />\n        </Box>\n    );\n};\n\nexport default Note;\n","import { Box } from '@mui/material';\nimport Note from './Note';\n\nconst NoteContainer: React.VFC = () => {\n    return (\n        <Box\n            sx={{\n                boxSizing: 'border-box',\n                ml: 1,\n                mb: 1,\n                flex: 1,\n                border: (theme) => `1px solid ${theme.palette.divider}`,\n                borderRadius: 1,\n                overflow: 'hidden',\n            }}\n        >\n            <Note />\n        </Box>\n    );\n};\n\nexport default NoteContainer;\n","import { AutoFixNormal, Edit, PanToolAlt } from '@mui/icons-material';\nimport {\n    Slider,\n    Stack,\n    TextField,\n    ToggleButton,\n    ToggleButtonGroup,\n    Typography,\n} from '@mui/material';\nimport {\n    ChangeEvent,\n    Dispatch,\n    MouseEvent,\n    ReactElement,\n    SetStateAction,\n    useCallback,\n    useContext,\n} from 'react';\nimport { NoteSettingsContext } from '../../providers/NoteSettingsProvider';\nimport { DrawSettings, isNoteMode, NoteMode } from '../../types/note';\n\ninterface Props {\n    mode: NoteMode;\n    settings: DrawSettings;\n    onChangeMode: Dispatch<SetStateAction<NoteMode>>;\n    onChangeDrawSettings: Dispatch<SetStateAction<DrawSettings>>;\n}\n\nconst DrawModes = ['pen', 'eraser'] as const;\ntype DrawMode = typeof DrawModes[number];\nconst isDrawMode = (item: unknown): item is DrawMode => {\n    if (typeof item === 'string') {\n        return DrawModes.some((mode) => mode === item);\n    }\n    return false;\n};\n\ninterface ButtonProps {\n    mode: NoteMode | DrawMode;\n    icon: ReactElement;\n    label: string;\n}\n\nconst NoteModeButtons: Readonly<Record<NoteMode, ButtonProps>> = {\n    select: {\n        mode: 'select',\n        icon: <PanToolAlt />,\n        label: '選択',\n    },\n    edit: {\n        mode: 'edit',\n        icon: <Edit />,\n        label: '描画',\n    },\n};\n\nconst DrawModeButtons: Readonly<Record<DrawMode, ButtonProps>> = {\n    pen: {\n        mode: 'pen',\n        icon: <Edit />,\n        label: 'ペンツール',\n    },\n    eraser: {\n        mode: 'eraser',\n        icon: <AutoFixNormal />,\n        label: '消しゴム',\n    },\n};\n\nconst MinStrokeWidth = 4;\nconst MaxStrokeWidth = 20;\nconst StrokeWidthStep = 4;\n\nconst NoteToolboxCore: React.VFC<Props> = ({\n    mode,\n    settings,\n    onChangeMode,\n    onChangeDrawSettings,\n}) => {\n    /**\n     * モードの変更\n     */\n    const handleChangeMode = useCallback(\n        (_: MouseEvent<HTMLElement>, newValue: string | null) => {\n            if (newValue !== null && isNoteMode(newValue)) {\n                onChangeMode(newValue);\n            }\n        },\n        [onChangeMode]\n    );\n\n    /**\n     * 描画ツールの選択\n     */\n    const handleChangeTool = useCallback(\n        (_: MouseEvent<HTMLElement>, newValue: string | null) => {\n            if (newValue !== null && isDrawMode(newValue)) {\n                onChangeDrawSettings((state) => ({\n                    ...state,\n                    eraser: newValue === 'eraser',\n                }));\n            }\n        },\n        [onChangeDrawSettings]\n    );\n\n    const handleChangeStrokeWidth = useCallback(\n        (_: Event, value: number | number[]) => {\n            if (typeof value === 'number') {\n                onChangeDrawSettings((state) => ({\n                    ...state,\n                    strokeWidth: value,\n                }));\n            }\n        },\n        [onChangeDrawSettings]\n    );\n\n    const handleChangeStroke = useCallback(\n        (event: ChangeEvent<HTMLInputElement>) => {\n            if (event.target.checkValidity()) {\n                const { value } = event.target;\n                onChangeDrawSettings((state) => ({\n                    ...state,\n                    stroke: value,\n                }));\n            }\n        },\n        [onChangeDrawSettings]\n    );\n\n    return (\n        <Stack sx={{ width: 160 }} alignItems=\"flex-start\">\n            <Typography variant=\"caption\">Toolbox</Typography>\n            {/* 選択 / 編集の切り替え */}\n            <ToggleButtonGroup\n                orientation=\"vertical\"\n                value={mode}\n                exclusive\n                fullWidth\n                onChange={handleChangeMode}\n            >\n                {Object.entries(NoteModeButtons).map(([key, { icon, label }]) => (\n                    <ToggleButton\n                        key={key}\n                        value={key}\n                        sx={{ justifyContent: 'flex-start', alignItems: 'center' }}\n                    >\n                        {icon}\n                        <Typography variant=\"caption\" sx={{ ml: 1 }}>\n                            {label}\n                        </Typography>\n                    </ToggleButton>\n                ))}\n            </ToggleButtonGroup>\n            <Typography variant=\"caption\" sx={{ mt: 1 }}>\n                描画ツール\n            </Typography>\n            {/* eraser */}\n            <ToggleButtonGroup\n                orientation=\"vertical\"\n                value={settings.eraser ? 'eraser' : 'pen'}\n                exclusive\n                fullWidth\n                disabled={mode === 'select'}\n                onChange={handleChangeTool}\n            >\n                {Object.entries(DrawModeButtons).map(([key, { icon, label }]) => (\n                    <ToggleButton\n                        key={key}\n                        value={key}\n                        sx={{ justifyContent: 'flex-start', alignItems: 'center' }}\n                    >\n                        {icon}\n                        <Typography variant=\"caption\" sx={{ ml: 1 }}>\n                            {label}\n                        </Typography>\n                    </ToggleButton>\n                ))}\n            </ToggleButtonGroup>\n            {/* strokeWidth */}\n            <Typography variant=\"caption\" sx={{ mt: 1 }}>\n                太さ\n            </Typography>\n            <Slider\n                sx={{ ml: 1, mb: 2, boxSizing: 'border-box', width: 140 }}\n                value={settings.strokeWidth}\n                min={MinStrokeWidth}\n                max={MaxStrokeWidth}\n                step={StrokeWidthStep}\n                marks\n                valueLabelDisplay=\"auto\"\n                disabled={mode === 'select'}\n                onChange={handleChangeStrokeWidth}\n            />\n            {/* stroke */}\n            <TextField\n                type=\"color\"\n                label=\"ペンの色\"\n                value={settings.stroke}\n                disabled={mode === 'select' || settings.eraser}\n                fullWidth\n                margin=\"dense\"\n                size=\"small\"\n                onChange={handleChangeStroke}\n            />\n        </Stack>\n    );\n};\n\nconst NoteToolbox: React.VFC = () => {\n    const props = useContext(NoteSettingsContext);\n    return <NoteToolboxCore {...props} />;\n};\n\nexport default NoteToolbox;\n","import { Box } from '@mui/material';\nimport { useCallback, useEffect, useState } from 'react';\nimport { DOMSize } from '../types/common';\nimport Header from './Header';\nimport NoteContainer from './NoteContainer';\nimport Toolbox from './Toolbox/NoteToolbox';\n\nconst Layout: React.VFC = () => {\n    const [windowRect, setWindowRect] = useState<DOMSize>({ width: 0, height: 0 });\n\n    const fitWindowSize = useCallback(() => {\n        const { innerHeight, innerWidth } = window;\n        setWindowRect({\n            height: innerHeight,\n            width: innerWidth,\n        });\n    }, []);\n\n    useEffect(() => {\n        fitWindowSize();\n        window.addEventListener('resize', fitWindowSize);\n\n        return () => {\n            window.removeEventListener('resize', fitWindowSize);\n        };\n    }, [fitWindowSize]);\n\n    return (\n        <Box sx={{ ...windowRect, overflow: 'hidden' }}>\n            <Header />\n            <Box\n                sx={{\n                    boxSizing: 'border-box',\n                    width: 'auto',\n                    height: 'calc(100% - 48px)',\n                    display: 'flex',\n                    flexDirection: 'row',\n                    flexWrap: 'nowrap',\n                    alignItems: 'stretch',\n                    pt: 1,\n                    px: 1,\n                }}\n            >\n                <Toolbox />\n                <NoteContainer />\n            </Box>\n        </Box>\n    );\n};\n\nexport default Layout;\n","import { createTheme, CssBaseline, ThemeProvider } from '@mui/material';\nimport React from 'react';\nimport ConfigurationProvider from '../providers/ConfigurationProvider';\nimport NoteSettingsProvider from '../providers/NoteSettingsProvider';\nimport Layout from './Layout';\n\nconst theme = createTheme();\n\nconst App: React.VFC = () => {\n    return (\n        <ThemeProvider theme={theme}>\n            <ConfigurationProvider>\n                <NoteSettingsProvider>\n                    <CssBaseline />\n                    <Layout />\n                </NoteSettingsProvider>\n            </ConfigurationProvider>\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}