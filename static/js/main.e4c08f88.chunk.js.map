{"version":3,"sources":["providers/AppSettingsProvider.tsx","providers/ConfigurationProvider.tsx","types/shape.ts","types/note.ts","providers/NoteSettingsProvider.tsx","components/Version.tsx","components/Header.tsx","components/Canvas/util/vector.ts","components/Canvas/util/common.ts","components/Canvas/util/event.ts","components/Canvas/factory/guide.ts","components/Canvas/factory/common.ts","components/Canvas/factory/force.ts","components/Canvas/shape/BeamShape.ts","components/Canvas/shape/ForceShape.ts","components/Canvas/shape/NodeShape.ts","components/Canvas/shape/TrapezoidShape.ts","components/Canvas/types.ts","components/Canvas/manager.ts","components/Canvas/popup/pins/pin_1.svg","components/Canvas/provider/PopupProvider.tsx","components/Canvas/core.tsx","components/Canvas/popup/ForceEditor.tsx","components/Canvas/popup/pins/pin_2.svg","components/Canvas/popup/pins/pin_3.svg","components/Canvas/popup/pins/pin_4.svg","components/Canvas/popup/PinSelector.tsx","components/Canvas/popup/TrapezoidEditor.tsx","components/Canvas/popup/index.tsx","components/Canvas/index.tsx","types/common.ts","components/Note/shape/StructureRect.ts","components/Note/manager.ts","components/Note/nav/CanvasNavigation.tsx","components/Note/Page.tsx","components/Note/index.tsx","components/MainContainer.tsx","components/Toolbox/CanvasToolbox.tsx","components/Toolbox/NoteToolbox.tsx","components/Toolbox/index.tsx","components/Layout.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["AppSettingsContext","createContext","undefined","AppSettingsProvider","children","useState","mode","setMode","pageSizeType","setPageSizeType","canvasProps","setCanvasProps","canvasRef","useRef","callbackRef","editCanvas","useCallback","props","callback","current","closeCanvas","structure","getStructure","Provider","value","onChangeMode","onChangePageSize","ConfigurationContext","ConfigurationProvider","tool","setTool","NodePinTypes","isNode","item","id","name","x","y","isBeam","nodeI","nodeJ","isForce","beam","force","distanceI","isTrapezoid","forceI","forceJ","distanceJ","emptyStructure","version","unit","length","nodes","beams","forces","trapezoids","NoteModes","PageSize","A3","width","height","A4","B4","B5","defaultCanvasProps","data","zoom","viewport","defaultDrawSettings","stroke","strokeWidth","eraser","defaultPageProps","size","structures","NoteSettingsContext","NoteSettingsProvider","settings","setSettings","onChangeDrawSettings","hash","process","substring","date","Version","Typography","variant","sx","ml","Header","AppBar","position","Toolbar","component","color","vX","Vector","vY","lerp","v1","v2","alpha","dir","clone","subtract","normalize","distance","mv","multiplyScalar","add","verticalNormalizeVector","v","dot","invert","round","figure","n","result","Math","snapping","snapSize","i","snap","snapAngle","deg","roundDegree","getInsidePoints","start","end","direction","points","count","interval","point","push","intercectPoint","targetLine","pi","pj","slope1","intercept1","slope2","NaN","intercept2","isNaN","px","rangeX","sort","a","b","rangeY","err","console","error","getPointerPosition","event","e","type","indexOf","touches","clientX","clientY","GuideLineColor","defaultLineOptions","defaultEdgeOptions","fill","originX","originY","centeredRotation","defaultLabelOptions","fontSize","fontFamily","textAlign","evented","selectable","createGuideLineByVectors","p1","p2","offset","verticalDir","vd","angle","angleDeg","verticalLineLeft","fabric","Line","GuideLineHeight","verticalLineRight","horizontalLine","edgeLeft","Triangle","top","left","GuideLineEdgeSize","edgeRight","guide","Group","labelAngle","vdir","labelPosition","label","Textbox","createGuideLine","arg1","arg2","arg3","Array","isArray","createGuideLineByPoints","Error","createBeamGuideLine","createGlobalGuideLineBySets","pointsX","pointsY","canvasHeight","guides","maxY","minX","Number","MAX_SAFE_INTEGER","arrX","arrY","hy1","min","GlobalGuideLineInterval","hg1","hy2","x1","x2","hg","vx1","max","vg1","vx2","y1","y2","vg2","createGlobalGuideLine","guidePointsX","Set","guidePointsY","forEach","createGlobalGuideLineByArray","unresponseShapeProps","labelBaseProps","defaultColor","createArrowByVectors","arrowWidth","arrowEdgeSize","options","onRotating","onScaling","onModified","verticalAngleDeg","line","edgeSize","edge","arrow","setControlsVisibility","bl","br","mb","mr","mt","tl","tr","mtr","createArrow","createArrowByPoints","ForceColor","BeamShape","manager","params","dragging","_readonly","vi","vj","relationBeams","this","nodeMap","readonly","create","visible","canvas","attachEvents","createBeamByVectors","arg4","createBeamByPoints","remove","scaleX","scaleY","dirty","rotate","updateGuide","updateBeamByVectors","updateBeamByPoints","forceMap","trapezoidMap","beamMap","nodeBeamMap","beamId","shape","nodeId","list","filter","update","iy","ix","copy","rad","PI","cos","ratio","jx","jy","replaceNodes","removingBeams","modifiedBeams","nodeIds","Object","values","nodeShape","includes","beamShape","replacedI","replacedJ","modified","calcForceAverage","calcTrapezoidAverage","entries","removedNodeId","some","node","updateParts","updateGlobalGuidelines","on","onSelect","bind","onDeselect","onMouseDown","onMouseDownBefore","onMoving","onMoved","onRotated","onScaled","currentBeam","isDrawingMode","pointer","calcRatio","forceId","uuid","ForceShape","removeUnconnectedNodes","setVisibleParts","pin","calcPoints","completeDrag","rotateDeg","scale","defaultForceLabelProps","longpressTimer","head","originalAngle","draggableMin","MIN_SAFE_INTEGER","draggableMax","attachEvent","forceAverage","forceLength","calcLength","tail","selected","select","setActiveObject","onSelected","onDeselected","onMouseUp","onDblClick","target","clearTimeout","getBoundingRect","beforeTop","beforeLeft","setTimeout","afterTop","afterLeft","openForceDialog","CanvasManager","LongpressInterval","currentAngle","f","calcForce","dragDis","dist","calcMovedPosition","distI","Pins","free","pinX","pinZ","fixX","fix","NodeShape","createNode","loadPin","updatePosition","updateByParams","visiblePin","Circle","radius","hasBorders","hasControls","PinSize","pinType","loadSVGFromURL","objects","util","groupSVGElements","setPinProperties","openNodeDialog","ni","nj","getCenterPoint","sy","ns","TrapezoidColor","defaultTrapezoidArrowOptions","defaultTrapezoidLineOptions","defaultTrapezoidLabelOptions","TrapezoidShape","arrows","labelI","labelJ","selectedShapes","linePoints","draggingEdge","draggingDirection","draggingPosition","draggingLength","addToCanvas","isGlobal","average","trapezoidAverage","vI","bi","bj","slope","intercept","insideArrows","pu","map","arrowI","arrowJ","createLine","li","lj","createTrapezoidLabel","removeFromCanvas","bringToFront","shapes","edges","delete","openTrapezoidDialog","dj","di","dragLength","updateLine","transform","checkDraggingEdge","calcDraggableRange","moveArrow","degree","isPathStart","isPathEnd","defaultGridLineProps","excludeFromExport","excludeExport","canvasDom","open","_tool","pageWidth","pageHeight","gridSize","_props","_data","openPopup","enablePan","isCanvasDragging","lastPos","globalGuideLines","_initialized","Canvas","selection","stopContextMenu","setZoom","setViewportTransform","drawBackgroundGrid","trapezoid","discardActiveObject","setSelectableShapes","selectableNode","eventedNode","selectableBeam","selectableForce","eventedForce","selectableTrapezoid","eventedTrapezoid","flatMap","image","toSVG","suppressPreamble","viewportTransform","getZoom","reduce","prev","lines","hl","vl","entry","find","onMouseMove","onCreatePath","onCreateObject","vpt","canvasWidth","getWidth","getHeight","py","requestRenderAll","path","s","isSVGPath","addNodeIfNotExists","addBeamIfNotExists","vs","ve","trapezoidId","log","clear","dispose","_path","PopupContext","PopupProvider","popupType","setPopupType","popupPosition","setPopupPosition","popupParams","setPopupParams","callbackFunc","close","CanvasCore","ref","useContext","managerRef","useImperativeHandle","toCanvasProps","useEffect","forwardRef","ForceEditor","onChange","onClose","setValue","setError","handleSubmit","preventDefault","currentTarget","checkValidity","num","parseFloat","handleChange","errorMessage","Paper","Stack","spacing","p","autoComplete","noValidate","onSubmit","TextField","margin","required","fullWidth","InputProps","endAdornment","InputAdornment","Boolean","helperText","justifyContent","Button","onClick","ConnectedForceEditor","useMemo","_extends","assign","arguments","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","keys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgPin1","_ref","svgRef","title","titleId","viewBox","xmlns","d","_circle","_circle2","_line","ForwardRef","SvgPin2","cx","cy","r","SvgPin3","_line2","_line3","_line4","_line5","SvgPin4","PinButtons","icon","SvgIcon","defaultButtonProps","alignItems","PinSelector","setPin","_","newValue","ToggleButtonGroup","orientation","exclusive","ToggleButton","ConnectedPinSelector","validateForce","val","validateAngle","parseInt","TrapezoidEditor","setValues","errors","setErrors","attrs","value1","valid1","value2","valid2","value3","valid3","valid","parseFormValues","error1","error2","state","handleChangeIsGlobal","checked","toFormValues","FormControlLabel","control","Checkbox","ConnectedTrapezoidEditor","Popup","Box","zIndex","setSize","containerRef","observer","ResizeObserver","contentRect","observe","disconnect","backgroundColor","overscrollBehavior","CanvasTools","isPoint","defaultLayerOptions","lockRotation","hasRotatingPoint","erasable","defaultImageOptions","StructureRect","layer","createLayer","loadImage","rect","Rect","loadSVGFromString","setOptions","opacity","coords","calcCoords","openCanvasNavigation","closeCanvasNavigation","isShapeCoordinates","PageManager","drawData","showCanvasNavigation","_mode","_settings","pageSize","loadFromJSON","renderAll","brush","freeDrawingBrush","EraserBrush","PencilBrush","coordinates","Background","styled","display","padding","Spacer","flex","CanvasNavigation","onEdit","onCopy","onDelete","onCancel","anchorEl","setAnchorEl","handleClickMore","handleCloseMenu","IconButton","Menu","MenuItem","Page","viewSize","drawSettings","onEditCanvas","onCloseCanvas","getActiveStructure","activeStructure","setActiveStructure","handleEdit","useLayoutEffect","Note","setViewSize","getBoundingClientRect","overflow","MainContainer","boxSizing","border","theme","palette","divider","borderRadius","ToolboxButtons","PanToolAlt","pen","ArrowDownward","Texture","Delete","CanvasToolboxCore","CanvasToolbox","DrawModes","NoteModeButtons","edit","DrawModeButtons","AutoFixNormal","NoteToolboxCore","handleChangeMode","handleChangeTool","handleChangeStrokeWidth","handleChangeStroke","disabled","Slider","step","valueLabelDisplay","NoteToolbox","Toolbox","Layout","windowRect","setWindowRect","fitWindowSize","window","innerHeight","innerWidth","addEventListener","removeEventListener","flexDirection","flexWrap","pt","createTheme","App","ThemeProvider","CssBaseline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e4c08f88.chunk.js","sourcesContent":["import {\n    createContext,\n    Dispatch,\n    RefObject,\n    SetStateAction,\n    useCallback,\n    useRef,\n    useState,\n} from 'react';\nimport { CanvasHandler } from '../components/Canvas';\nimport { AppMode } from '../types/common';\nimport { CommitStructureFunction, PageSizeType, StructureCanvasState } from '../types/note';\n\ninterface Props {\n    children: React.ReactNode;\n}\n\ninterface IAppSettingsContext {\n    mode: AppMode;\n    onChangeMode: Dispatch<SetStateAction<AppMode>>;\n    pageSizeType: PageSizeType;\n    onChangePageSize: Dispatch<SetStateAction<PageSizeType>>;\n    canvasProps?: StructureCanvasState;\n    editCanvas: (props: StructureCanvasState, callback: CommitStructureFunction) => void;\n    closeCanvas: VoidFunction;\n    canvasRef: RefObject<CanvasHandler>;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nexport const AppSettingsContext = createContext<IAppSettingsContext>(undefined!);\n\nconst AppSettingsProvider: React.VFC<Props> = ({ children }) => {\n    // アプリのモード (note | canvas)\n    const [mode, setMode] = useState<AppMode>('note');\n    // ノートのサイズ\n    const [pageSizeType, setPageSizeType] = useState<PageSizeType>('A4');\n    // キャンバスの描画情報\n    const [canvasProps, setCanvasProps] = useState<StructureCanvasState>();\n    // キャンバスの参照\n    const canvasRef = useRef<CanvasHandler>(null);\n    // ノートへのコールバック関数\n    const callbackRef = useRef<CommitStructureFunction>();\n\n    /**\n     * キャンバスの編集開始\n     */\n    const editCanvas = useCallback(\n        (props: StructureCanvasState, callback: CommitStructureFunction) => {\n            setMode('canvas');\n            setCanvasProps(props);\n            callbackRef.current = callback;\n        },\n        []\n    );\n\n    /**\n     * キャンバスの編集完了\n     */\n    const closeCanvas = useCallback(() => {\n        if (canvasRef.current) {\n            // 更新した構造データを取得する\n            const structure = canvasRef.current.getStructure();\n\n            // 選択中のキャンバスのデータを更新\n            if (callbackRef.current) {\n                callbackRef.current(structure);\n            }\n        }\n\n        // 状態をリセット\n        setMode('note');\n        setCanvasProps(undefined);\n    }, []);\n\n    return (\n        <AppSettingsContext.Provider\n            value={{\n                mode,\n                onChangeMode: setMode,\n                pageSizeType,\n                onChangePageSize: setPageSizeType,\n                canvasProps,\n                editCanvas,\n                closeCanvas,\n                canvasRef,\n            }}\n        >\n            {children}\n        </AppSettingsContext.Provider>\n    );\n};\n\nexport default AppSettingsProvider;\n","import { createContext, useState } from 'react';\nimport { CanvasTool } from '../types/common';\n\ninterface Props {\n    children: React.ReactNode;\n}\n\ninterface IConfigurationContext {\n    tool: CanvasTool;\n    setTool: (tool: CanvasTool) => void;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nexport const ConfigurationContext = createContext<IConfigurationContext>(undefined!);\n\nconst ConfigurationProvider: React.VFC<Props> = ({ children }) => {\n    const [tool, setTool] = useState<CanvasTool>('select');\n\n    return (\n        <ConfigurationContext.Provider value={{ tool, setTool }}>\n            {children}\n        </ConfigurationContext.Provider>\n    );\n};\n\nexport default ConfigurationProvider;\n","/**\n * 単位: 力\n */\nexport const ForceUnitValues = ['N', 'kN'] as const;\n\n/**\n * 単位: 長さ\n */\nexport const LengthUnitValues = ['mm', 'cm', 'm'] as const;\n\nexport type ForceUnitType = typeof ForceUnitValues[number];\nexport type LengthUnitType = typeof LengthUnitValues[number];\n\n/**\n * 単位\n */\nexport interface Unit {\n    force: ForceUnitType;\n    length: LengthUnitType;\n}\n\nexport const isUnit = (item: unknown): item is Unit => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return (\n            ForceUnitValues.some((v) => value.force === v) &&\n            LengthUnitValues.some((v) => value.length === v)\n        );\n    }\n    return false;\n};\n\n/**\n * 節点ピン\n */\nexport const NodePinTypes = ['free', 'pin', 'pinX', 'pinZ', 'fixX', 'fix'] as const;\nexport type NodePinType = typeof NodePinTypes[number];\n\nexport const isNodePinType = (item: unknown): item is NodePinType => {\n    if (typeof item === 'string') {\n        return NodePinTypes.some((type) => type === item);\n    }\n    return false;\n};\n\nexport interface ShapeBase {\n    id: string;\n    name: string;\n    [key: string]: unknown;\n}\nexport const isShape = (item: unknown): item is ShapeBase => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return typeof value.id === 'string' && typeof value.name === 'string';\n    }\n    return false;\n};\n\nexport interface Node extends ShapeBase {\n    x: number;\n    y: number;\n    pin?: NodePinType;\n}\n\nexport const isNode = (item: unknown): item is Node => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return (\n            typeof value.id === 'string' &&\n            typeof value.name === 'string' &&\n            typeof value.x === 'number' &&\n            typeof value.y === 'number'\n        );\n    }\n    return false;\n};\n\nexport interface Beam extends ShapeBase {\n    nodeI: string;\n    nodeJ: string;\n}\n\nexport const isBeam = (item: unknown): item is Beam => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return (\n            typeof value.id === 'string' &&\n            typeof value.name === 'string' &&\n            typeof value.nodeI === 'string' &&\n            typeof value.nodeJ === 'string'\n        );\n    }\n    return false;\n};\n\nexport interface Force extends ShapeBase {\n    beam: string;\n    force: number;\n    // i端からの距離 (0 〜 1)\n    distanceI: number;\n    // 角度、デフォルト 90度、-179 〜 180 度の間で指定 (-180 = 180)\n    angle?: number;\n}\nexport const isForce = (item: unknown): item is Force => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return (\n            typeof value.id === 'string' &&\n            typeof value.name === 'string' &&\n            typeof value.beam === 'string' &&\n            typeof value.force === 'number' &&\n            typeof value.distanceI === 'number'\n        );\n    }\n    return false;\n};\n\nexport interface Trapezoid extends ShapeBase {\n    beam: string;\n    // kN/m\n    forceI: number;\n    // kN/m\n    forceJ: number;\n    // i端からの距離 (0 〜 1, distanceI + distanceJ <= 1)\n    distanceI: number;\n    // j端からの距離 (0 〜 1, distanceI + distanceJ <= 1)\n    distanceJ: number;\n    // 角度、デフォルト 90度、-179 〜 180 度の間で指定 (-180 = 180)\n    angle?: number;\n    // 全体座標系に垂直か、部材に垂直か デフォルト false\n    isGlobal?: boolean;\n}\n\nexport const isTrapezoid = (item: unknown): item is Trapezoid => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return (\n            typeof value.id === 'string' &&\n            typeof value.name === 'string' &&\n            typeof value.beam === 'string' &&\n            typeof value.forceI === 'number' &&\n            typeof value.distanceI === 'number' &&\n            typeof value.forceJ === 'number' &&\n            typeof value.distanceJ === 'number'\n        );\n    }\n    return false;\n};\n\nexport interface Structure {\n    version: string;\n    unit: Unit;\n    nodes: Node[];\n    beams: Beam[];\n    forces: Force[];\n    trapezoids: Trapezoid[];\n}\n\nexport const isStructure = (item: unknown): item is Structure => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return (\n            typeof value.version === 'string' &&\n            isUnit(value.unit) &&\n            Array.isArray(value.nodes) &&\n            value.nodes.every(isNode) &&\n            Array.isArray(value.beams) &&\n            value.beams.every(isBeam) &&\n            Array.isArray(value.forces) &&\n            value.forces.every(isForce) &&\n            Array.isArray(value.trapezoids) &&\n            value.trapezoids.every(isTrapezoid)\n        );\n    }\n    return false;\n};\n\nexport type StructureFieldType = keyof Omit<Structure, 'unit'>;\n\nexport const defaultUnit: Unit = {\n    force: 'kN',\n    length: 'm',\n};\n\nexport const emptyStructure: Structure = {\n    version: '0.0.0',\n    unit: defaultUnit,\n    nodes: [],\n    beams: [],\n    forces: [],\n    trapezoids: [],\n};\n\nexport const ShapeTypes = ['node', 'beam', 'force', 'trapezoid', 'background'] as const;\nexport type ShapeType = typeof ShapeTypes[number];\nexport interface IShapeData extends ShapeBase {\n    type: ShapeType;\n    // SVGに変換する際に shape を対象外とする（背景グリッドなどに設定）\n    excludeExport?: boolean;\n}\n","import { DOMSize, ShapeCoordinates, SizePosition } from './common';\nimport { emptyStructure, isStructure, Structure } from './shape';\n\nconst NoteModes = ['select', 'edit'] as const;\nexport type NoteMode = typeof NoteModes[number];\nexport const isNoteMode = (item: unknown): item is NoteMode => {\n    if (typeof item === 'string') {\n        return NoteModes.some((mode) => mode === item);\n    }\n    return false;\n};\n\nexport const PageSizeTypes = ['A4', 'A3', 'B5', 'B4'] as const;\nexport type PageSizeType = typeof PageSizeTypes[number];\nexport const isPageSizeType = (item: unknown): item is PageSizeType => {\n    if (typeof item === 'string') {\n        return PageSizeTypes.some((value) => item === value);\n    }\n    return false;\n};\n\nexport const PageSize: Record<PageSizeType, DOMSize> = {\n    A3: {\n        width: 0,\n        height: 0,\n    },\n    A4: {\n        width: 2970,\n        height: 2100,\n    },\n    B4: {\n        width: 0,\n        height: 0,\n    },\n    B5: {\n        width: 0,\n        height: 0,\n    },\n};\n\nexport interface StructureCanvasProps extends SizePosition {\n    id: string;\n    data: Structure;\n    /**\n     * SVG文字列 fabric.loadSVGFromString でパースする\n     */\n    image?: string;\n    zoom: number;\n    viewport: number[];\n}\nexport const isStructureCanvasProps = (item: unknown): item is StructureCanvasProps => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return (\n            typeof value.id === 'string' &&\n            isStructure(value.data) &&\n            typeof value.zoom === 'number' &&\n            Array.isArray(value.viewport) &&\n            value.viewport.every((v) => typeof v === 'number')\n        );\n    }\n    return false;\n};\n\nexport const MinCanvasSize: DOMSize = {\n    width: 160,\n    height: 90,\n};\n\nexport const defaultCanvasProps: StructureCanvasProps = {\n    id: 'Canvas_1',\n    data: emptyStructure,\n    x: 100,\n    y: 100,\n    ...MinCanvasSize,\n    zoom: 1,\n    viewport: [1, 0, 0, 1, 0, 0],\n};\n\nexport interface DrawSettings {\n    stroke: string;\n    strokeWidth: number;\n    eraser?: boolean;\n}\nexport const defaultDrawSettings: DrawSettings = {\n    stroke: '#000000',\n    strokeWidth: 4,\n    eraser: false,\n};\n\nexport interface PageProps {\n    size: PageSizeType;\n    zoom: number;\n    viewport: number[];\n    /**\n     * 構造データ\n     */\n    structures: StructureCanvasProps[];\n    /**\n     * 描画データ fabric.Canvas.toJSON() で取得した文字列\n     * fabric.Canvas.loadFromJSON でパースする\n     */\n    drawData?: string;\n}\n\nexport const isPageProps = (item: unknown): item is PageProps => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return (\n            isPageSizeType(value.size) &&\n            typeof value.zoom === 'number' &&\n            Array.isArray(value.viewport) &&\n            value.viewport.every((v) => typeof v === 'number') &&\n            Array.isArray(value.structures) &&\n            value.structures.every(isStructureCanvasProps)\n        );\n    }\n\n    return false;\n};\n\nexport const defaultPageProps: PageProps = {\n    size: 'A4',\n    zoom: 1,\n    viewport: [1, 0, 0, 1, 0, 0],\n    structures: [\n        {\n            ...defaultCanvasProps,\n        },\n    ],\n};\n\n/**\n * キャンバスの更新完了時にノートに更新内容を引き渡すコールバック関数\n */\nexport type CommitStructureFunction = (structure: StructureCanvasProps) => void;\n\n/**\n * キャンバスのデータ + ナビゲーションの表示位置情報\n */\nexport interface StructureCanvasState extends StructureCanvasProps {\n    coordinates: ShapeCoordinates;\n}\n","import { createContext, Dispatch, SetStateAction, useState } from 'react';\nimport { defaultDrawSettings, DrawSettings, NoteMode } from '../types/note';\n\ninterface Props {\n    children: React.ReactNode;\n}\n\ninterface INoteSettingsContext {\n    mode: NoteMode;\n    settings: DrawSettings;\n    onChangeMode: Dispatch<SetStateAction<NoteMode>>;\n    onChangeDrawSettings: Dispatch<SetStateAction<DrawSettings>>;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nexport const NoteSettingsContext = createContext<INoteSettingsContext>(undefined!);\n\nconst NoteSettingsProvider: React.VFC<Props> = ({ children }) => {\n    const [mode, setMode] = useState<NoteMode>('select');\n    const [settings, setSettings] = useState<DrawSettings>(defaultDrawSettings);\n\n    return (\n        <NoteSettingsContext.Provider\n            value={{ mode, settings, onChangeMode: setMode, onChangeDrawSettings: setSettings }}\n        >\n            {children}\n        </NoteSettingsContext.Provider>\n    );\n};\n\nexport default NoteSettingsProvider;\n","import { Typography } from '@mui/material';\n\nconst hash = process.env.REACT_APP_GIT_COMMIT_HASH?.substring(0, 7) ?? '';\nconst date = process.env.REACT_APP_GIT_COMMIT_DATE ?? '';\nconst version = process.env.REACT_APP_PACKAGE_VERSION ?? '';\n\nconst Version: React.VFC = () => {\n    return (\n        <Typography\n            variant=\"caption\"\n            sx={{ ml: 2 }}\n        >{`ver ${version} (${hash}: ${date})`}</Typography>\n    );\n};\n\nexport default Version;\n","import { AppBar, Toolbar, Typography } from '@mui/material';\nimport Version from './Version';\n\nconst Header: React.VFC = () => {\n    return (\n        <AppBar position=\"static\">\n            <Toolbar variant=\"dense\">\n                <Typography component=\"h1\" variant=\"h6\" color=\"inherit\">\n                    Drawing Sample\n                </Typography>\n                <Version />\n            </Toolbar>\n        </AppBar>\n    );\n};\n\nexport default Header;\n","import Vector from 'victor';\n\nexport { Vector };\n\n// X方向のベクトル\nexport const vX = new Vector(1, 0);\n// Y方向のベクトル\nexport const vY = new Vector(0, 1);\n\n/**\n * v1 と v2 の間にある vp を取得する\n * @param v1\n * @param v2\n * @param alpha\n * @returns\n */\nexport const lerp = (v1: Vector, v2: Vector, alpha: number): Vector => {\n    if (alpha >= 1) {\n        return v2;\n    }\n    if (alpha <= 0) {\n        return v1;\n    }\n    const dir = v2.clone().subtract(v1).normalize();\n    const distance = v1.distance(v2);\n    const mv = dir.multiplyScalar(distance * alpha);\n    return v1.clone().add(mv);\n};\n\n/**\n * v1 と v2 に直交する単位ベクトルを返す\n * @param v1\n * @param v2\n * @returns\n */\nexport const verticalNormalizeVector = (v1: Vector, v2: Vector): Vector => {\n    const dir = v2.clone().subtract(v1).normalize();\n    const v = new Vector(dir.y, dir.x * -1).normalize();\n\n    const value = vY.dot(v);\n    if (value > 0) {\n        v.invert();\n    }\n\n    return v;\n};\n","import { Point } from '../types';\nimport { lerp, Vector } from './vector';\n\nexport const clone = <T>(data: T): T => {\n    return JSON.parse(JSON.stringify(data)) as T;\n};\n\nexport const round = (value: number, figure = 3): number => {\n    const n = 10 ** figure;\n    const result = Math.round(value * n) / n;\n    return result;\n};\n\nconst snapping = (value: number, snapSize = 25): number => {\n    const n = value / snapSize;\n    const i = Math.round(n) * snapSize;\n    return i;\n};\n\nexport const DEFAULT_SNAP_SIZE = 25;\n\n/**\n * 頂点をグリッドにスナップする\n * @param param0\n * @param snapSize\n * @returns\n */\nexport const snap = ([x, y]: [number, number], snapSize = DEFAULT_SNAP_SIZE): [number, number] => {\n    return [snapping(x, snapSize), snapping(y, snapSize)];\n};\n\nexport const DEFAULT_SNAP_ANGLE = 5;\nexport const snapAngle = (deg: number, snapSize = DEFAULT_SNAP_ANGLE): number => {\n    return snapping(deg, snapSize);\n};\n\n/**\n * 角度を 0 〜 360 の範囲に変換する\n * @param deg\n * @returns\n */\nexport const roundDegree = (deg: number): number => {\n    let value = deg;\n    if (0 > value) {\n        value += 360;\n    }\n    if (value >= 360) {\n        value -= 360;\n    }\n    if (0 > value || value >= 360) {\n        value = roundDegree(value);\n    }\n    return value;\n};\n\nconst InsideArrowCount = 10;\nconst InsideArrowInterval = 25;\nconst InsideArrowMinInterval = 10;\n\n/**\n * 開始点から終了点まで等間隔に点を取る\n * @param start\n * @param end\n * @param direction\n * @returns\n */\nexport const getInsidePoints = (start: Vector, end: Vector, direction: Vector): Vector[] => {\n    const points: Vector[] = [];\n    // 2点間の距離\n    const distance = start.distance(end);\n    // 分割数\n    let count = InsideArrowCount;\n    // 間隔\n    let interval = distance / (count + 1);\n    while (interval < InsideArrowInterval && count > 0) {\n        count--;\n        interval = distance / (count + 1);\n    }\n\n    if (count > 0) {\n        // 始点から interval の間隔で count 個 点を取る\n        for (let i = 1; i <= count; i++) {\n            const point = start.clone().add(direction.clone().multiplyScalar(interval * i));\n            points.push(point);\n        }\n    } else {\n        // 半分にしてみる\n        interval = distance / 2;\n        if (interval >= InsideArrowMinInterval) {\n            // 半分の位置に点を置く\n            const point = lerp(start, end, 0.5);\n            points.push(point);\n        }\n    }\n\n    return points;\n};\n\n/**\n * 開始点からある方向に伸ばした線が対象となる線と交わる点を取得する\n * @param targetLine 対象となる Line [始点、終点、傾き、切片]\n * @param start 開始点\n * @param dir 方向\n * @returns 交点（なければ null）\n */\nexport const intercectPoint = (\n    targetLine: [Vector, Vector, number, number],\n    start: Vector,\n    dir: Vector\n): Point | null => {\n    const [pi, pj, slope1, intercept1] = targetLine;\n    let point: Point | null = null;\n    try {\n        // dir の傾き\n        const end: Vector = start.clone().add(dir);\n        const slope2 = end.x - start.x !== 0 ? (end.y - start.y) / (end.x - start.x) : NaN;\n        // dir の切片\n        const intercept2 = isNaN(slope2) ? NaN : start.y - slope2 * start.x;\n\n        if (slope1 === slope2) {\n            // 平行なので交点なし\n            return null;\n        }\n\n        if (!isNaN(slope1) && !isNaN(slope2)) {\n            // どちらも垂直でない\n            const px = (intercept2 - intercept1) / (slope1 - slope2);\n            const py = slope1 * px + intercept1;\n\n            point = [px, py];\n        } else if (isNaN(slope1)) {\n            // 対象の Line が垂直\n            const px = pi.x;\n            const py = px * slope2 + intercept2;\n\n            point = [px, py];\n        } else if (isNaN(slope2)) {\n            // dir が垂直\n            const px = start.x;\n            const py = px * slope1 + intercept1;\n\n            point = [px, py];\n        }\n\n        // 交点が Line の内側？\n        if (point) {\n            const [x, y] = point;\n            const rangeX = [pi.x, pj.x].sort((a, b) => a - b);\n            const rangeY = [pi.y, pj.y].sort((a, b) => a - b);\n            if (x >= rangeX[0] && x <= rangeX[1] && y >= rangeY[0] && y <= rangeY[1]) {\n                return point;\n            }\n        }\n        return null;\n    } catch (err) {\n        console.error(err);\n    }\n\n    return null;\n};\n","/**\n * ポインタの位置を返す\n * @param event\n * @returns\n */\nexport const getPointerPosition = (\n    event: fabric.IEvent<Event>\n): { clientX: number; clientY: number } => {\n    if (event.e.type.indexOf('touch') === 0) {\n        const { touches } = event.e as TouchEvent;\n        const { clientX, clientY } = touches[0];\n        return { clientX, clientY };\n    } else {\n        const { clientX, clientY } = event.e as MouseEvent;\n        return { clientX, clientY };\n    }\n};\n","import { fabric } from 'fabric';\nimport { Node } from '../../../types/shape';\nimport { BeamPoints } from '../types';\nimport { Vector, verticalNormalizeVector, vX, vY } from '../util';\nimport { NodeShape } from './node';\n\ntype CreateGuideLineFunction = {\n    (points: BeamPoints, offset?: number): fabric.Group;\n    (v1: Vector, v2: Vector, offset?: number): fabric.Group;\n};\n\nconst GuideLineEdgeSize = 8;\nconst GuideLineColor = 'silver';\nconst GuideLineHeight = 14;\n\nconst defaultLineOptions: fabric.ILineOptions = {\n    stroke: GuideLineColor,\n    strokeWidth: 1,\n};\nconst defaultEdgeOptions: fabric.ITriangleOptions = {\n    width: GuideLineEdgeSize,\n    height: GuideLineEdgeSize,\n    stroke: GuideLineColor,\n    strokeWidth: 1,\n    fill: GuideLineColor,\n    originX: 'center',\n    originY: 'center',\n    centeredRotation: true,\n};\nconst defaultLabelOptions: fabric.ITextboxOptions = {\n    fill: GuideLineColor,\n    height: 10,\n    fontSize: 10,\n    fontFamily: 'sans-serif',\n    textAlign: 'center',\n    evented: false,\n    selectable: false,\n};\n\nexport const createGuideLineByVectors = (p1: Vector, p2: Vector, offset: number): fabric.Group => {\n    let v1 = p1.clone();\n    let v2 = p2.clone();\n    if (v1.x > v2.x || (v1.x === v2.x && v1.y > v2.y)) {\n        [v1, v2] = [v2, v1];\n    }\n\n    // 指定された線に直交する方向\n    const verticalDir = verticalNormalizeVector(v1, v2);\n\n    if (offset !== 0) {\n        const vd = verticalDir.clone();\n        // ベクトルの内積\n        const cos = vY.dot(vd);\n        if (cos >= 0) {\n            // 直交する方向が vY の方向であれば反転させる\n            vd.invert();\n        }\n        // offset の距離だけ離す\n        vd.multiplyScalar(offset);\n        v1.add(vd);\n        v2.add(vd);\n    }\n\n    // 距離\n    const distance = v1.distance(v2);\n    // 方向\n    const dir = v2.clone().subtract(v1).normalize();\n    const angle = dir.angleDeg();\n\n    // |<-->| こんな感じに描く\n    const verticalLineLeft = new fabric.Line(\n        [0, (-1 * GuideLineHeight) / 2, 0, GuideLineHeight / 2],\n        defaultLineOptions\n    );\n    const verticalLineRight = new fabric.Line(\n        [distance, (-1 * GuideLineHeight) / 2, distance, GuideLineHeight / 2],\n        defaultLineOptions\n    );\n    const horizontalLine = new fabric.Line([0, 0, distance, 0], defaultLineOptions);\n    const edgeLeft = new fabric.Triangle({\n        top: 0,\n        left: GuideLineEdgeSize / 2,\n        angle: -90,\n        ...defaultEdgeOptions,\n    });\n    const edgeRight = new fabric.Triangle({\n        top: 0,\n        left: distance - GuideLineEdgeSize / 2,\n        angle: 90,\n        ...defaultEdgeOptions,\n    });\n\n    const guide = new fabric.Group(\n        [verticalLineLeft, edgeLeft, horizontalLine, edgeRight, verticalLineRight],\n        {\n            top: v1.y,\n            left: v1.x,\n            originX: 'left',\n            originY: 'center',\n            angle,\n        }\n    );\n\n    let labelAngle = angle;\n    let vdir = verticalDir.invert();\n    let labelPosition = v1.clone().add(vdir.multiplyScalar(5));\n    if (vdir.dot(vY) === 0) {\n        // Y軸方向と直交する場合、下端を基準にラベルを描く\n        vdir = vX.clone();\n        labelAngle = -90;\n        labelPosition = v2.clone().add(vdir.multiplyScalar(5));\n    }\n\n    const label = new fabric.Textbox(`${Math.round(distance)} m`, {\n        top: labelPosition.y,\n        left: labelPosition.x,\n        width: distance,\n        angle: labelAngle,\n        ...defaultLabelOptions,\n    });\n\n    return new fabric.Group([guide, label], {\n        selectable: false,\n        evented: false,\n        data: { type: 'guide' },\n    });\n};\n\nexport const createGuideLineByPoints = (points: BeamPoints, offset: number): fabric.Group => {\n    const p1 = new Vector(points[0], points[1]);\n    const p2 = new Vector(points[2], points[3]);\n    return createGuideLineByVectors(p1, p2, offset);\n};\n\nexport const createGuideLine: CreateGuideLineFunction = (\n    arg1: BeamPoints | Vector,\n    arg2?: Vector | number,\n    arg3?: number\n): fabric.Group => {\n    let offset = 0;\n    if (Array.isArray(arg1)) {\n        if (typeof arg2 === 'number') {\n            offset = arg2;\n        }\n        return createGuideLineByPoints(arg1, offset);\n    } else if (arg2 && typeof arg2 !== 'number') {\n        if (typeof arg3 === 'number') {\n            offset = arg3;\n        }\n        return createGuideLineByVectors(arg1, arg2, offset);\n    }\n    throw new Error('invalid parameters');\n};\n\n/**\n * 梁要素の寸法線\n * @param points\n * @returns\n */\nexport const createBeamGuideLine = (points: BeamPoints): fabric.Group => {\n    return createGuideLine(points, 50);\n};\n\n/**\n * 分布荷重の寸法線\n */\nexport const createTrapezoidGuideLine = (\n    points: BeamPoints,\n    distanceI: number,\n    distanceJ: number\n): fabric.Group => {\n    const p1 = new Vector(points[0], points[1]);\n    const p2 = new Vector(points[2], points[3]);\n    const dir = p2.clone().subtract(p1).normalize();\n    const distance = p1.distance(p2);\n\n    const vi = p1.clone().add(dir.clone().multiplyScalar(distance * distanceI));\n    const vj = p1.clone().add(dir.clone().multiplyScalar(distance * (1 - distanceJ)));\n\n    return createGuideLine(vi, vj, 50);\n};\n\ntype CreateGlobalGuideLineFunction = {\n    (pointsX: Set<number>, pointsY: Set<number>, canvasHeight: number): fabric.Group[];\n    (nodes: Node[], canvasHeight: number): fabric.Group[];\n};\n\n/**\n * 全体の寸法線の間隔\n */\nconst GlobalGuideLineInterval = 25;\n\n/**\n * 全体の寸法線を作成する\n * @param pointsX\n * @param pointsY\n * @param canvasHeight\n * @returns\n */\nconst createGlobalGuideLineBySets = (\n    pointsX: Set<number>,\n    pointsY: Set<number>,\n    canvasHeight: number\n): fabric.Group[] => {\n    const guides: fabric.Group[] = [];\n\n    if (pointsX.size === 0 || pointsY.size === 0) {\n        return [];\n    }\n\n    let minX = Number.MAX_SAFE_INTEGER;\n    let maxY = 0;\n\n    const arrX = [...pointsX].sort((a, b) => a - b);\n    minX = arrX[0];\n    const arrY = [...pointsY].sort((a, b) => a - b);\n    maxY = arrY[arrY.length - 1];\n\n    // horizontal\n    // 全体\n    const hy1 = Math.min(maxY + GlobalGuideLineInterval * 2, canvasHeight - 10);\n    const hg1 = createGuideLine([minX, hy1, arrX[arrX.length - 1], hy1]);\n    guides.push(hg1);\n\n    // 内訳\n    const hy2 = hy1 - GlobalGuideLineInterval;\n    for (let i = 0; i < arrX.length - 1; i++) {\n        const x1 = arrX[i];\n        const x2 = arrX[i + 1];\n        const hg = createGuideLine([x1, hy2, x2, hy2]);\n        guides.push(hg);\n    }\n\n    // vertical\n    // 全体\n    const vx1 = Math.max(GlobalGuideLineInterval, minX - GlobalGuideLineInterval * 2);\n    const vg1 = createGuideLine([vx1, arrY[0], vx1, maxY]);\n    guides.push(vg1);\n\n    // 内訳\n    const vx2 = vx1 + GlobalGuideLineInterval;\n    for (let i = 0; i < arrY.length - 1; i++) {\n        const y1 = arrY[i];\n        const y2 = arrY[i + 1];\n        const vg2 = createGuideLine([vx2, y1, vx2, y2]);\n        guides.push(vg2);\n    }\n\n    return guides;\n};\n\nconst createGlobalGuideLineByArray = (nodes: Node[], canvasHeight: number): fabric.Group[] => {\n    const guidePointsX = new Set<number>();\n    const guidePointsY = new Set<number>();\n\n    nodes.forEach(({ x, y }) => {\n        guidePointsX.add(x);\n        guidePointsY.add(y);\n    });\n\n    return createGlobalGuideLineBySets(guidePointsX, guidePointsY, canvasHeight);\n};\n\n/**\n * 全体の寸法線を作成する\n * @param arg1\n * @param arg2\n * @param arg3\n * @returns\n */\nexport const createGlobalGuideLine: CreateGlobalGuideLineFunction = (\n    arg1: Set<number> | Node[],\n    arg2: Set<number> | number,\n    arg3?: number\n): fabric.Group[] => {\n    if (Array.isArray(arg1) && typeof arg2 === 'number') {\n        return createGlobalGuideLineByArray(arg1, arg2);\n    } else if (arg1 instanceof Set && arg2 instanceof Set && typeof arg3 === 'number') {\n        return createGlobalGuideLineBySets(arg1, arg2, arg3);\n    }\n    throw new Error('invalid parameters');\n};\n\n/**\n * 全体の寸法線を再作成する\n * @param canvas\n * @param nodeMap\n * @param guides\n */\nexport const recreateGlobalGuideLines = (\n    canvas: fabric.Canvas,\n    nodeMap: Record<string, NodeShape>,\n    guides: fabric.Group[]\n): void => {\n    const nodes = Object.values(nodeMap).map((shape) => shape.data);\n    const lines = createGlobalGuideLine(nodes, canvas.height ?? 0);\n    if (guides.length > 0) {\n        // 表示済みの寸法線を削除\n        canvas.remove(...guides);\n        // 配列をクリア\n        guides.length = 0;\n    }\n    // 全体の寸法線を表示\n    canvas.add(...lines);\n    guides.push(...lines);\n};\n","import { fabric } from 'fabric';\nimport { BeamPoints } from '../types';\nimport { Vector } from '../util';\nimport { BeamShape } from './beam';\nimport { ForceShape } from './force';\nimport { TrapezoidShape } from './trapezoid';\n\n/**\n * イベントに反応しない shape の共通設定\n */\nexport const unresponseShapeProps: fabric.IObjectOptions = {\n    // イベントに反応させない\n    evented: false,\n    selectable: false,\n};\n\n/**\n * ラベルのフォント設定\n */\nexport const labelBaseProps: fabric.ITextboxOptions = {\n    fontSize: 10,\n    fontFamily: 'sans-serif',\n    height: 10,\n};\n\n/**\n * 矢印の設定\n */\nexport interface ArrowOptions extends fabric.ILineOptions {\n    arrowWidth?: number;\n    arrowEdgeSize?: number;\n    onRotating?: (event: fabric.IEvent<Event>) => void;\n    onScaling?: (event: fabric.IEvent<Event>) => void;\n    onModified?: (event: fabric.IEvent<Event>) => void;\n}\n\n// 矢印の生成\ntype CreateArrowFunction = {\n    (points: BeamPoints, options?: ArrowOptions): fabric.Group;\n    (v1: Vector, v2: Vector, options?: ArrowOptions): fabric.Group;\n};\n\nconst defaultColor = 'black';\nconst defaultStrokeWidth = 2;\nconst defaultEdgeSize = 8;\n\nconst defaultLineOptions: fabric.ILineOptions = {\n    stroke: defaultColor,\n    strokeWidth: defaultStrokeWidth,\n    originX: 'center',\n    originY: 'bottom',\n    centeredRotation: false,\n};\nconst defaultEdgeOptions: fabric.ITriangleOptions = {\n    width: defaultEdgeSize,\n    height: defaultEdgeSize,\n    stroke: defaultColor,\n    strokeWidth: 1,\n    fill: defaultColor,\n    originX: 'center',\n    originY: 'center',\n    centeredRotation: true,\n};\n\nconst createArrowByVectors = (\n    v1: Vector,\n    v2: Vector,\n    { arrowWidth, arrowEdgeSize, onRotating, onScaling, onModified, ...options }: ArrowOptions = {}\n): fabric.Group => {\n    // 距離\n    const distance = v1.distance(v2);\n    // 方向\n    const dir = v2.clone().subtract(v1).normalize();\n    const angle = 180 - dir.verticalAngleDeg();\n\n    const line = new fabric.Line([0, 0, 0, distance * -1], {\n        strokeWidth: arrowWidth,\n        ...defaultLineOptions,\n        ...options,\n    });\n\n    const edgeSize = arrowEdgeSize ?? defaultEdgeSize;\n\n    const edge = new fabric.Triangle({\n        top: (edgeSize / 2) * -1,\n        left: 0,\n        angle: -180,\n        ...defaultEdgeOptions,\n        width: edgeSize,\n        height: edgeSize,\n        stroke: options.stroke,\n        fill: options.fill,\n    });\n\n    const arrow = new fabric.Group([line, edge], {\n        ...options,\n        top: v1.y,\n        left: v1.x,\n        originX: 'center',\n        originY: 'bottom',\n        centeredRotation: false,\n        angle,\n    });\n    arrow.setControlsVisibility({\n        bl: false,\n        br: false,\n        mb: false,\n        ml: false,\n        mr: false,\n        mt: true,\n        tl: false,\n        tr: false,\n        mtr: true,\n    });\n\n    return arrow;\n};\n\nconst createArrowByPoints = (points: BeamPoints, options?: ArrowOptions): fabric.Group => {\n    const p1 = new Vector(points[0], points[1]);\n    const p2 = new Vector(points[2], points[3]);\n    return createArrowByVectors(p1, p2, options);\n};\n\n/**\n * 矢印の作成 (始点を中心に回転・伸縮、始点に三角がくる)\n * @param arg1\n * @param arg2\n * @param arg3\n * @returns\n */\nexport const createArrow: CreateArrowFunction = (\n    arg1: BeamPoints | Vector,\n    arg2?: Vector | ArrowOptions,\n    arg3?: ArrowOptions\n): fabric.Group => {\n    if (Array.isArray(arg1)) {\n        return createArrowByPoints(arg1, arg2 as ArrowOptions);\n    } else if (arg2) {\n        return createArrowByVectors(arg1, arg2 as Vector, arg3);\n    }\n    throw new Error('invalid parameters');\n};\n\n/**\n * 梁要素の寸法線、集中荷重、分布荷重の表示・非表示を切り替える\n * @param shape\n * @param forceMap\n * @param trapezoidMap\n * @param visible\n */\nexport const setVisibledToBeamParts = (\n    shape: BeamShape,\n    forceMap: Record<string, ForceShape[]>,\n    trapezoidMap: Record<string, TrapezoidShape[]>,\n    visible = true\n): void => {\n    // 寸法線を非表示とする\n    if (shape.guide) {\n        shape.guide.visible = visible;\n    }\n    // 集中荷重を非表示とする\n    const forces = forceMap[shape.data.id];\n    if (forces) {\n        forces.forEach(({ force }) => {\n            force.visible = visible;\n        });\n    }\n    // 分布荷重を非表示とする\n    const trapezoids = trapezoidMap[shape.data.id];\n    if (trapezoids) {\n        trapezoids.forEach(({ arrows, line, labels, guide }) => {\n            arrows.forEach((arrow) => {\n                arrow.visible = visible;\n            });\n            line.visible = visible;\n            labels.forEach((label) => {\n                label.visible = visible;\n            });\n            if (guide) {\n                guide.visible = visible;\n            }\n        });\n    }\n};\n","import { fabric } from 'fabric';\nimport { Force } from '../../../types/shape';\nimport { lerp, Vector, verticalNormalizeVector } from '../util';\nimport { BeamShape } from './beam';\nimport { createArrow, labelBaseProps, unresponseShapeProps } from './common';\n\nexport type ForceShape = {\n    data: Force;\n    force: fabric.Group;\n    label: fabric.Textbox;\n};\n\n/**\n * 集中荷重の基本の長さ\n */\nconst ForceBaseLength = 30;\nconst ForceColor = 'orange';\n\nconst defaultForceLabelProps: fabric.ITextOptions = {\n    ...unresponseShapeProps,\n    ...labelBaseProps,\n    fill: ForceColor,\n    textAlign: 'left',\n};\n\n/**\n * 集中荷重の作成\n * @param force\n * @param points\n * @param ave\n */\nexport const createForce = (\n    force: Force,\n    points: [number, number, number, number],\n    ave: number,\n    readonly = false,\n    unit = 'kN'\n): ForceShape => {\n    // 梁要素の i端、j端\n    const pi = new Vector(points[0], points[1]);\n    const pj = new Vector(points[2], points[3]);\n    // 集中荷重の始点\n    const head = lerp(pi, pj, force.distanceI);\n    // 集中荷重の方向\n    const dir = verticalNormalizeVector(pi, pj);\n    // 大きさ\n    const ratio = force.force / ave;\n    const forceLength = isNaN(ratio) ? ForceBaseLength : ForceBaseLength * ratio;\n    // 集中荷重の終点\n    const tail = head.clone().add(dir.clone().multiplyScalar(forceLength));\n\n    // 矢印\n    const arrow = createArrow(head, tail, {\n        fill: ForceColor,\n        stroke: ForceColor,\n        name: force.id,\n        data: {\n            type: 'force',\n            ...force,\n        },\n        selectable: !readonly,\n        evented: !readonly,\n    });\n\n    // ラベルの基準位置\n    const beamDir = pj.clone().subtract(pi).normalize();\n    const labelPosition = head.clone().add(beamDir.clone().multiplyScalar(5));\n    const angle = dir.angleDeg();\n\n    const label = new fabric.Textbox(` ${force.force} ${unit}`, {\n        ...defaultForceLabelProps,\n        top: labelPosition.y,\n        left: labelPosition.x,\n        width: Math.max(forceLength, 140),\n        angle,\n        // デフォルトで非表示\n        visible: false,\n    });\n\n    return { data: force, force: arrow, label };\n};\n\n/**\n * 平均値を計算する\n * @param forces\n * @returns\n */\nexport const calcForceAverage = (forces: Force[]): number => {\n    let forceAverage = 0;\n    if (forces.length > 0) {\n        const { force: total } = forces.reduce((prev, current) => {\n            const item: Force = {\n                ...prev,\n                force: prev.force + current.force,\n            };\n            return item;\n        });\n        forceAverage = total / forces.length;\n    }\n\n    return forceAverage;\n};\n\n/**\n * 梁要素に紐づく集中荷重を再作成する\n * @param canvas\n * @param beamShape\n * @param forceMap\n */\nexport const recreateForces = (\n    canvas: fabric.Canvas,\n    beamShape: BeamShape,\n    forceMap: Record<string, ForceShape[]>,\n    forceAverage: number\n): void => {\n    const forces = forceMap[beamShape.data.id];\n    if (forces) {\n        const newForces: ForceShape[] = [];\n        forces.forEach((forceShape) => {\n            const data = forceShape.data;\n\n            // キャンバスから集中荷重を削除\n            canvas.remove(forceShape.force, forceShape.label);\n\n            const fs = createForce(data, beamShape.points, forceAverage);\n            newForces.push(fs);\n            // キャンバスに追加\n            canvas.add(fs.force);\n            canvas.add(fs.label);\n        });\n        forceMap[beamShape.data.id] = newForces;\n    }\n};\n\n/**\n * 集中荷重を更新する\n * @param canvas\n * @param forceShape\n * @param beamShape\n * @param forceAverage\n */\nexport const updateForce = (\n    canvas: fabric.Canvas,\n    data: Force,\n    forceShape: ForceShape,\n    beamShape: BeamShape,\n    forceAverage: number\n): void => {\n    // キャンバスから集中荷重を削除\n    canvas.remove(forceShape.force, forceShape.label);\n    // 集中荷重を再作成\n    const { force, label } = createForce(data, beamShape.points, forceAverage);\n    // ForceShape にセット\n    forceShape.force = force;\n    forceShape.label = label;\n    // キャンバスに追加\n    canvas.add(force, label);\n};\n\n/**\n * 集中荷重の削除\n * (NOTE: 集中荷重の平均値を再計算すること)\n * @param canvas\n * @param beamId\n * @param force\n * @param forceMap\n */\nexport const removeForce = (\n    canvas: fabric.Canvas,\n    force: ForceShape,\n    beamId: string,\n    forceMap: Record<string, ForceShape[]>\n): void => {\n    canvas.remove(force.force, force.label);\n\n    const forces = forceMap[beamId];\n    if (forces) {\n        // 削除対象の集中荷重を除外\n        const list = forces.filter((shape) => shape.data.id !== force.data.id);\n        forceMap[beamId] = list;\n    }\n};\n","import { fabric } from 'fabric';\nimport { v4 as uuid } from 'uuid';\nimport { ForceShape, NodeShape } from '.';\nimport { Beam, Force, isBeam } from '../../../types/shape';\nimport { createBeamGuideLine } from '../factory';\nimport CanvasManager from '../manager';\nimport { BeamPoints } from '../types';\nimport { round, snap, Vector, vY } from '../util';\n\nexport class BeamShape {\n    public data: Beam;\n    public beam: fabric.Line;\n    public guide?: fabric.Group;\n\n    public points: BeamPoints = [0, 0, 0, 0];\n    public direction: Vector = new Vector(0, 0);\n    public length = 1;\n    public angle = 0;\n\n    private manager: CanvasManager;\n    private dragging = false;\n    private _readonly = false;\n\n    private vi = new Vector(0, 0);\n    private vj = new Vector(0, 0);\n\n    // ドラッグ中に関連する節点、梁要素の Shape を保持する\n    // メモリリークを避けるため、ドラッグ完了後にクリアすること\n    private nodeI: NodeShape | undefined;\n    private nodeJ: NodeShape | undefined;\n    private relationBeams: BeamShape[] | undefined;\n\n    constructor(manager: CanvasManager, params: Beam) {\n        this.manager = manager;\n        this.data = params;\n\n        const nodeI = this.manager.nodeMap[params.nodeI];\n        const nodeJ = this.manager.nodeMap[params.nodeJ];\n        this._readonly = this.manager.readonly;\n\n        // 梁要素\n        this.beam = this.create([nodeI.data.x, nodeI.data.y, nodeJ.data.x, nodeJ.data.y], params, {\n            // readonly時はイベントに反応しない\n            selectable: !this.readonly,\n            evented: !this.readonly,\n        });\n\n        // 寸法線\n        this.guide = createBeamGuideLine(this.points);\n        this.guide.visible = false;\n\n        // キャンバスに追加\n        this.manager.canvas.add(this.beam, this.guide);\n\n        // イベント設定\n        this.attachEvents();\n    }\n\n    public get readonly(): boolean {\n        return this._readonly;\n    }\n    public set readonly(value: boolean) {\n        this._readonly = value;\n        // readonly時はイベントに反応しない\n        this.beam.selectable = !value;\n        this.beam.evented = !value;\n    }\n\n    private createBeamByVectors(\n        vi: Vector,\n        vj: Vector,\n        data: Beam,\n        options: fabric.ILineOptions\n    ): fabric.Line {\n        // 方向\n        this.direction = vj.clone().subtract(vi).normalize();\n        // 長さ\n        this.length = vi.distance(vj);\n        // 角度 (Vector では Y軸が上方向なので 上下反転させる)\n        this.angle = 180 - this.direction.verticalAngleDeg();\n\n        const beam = new fabric.Line([0, 0, 0, this.length], {\n            top: vi.y,\n            left: vi.x,\n            angle: this.angle,\n            // 始点を基準に回転させる\n            originX: 'center',\n            originY: 'bottom',\n            centeredRotation: false,\n            // 描画設定\n            stroke: 'black',\n            strokeWidth: 4,\n            ...options,\n            name: data.id,\n            data: {\n                type: 'beam',\n                ...data,\n            },\n        });\n        beam.setControlsVisibility({\n            bl: false,\n            br: false,\n            mb: false,\n            ml: false,\n            mr: false,\n            mt: true,\n            tl: false,\n            tr: false,\n            mtr: true,\n        });\n\n        this.points = [vi.x, vi.y, vj.x, vj.y];\n        this.vi = vi;\n        this.vj = vj;\n\n        return beam;\n    }\n\n    createBeamByPoints(points: BeamPoints, data: Beam, options: fabric.ILineOptions): fabric.Line {\n        const p1 = new Vector(points[0], points[1]);\n        const p2 = new Vector(points[2], points[3]);\n        return this.createBeamByVectors(p1, p2, data, options);\n    }\n\n    create(points: BeamPoints, data: Beam, options?: fabric.ILineOptions): fabric.Line;\n    create(vi: Vector, vj: Vector, data: Beam, options?: fabric.ILineOptions): fabric.Line;\n\n    create(\n        arg1: BeamPoints | Vector,\n        arg2: Vector | Beam,\n        arg3?: Beam | fabric.ILineOptions,\n        arg4?: fabric.ILineOptions\n    ): fabric.Line {\n        if (Array.isArray(arg1) && isBeam(arg2)) {\n            return this.createBeamByPoints(arg1, arg2, arg3 ?? {});\n        } else if (isBeam(arg3)) {\n            return this.createBeamByVectors(arg1 as Vector, arg2 as Vector, arg3, arg4 ?? {});\n        }\n        throw new Error('invalid parameters');\n    }\n\n    /**\n     * 寸法線を更新\n     */\n    private updateGuide() {\n        if (this.guide) {\n            this.manager.canvas.remove(this.guide);\n        }\n        this.guide = createBeamGuideLine(this.points);\n        this.guide.visible = false;\n        this.manager.canvas.add(this.guide);\n    }\n\n    private updateBeamByVectors(vi: Vector, vj: Vector): void {\n        // 方向\n        const direction = vj.clone().subtract(vi).normalize();\n        // 長さ\n        const length = vi.distance(vj);\n        // 角度 (Vector では Y軸が上方向なので 上下反転させる)\n        const angle = 180 - direction.verticalAngleDeg();\n\n        const points: BeamPoints = [vi.x, vi.y, vj.x, vj.y];\n\n        this.beam.scaleX = 1;\n        this.beam.scaleY = 1;\n        // dirty=true を指定していないと、一定の長さ以下の梁要素が描画できない\n        this.beam.dirty = true;\n        this.beam.top = vi.y;\n        this.beam.left = vi.x;\n        this.beam.height = length;\n        this.beam.rotate(angle);\n\n        // プロパティを更新\n        this.direction = direction;\n        this.length = length;\n        this.angle = angle;\n        this.points = points;\n        this.vi = vi;\n        this.vj = vj;\n\n        // 寸法線を更新\n        this.updateGuide();\n    }\n\n    private updateBeamByPoints(points: BeamPoints): void {\n        const p1 = new Vector(points[0], points[1]);\n        const p2 = new Vector(points[2], points[3]);\n        this.updateBeamByVectors(p1, p2);\n    }\n\n    update(): void;\n    update(points: BeamPoints): void;\n    update(vi: Vector, vj: Vector): void;\n\n    public update(arg1?: BeamPoints | Vector, arg2?: Vector): void {\n        if (Array.isArray(arg1)) {\n            this.updateBeamByPoints(arg1);\n            return;\n        } else if (arg1 && arg2) {\n            this.updateBeamByVectors(arg1, arg2);\n            return;\n        } else {\n            this.updateBeamByPoints(this.points);\n        }\n\n        throw new Error('invalid parameters');\n    }\n\n    /**\n     * 梁要素を削除する\n     * (NOTE: removeBeam 後、集中荷重と分布荷重の平均値を更新すること)\n     */\n    public remove(): void {\n        const { canvas, forceMap, trapezoidMap, beamMap, nodeBeamMap } = this.manager;\n        const beamId = this.data.id;\n\n        // 集中荷重を削除\n        const forces = forceMap[beamId];\n        if (forces) {\n            forces.forEach((shape) => {\n                shape.remove();\n            });\n            delete forceMap[beamId];\n        }\n        // 分布荷重を削除\n        const trapezoids = trapezoidMap[beamId];\n        if (trapezoids) {\n            trapezoids.forEach((shape) => {\n                shape.remove();\n            });\n            delete trapezoidMap[beamId];\n        }\n\n        // nodeBeamMap から梁要素を削除\n        [this.data.nodeI, this.data.nodeJ].forEach((nodeId) => {\n            const beams = nodeBeamMap[nodeId];\n            if (beams) {\n                // 削除対象の梁要素を除外\n                const list = beams.filter((shape) => shape.data.id !== beamId);\n                nodeBeamMap[nodeId] = list;\n            }\n        });\n\n        // 梁要素を削除\n        canvas.remove(this.beam);\n        if (this.guide) {\n            canvas.remove(this.guide);\n        }\n        delete beamMap[beamId];\n    }\n\n    /**\n     * 寸法線、集中荷重、分布荷重の表示・非表示を切り替える\n     * @param visible\n     */\n    public setVisibleParts(visible = true): void {\n        const { forceMap, trapezoidMap } = this.manager;\n        if (this.guide) {\n            this.guide.visible = visible;\n        }\n\n        // 集中荷重\n        const forces = forceMap[this.data.id];\n        if (forces) {\n            forces.forEach((shape) => {\n                shape.visible = visible;\n            });\n        }\n\n        // 分布荷重\n        const trapezoids = trapezoidMap[this.data.id];\n        if (trapezoids) {\n            trapezoids.forEach((shape) => {\n                shape.visible = visible;\n            });\n        }\n    }\n\n    /**\n     * 寸法線、集中荷重、分布荷重 を更新する\n     */\n    public updateParts(): void {\n        const { forceMap, trapezoidMap } = this.manager;\n        // 寸法線の更新\n        this.updateGuide();\n        // 集中荷重\n        const forces = forceMap[this.data.id];\n        if (forces) {\n            forces.forEach((shape) => {\n                shape.update();\n            });\n        }\n        // 分布荷重\n        const trapezoids = trapezoidMap[this.data.id];\n        if (trapezoids) {\n            trapezoids.forEach((shape) => {\n                shape.update();\n            });\n        }\n    }\n\n    /**\n     * i端の位置と長さ、角度からj端の位置を計算する\n     * @returns\n     */\n    private calcPoints(snapping = false): BeamPoints {\n        // i端の位置\n        let { top: iy = 0, left: ix = 0 } = this.beam;\n\n        if (snapping) {\n            [ix, iy] = snap([ix, iy], this.manager.snapSize);\n        }\n\n        this.vi.x = ix;\n        this.vi.y = iy;\n        // j端の位置を計算\n        this.vj.copy(this.vi);\n        this.vj.add(this.direction.clone().multiplyScalar(this.length));\n\n        return [this.vi.x, this.vi.y, this.vj.x, this.vj.y];\n    }\n\n    /**\n     * 指定座標を元に i端からの距離比を計算\n     * @param point\n     * @returns\n     */\n    public calcRatio(point: Vector): number {\n        // i端からクリック位置までの距離\n        const distance = this.vi.distance(point);\n        // i端からクリック位置の方向\n        const dir = point.clone().subtract(this.vi).normalize();\n        // クリック方向の角度\n        const angle = 180 - dir.verticalAngleDeg();\n        // クリック方向と梁要素のなす角度\n        const deg = this.angle - angle;\n        // ラジアンに変換\n        const rad = deg * (Math.PI / 180);\n        // 梁要素上の長さ\n        const length = distance * Math.cos(rad);\n        // 比率に変換\n        let ratio = round(length / this.length, 2);\n\n        // 0 〜 1 の範囲に修正\n        if (ratio < 0) {\n            ratio = 0;\n        }\n        if (ratio > 1) {\n            ratio = 1;\n        }\n\n        return ratio;\n    }\n\n    /**\n     * ドラッグ終了時の共通処理\n     */\n    private completeDrag() {\n        if (this.nodeI && this.nodeJ) {\n            const nodeI = this.nodeI;\n            const nodeJ = this.nodeJ;\n            const { nodeMap, nodeBeamMap, beamMap } = this.manager;\n            const [ix, iy, jx, jy] = this.points;\n\n            // 置き換える節点 (key: 削除される節点ID、value: 置き換える節点)\n            const replaceNodes: Record<string, NodeShape> = {};\n            // 削除する梁要素\n            const removingBeams: BeamShape[] = [];\n            // 更新された梁要素\n            const modifiedBeams: BeamShape[] = [this];\n\n            // 節点IDを配列にしておく\n            const nodeIds = [nodeI.data.id, nodeJ.data.id];\n\n            // 絶対に大丈夫だけど念の為に空配列を準備しておく\n            nodeIds.forEach((nodeId) => {\n                if (typeof nodeBeamMap[nodeId] === 'undefined') {\n                    nodeBeamMap[nodeId] = [];\n                }\n            });\n\n            // 梁要素をドラッグした結果、i端あるいはj端の節点が\n            // 別の節点と同一座標になった場合、同一座標の節点をドラッグ中の節点に置換する\n            Object.values(nodeMap).forEach((nodeShape) => {\n                // ドラッグした梁要素の i端/j端 は対象外\n                if (nodeIds.includes(nodeShape.data.id)) {\n                    return;\n                }\n                if (nodeShape.data.x === ix && nodeShape.data.y === iy) {\n                    // i端の節点と置き換える\n                    replaceNodes[nodeShape.data.id] = nodeI;\n                } else if (nodeShape.data.x === jx && nodeShape.data.y === jy) {\n                    // j端の節点と置き換える\n                    replaceNodes[nodeShape.data.id] = nodeJ;\n                }\n            });\n\n            // 梁要素の節点を置換する\n            Object.values(beamMap).forEach((beamShape) => {\n                // ドラッグした梁要素は除外\n                if (beamShape.data.id === this.data.id) {\n                    return;\n                }\n\n                // i端あるいはj端の同一座標の節点を置き換える\n                let replacedI = false;\n                let replacedJ = false;\n                if (replaceNodes[beamShape.data.nodeI]) {\n                    replacedI = true;\n                    beamShape.data.nodeI = replaceNodes[beamShape.data.nodeI].data.id;\n                }\n                if (replaceNodes[beamShape.data.nodeJ]) {\n                    replacedJ = true;\n                    beamShape.data.nodeJ = replaceNodes[beamShape.data.nodeJ].data.id;\n                }\n\n                if (replacedI && replacedJ) {\n                    // i端とj端の両方の節点を置換した\n                    // → ドラッグした梁要素と同じ位置にある梁要素なので削除する\n                    removingBeams.push(beamShape);\n                    return;\n                }\n\n                const points = beamShape.points;\n                let modified = false;\n                // i端あるいはj端がドラッグした梁要素と一致する\n                // → 再描画する\n                if (beamShape.data.nodeI === nodeI.data.id) {\n                    points[0] = ix;\n                    points[1] = iy;\n                    modified = true;\n                }\n                if (beamShape.data.nodeI === nodeJ.data.id) {\n                    points[0] = jx;\n                    points[1] = jy;\n                    modified = true;\n                }\n                if (beamShape.data.nodeJ === nodeI.data.id) {\n                    points[2] = ix;\n                    points[3] = iy;\n                    modified = true;\n                }\n                if (beamShape.data.nodeJ === nodeJ.data.id) {\n                    points[2] = jx;\n                    points[3] = jy;\n                    modified = true;\n                }\n                if (modified) {\n                    beamShape.update(points);\n\n                    // 更新した結果、長さが 0 になった梁要素を削除する\n                    if (beamShape.length === 0) {\n                        removingBeams.push(beamShape);\n                    } else {\n                        // 更新対象としてマーク\n                        modifiedBeams.push(beamShape);\n                    }\n                }\n            }); // end 梁要素の節点を置換\n\n            if (removingBeams.length > 0) {\n                // 梁要素の削除処理\n                removingBeams.forEach((beam) => {\n                    beam.remove();\n                });\n\n                // 集中荷重の平均値を更新\n                this.manager.calcForceAverage();\n                // 分布荷重の平均値を更新\n                this.manager.calcTrapezoidAverage();\n            }\n\n            // 節点の削除処理\n            Object.entries(replaceNodes).forEach(([removedNodeId, nodeShape]) => {\n                // nodeBeamMap の付け替え\n                const beams = nodeBeamMap[removedNodeId];\n                if (beams) {\n                    const list = nodeBeamMap[nodeShape.data.id] ?? [];\n                    beams.forEach((beamShape) => {\n                        if (list.some((beam) => beam.data.id !== beamShape.data.id)) {\n                            list.push(beamShape);\n                        }\n                    });\n                    nodeBeamMap[nodeShape.data.id] = list;\n                }\n\n                const node = nodeMap[removedNodeId];\n                if (node) {\n                    node.remove();\n                }\n            });\n\n            // 更新した梁要素について、集中荷重・分布荷重・寸法線を再生成する\n            modifiedBeams.forEach((beam) => {\n                beam.updateParts();\n            });\n\n            // 全体の寸法線を更新する\n            this.manager.updateGlobalGuidelines();\n        }\n        // ドラッグ終了\n        this.nodeI = undefined;\n        this.nodeJ = undefined;\n        this.relationBeams = undefined;\n        this.dragging = false;\n    } // end onDragEnd\n\n    // イベントハンドラ\n    private attachEvents() {\n        // 選択\n        this.beam.on('selected', this.onSelect.bind(this));\n        this.beam.on('deselected', this.onDeselect.bind(this));\n        // クリック\n        this.beam.on('mousedown', this.onMouseDown.bind(this));\n        this.beam.on('mousedown:before', this.onMouseDownBefore.bind(this));\n        // ドラッグ\n        this.beam.on('moving', this.onMoving.bind(this));\n        this.beam.on('moved', this.onMoved.bind(this));\n        // 回転\n        this.beam.on('rotating', this.onRotating.bind(this));\n        this.beam.on('rotated', this.onRotated.bind(this));\n        // 伸縮\n        this.beam.on('scaling', this.onScaling.bind(this));\n        this.beam.on('scaled', this.onScaled.bind(this));\n    }\n\n    private onSelect(event: fabric.IEvent<Event>): void {\n        if (this.guide) {\n            this.guide.visible = true;\n        }\n    }\n    private onDeselect(event: fabric.IEvent<Event>): void {\n        if (this.guide) {\n            this.guide.visible = false;\n        }\n    }\n\n    /**\n     * 分布荷重追加モード時、梁要素のクリック前に描画可能にする\n     */\n    private onMouseDownBefore(): void {\n        if (this.manager.tool === 'trapezoid') {\n            // 分布荷重の描画開始\n            this.manager.currentBeam = this.data.id;\n            this.manager.canvas.isDrawingMode = true;\n        }\n    }\n\n    private onMouseDown(event: fabric.IEvent<Event>): void {\n        if (event.pointer) {\n            // クリック位置\n            const point = new Vector(event.pointer.x, event.pointer.y);\n            if (this.manager.tool === 'force') {\n                // クリックした位置に集中荷重を追加する\n                // i端からの距離 (比率)\n                const ratio = this.calcRatio(point);\n\n                // 集中荷重を作成\n                const forceId = uuid();\n                const force: Force = {\n                    id: forceId,\n                    name: forceId,\n                    beam: this.data.id,\n                    force: 10, // 初期値固定\n                    distanceI: ratio,\n                };\n                const shape = new ForceShape(this.manager, force);\n                if (typeof this.manager.forceMap[this.data.id] === 'undefined') {\n                    this.manager.forceMap[this.data.id] = [];\n                }\n                this.manager.forceMap[this.data.id].push(shape);\n\n                // 集中荷重の平均値を更新\n                this.manager.calcForceAverage();\n            } else if (this.manager.tool === 'delete') {\n                // 梁要素を削除\n                this.remove();\n                // 梁要素に紐付かない節点を削除\n                this.manager.removeUnconnectedNodes();\n                // 寸法線を更新\n                this.manager.updateGlobalGuidelines();\n                // 集中荷重、分布荷重の平均値を再計算\n                this.manager.calcForceAverage();\n                this.manager.calcTrapezoidAverage();\n            }\n        }\n    }\n\n    /**\n     * 梁要素のドラッグ\n     * @param event\n     */\n    private onMoving(event: fabric.IEvent<Event>): void {\n        if (this.manager.tool === 'select') {\n            if (!this.dragging) {\n                // 寸法線・集中荷重・分布荷重を非表示とする\n                this.setVisibleParts(false);\n\n                this.nodeI = this.manager.nodeMap[this.data.nodeI];\n                this.nodeJ = this.manager.nodeMap[this.data.nodeJ];\n                this.relationBeams = [];\n\n                const nodes = [this.nodeI, this.nodeJ];\n                nodes.forEach((node) => {\n                    // i端、j端の pin を非表示にする\n                    if (node && node.pin) {\n                        node.pin.visible = false;\n                    }\n\n                    // i端/j端に接続する梁要素\n                    const beams = this.manager.nodeBeamMap[node.data.id];\n                    beams.forEach((beam) => {\n                        if (beam.data.id !== this.data.id) {\n                            // 寸法線・集中荷重・分布荷重を非表示とする\n                            beam.setVisibleParts(false);\n                            this.relationBeams?.push(beam);\n                        }\n                    });\n                });\n            }\n\n            // 位置を計算\n            const [ix, iy, jx, jy] = this.calcPoints();\n\n            if (this.nodeI && this.nodeJ) {\n                // 節点を移動\n                this.nodeI.update(ix, iy, false);\n                this.nodeJ.update(jx, jy, false);\n\n                // 節点に紐づく梁要素を更新\n                this.relationBeams?.forEach((beamShape) => {\n                    const points = beamShape.points;\n                    if (beamShape.data.nodeI === this.nodeI?.data.id) {\n                        points[0] = ix;\n                        points[1] = iy;\n                    }\n                    if (beamShape.data.nodeI === this.nodeJ?.data.id) {\n                        points[0] = jx;\n                        points[1] = jy;\n                    }\n                    if (beamShape.data.nodeJ === this.nodeI?.data.id) {\n                        points[2] = ix;\n                        points[3] = iy;\n                    }\n                    if (beamShape.data.nodeJ === this.nodeJ?.data.id) {\n                        points[2] = jx;\n                        points[3] = jy;\n                    }\n                    beamShape.update(points);\n                });\n            }\n\n            this.dragging = true;\n        }\n    } // onMoving\n\n    private onMoved(event: fabric.IEvent<Event>): void {\n        if (this.manager.tool === 'select' && this.dragging && this.nodeI && this.nodeJ) {\n            // 位置を取得\n            const [ix, iy, jx, jy] = this.calcPoints(true);\n\n            // 梁要素を更新\n            this.update([ix, iy, jx, jy]);\n            // 節点の更新\n            this.nodeI?.update(ix, iy);\n            this.nodeJ?.update(jx, jy);\n\n            // ドラッグ完了\n            this.completeDrag();\n        }\n    } // end onMoved\n\n    /**\n     * rotate もドラッグの一形態とみなす\n     * @param event\n     */\n    private onRotating(event: fabric.IEvent<Event>): void {\n        if (this.manager.tool === 'select') {\n            if (!this.dragging) {\n                // 寸法線・集中荷重・分布荷重を非表示とする\n                this.setVisibleParts(false);\n\n                this.nodeI = this.manager.nodeMap[this.data.nodeI];\n                this.nodeJ = this.manager.nodeMap[this.data.nodeJ];\n                this.relationBeams = [];\n\n                // j端の pin を非表示にする\n                if (this.nodeJ.pin) {\n                    this.nodeJ.pin.visible = false;\n                }\n\n                // j端に接続する梁要素\n                const beams = this.manager.nodeBeamMap[this.nodeJ.data.id];\n                beams.forEach((beam) => {\n                    if (beam.data.id !== this.data.id) {\n                        // 寸法線・集中荷重・分布荷重を非表示とする\n                        beam.setVisibleParts(false);\n                        this.relationBeams?.push(beam);\n                    }\n                });\n            }\n\n            // j端の位置を取得\n            this.vj.copy(this.vi);\n            this.vj.add(\n                vY\n                    .clone()\n                    .invert()\n                    .multiplyScalar(this.length)\n                    .rotateDeg(this.beam.angle ?? 0)\n            );\n            const [jx, jy] = [this.vj.x, this.vj.y];\n            this.nodeJ?.update(jx, jy);\n\n            // 節点に紐づく梁要素の更新\n            this.relationBeams?.forEach((beamShape) => {\n                const points = beamShape.points;\n                if (beamShape.data.nodeI === this.nodeJ?.data.id) {\n                    points[0] = jx;\n                    points[1] = jy;\n                }\n                if (beamShape.data.nodeJ === this.nodeJ?.data.id) {\n                    points[2] = jx;\n                    points[3] = jy;\n                }\n                beamShape.update(points);\n            });\n\n            this.dragging = true;\n        }\n    } // end onRotating\n\n    private onRotated(event: fabric.IEvent<Event>): void {\n        if (this.manager.tool === 'select' && this.dragging) {\n            // j端の位置を取得\n            this.vj.copy(this.vi);\n            this.vj.add(\n                vY\n                    .clone()\n                    .invert()\n                    .multiplyScalar(this.length)\n                    .rotateDeg(this.beam.angle ?? 0)\n            );\n            const [jx, jy] = snap([this.vj.x, this.vj.y], this.manager.snapSize);\n            // j端の更新\n            this.vj.x = jx;\n            this.vj.y = jy;\n            this.nodeJ?.update(jx, jy);\n\n            // 梁要素の更新\n            this.update([this.vi.x, this.vi.y, jx, jy]);\n\n            // ドラッグ完了\n            this.completeDrag();\n        }\n    } // end onRotated\n\n    private onScaling(event: fabric.IEvent<Event>): void {\n        if (this.manager.tool === 'select') {\n            if (!this.dragging) {\n                // 寸法線・集中荷重・分布荷重を非表示とする\n                this.setVisibleParts(false);\n\n                this.nodeI = this.manager.nodeMap[this.data.nodeI];\n                this.nodeJ = this.manager.nodeMap[this.data.nodeJ];\n                this.relationBeams = [];\n\n                // j端の pin を非表示にする\n                if (this.nodeJ.pin) {\n                    this.nodeJ.pin.visible = false;\n                }\n\n                // j端に接続する梁要素\n                const beams = this.manager.nodeBeamMap[this.nodeJ.data.id];\n                beams.forEach((beam) => {\n                    if (beam.data.id !== this.data.id) {\n                        // 寸法線・集中荷重・分布荷重を非表示とする\n                        beam.setVisibleParts(false);\n                        this.relationBeams?.push(beam);\n                    }\n                });\n            }\n\n            // j端の位置を更新\n            const scale = this.beam.scaleY ?? 1;\n            const angle = this.beam.angle ?? 0;\n            this.vj.copy(this.vi);\n            this.vj.add(\n                vY\n                    .clone()\n                    .invert()\n                    .multiplyScalar(this.length * scale)\n                    .rotateDeg(angle)\n            );\n            const [jx, jy] = [this.vj.x, this.vj.y];\n            this.nodeJ?.update(jx, jy);\n\n            // 節点に紐づく梁要素の更新\n            this.relationBeams?.forEach((beamShape) => {\n                const points = beamShape.points;\n                if (beamShape.data.nodeI === this.nodeJ?.data.id) {\n                    points[0] = jx;\n                    points[1] = jy;\n                }\n                if (beamShape.data.nodeJ === this.nodeJ?.data.id) {\n                    points[2] = jx;\n                    points[3] = jy;\n                }\n                beamShape.update(points);\n            });\n\n            this.dragging = true;\n        }\n    } // end onScaling\n\n    private onScaled(event: fabric.IEvent<Event>): void {\n        if (this.manager.tool === 'select' && this.dragging) {\n            // j端の位置を取得\n            const scale = this.beam.scaleY ?? 1;\n            const angle = this.beam.angle ?? 0;\n            this.vj.copy(this.vi);\n            this.vj.add(\n                vY\n                    .clone()\n                    .invert()\n                    .multiplyScalar(this.length * scale)\n                    .rotateDeg(angle)\n            );\n            const [jx, jy] = snap([this.vj.x, this.vj.y], this.manager.snapSize);\n            // j端の更新\n            this.vj.x = jx;\n            this.vj.y = jy;\n            this.nodeJ?.update(jx, jy);\n\n            // 梁要素の更新\n            this.update([this.vi.x, this.vi.y, jx, jy]);\n\n            // ドラッグ完了\n            this.completeDrag();\n        }\n    }\n}\n","import { fabric } from 'fabric';\nimport { Force } from '../../../types/shape';\nimport { createArrow, labelBaseProps, unresponseShapeProps } from '../factory';\nimport CanvasManager from '../manager';\nimport { lerp, round, roundDegree, snapAngle, Vector } from '../util';\nimport { BeamShape } from './BeamShape';\n\n/**\n * 集中荷重の基本の長さ\n */\nconst ForceBaseLength = 30;\nconst ForceColor = 'orange';\n\nconst defaultForceLabelProps: fabric.ITextOptions = {\n    ...unresponseShapeProps,\n    ...labelBaseProps,\n    fill: ForceColor,\n    textAlign: 'left',\n};\n\nexport class ForceShape {\n    public data: Force;\n    public force: fabric.Group;\n    public label: fabric.Textbox;\n\n    private manager: CanvasManager;\n    private longpressTimer: NodeJS.Timer | undefined;\n    private dragging = false;\n    private _readonly = false;\n\n    private head: Vector = new Vector(0, 0);\n    // private tail: Vector = new Vector(0, 0);\n    private direction: Vector = new Vector(0, 1);\n    private length = 0;\n\n    // ドラッグ中に梁要素の Shape を保持する\n    // メモリリークを避けるため、ドラッグ完了後にクリアすること\n    private beam: BeamShape | undefined;\n    private vi = new Vector(0, 0);\n    private vj = new Vector(0, 0);\n\n    // rotate前の global な angle\n    private originalAngle = 0;\n    // ドラッグ中の位置\n    private position = new Vector(0, 0);\n    // ドラッグ可能な範囲\n    private draggableMin = Number.MIN_SAFE_INTEGER;\n    private draggableMax = Number.MAX_SAFE_INTEGER;\n\n    constructor(manager: CanvasManager, params: Force) {\n        this.manager = manager;\n        this.data = params;\n\n        this._readonly = this.manager.readonly;\n\n        // 矢印、ラベル生成\n        [this.force, this.label] = this.create();\n        this.manager.canvas.add(this.force, this.label);\n\n        // イベント割当\n        this.attachEvent();\n    }\n\n    public get readonly(): boolean {\n        return this._readonly;\n    }\n    public set readonly(value: boolean) {\n        this._readonly = value;\n        // readonly時はイベントに反応しない\n        this.force.selectable = !value;\n        this.force.evented = !value;\n    }\n\n    public get visible(): boolean {\n        return this.force.visible ?? true;\n    }\n\n    public set visible(value: boolean) {\n        this.force.visible = value;\n        this.label.visible = value;\n    }\n\n    /**\n     * 矢印の長さから集中荷重の大きさを計算\n     * @returns\n     */\n    private calcForce(): number {\n        if (this.manager.forceAverage === 0) {\n            return 10;\n        }\n\n        return Math.round((this.length / ForceBaseLength) * this.manager.forceAverage);\n    }\n\n    /**\n     * 集中荷重の大きさと平均値から矢印の長さを計算\n     * @returns\n     */\n    private calcLength(): number {\n        if (this.manager.forceAverage === 0) {\n            return ForceBaseLength;\n        }\n        const ratio = this.data.force / this.manager.forceAverage;\n        return ForceBaseLength * ratio;\n    }\n\n    private create(): [fabric.Group, fabric.Textbox] {\n        const { id, beam, distanceI, angle = 0 } = this.data;\n        // 集中荷重の対象梁要素\n        const beamShape = this.manager.beamMap[beam];\n        const { points } = beamShape;\n\n        // 梁要素の i端、j端\n        const pi = new Vector(points[0], points[1]);\n        const pj = new Vector(points[2], points[3]);\n        // 集中荷重の始点\n        const head = lerp(pi, pj, distanceI);\n        // 集中荷重の方向\n        const dir = beamShape.direction\n            .clone()\n            .rotateDeg(angle - 90)\n            .normalize();\n        // 大きさ\n        const forceLength = this.calcLength();\n        // 集中荷重の終点\n        const tail = head.clone().add(dir.clone().multiplyScalar(forceLength));\n\n        // 矢印\n        const arrow = createArrow(head, tail, {\n            fill: ForceColor,\n            stroke: ForceColor,\n            name: id,\n            data: {\n                ...this.data,\n                type: 'force',\n            },\n            selectable: !this.readonly,\n            evented: !this.readonly,\n        });\n\n        // ラベルの基準位置\n        const labelPosition = head.clone().add(beamShape.direction.clone().multiplyScalar(5));\n        const labelAngle = dir.angleDeg();\n\n        const label = new fabric.Textbox(` ${this.data.force} kN`, {\n            ...defaultForceLabelProps,\n            top: labelPosition.y,\n            left: labelPosition.x,\n            width: Math.max(forceLength, 140),\n            angle: labelAngle,\n            // デフォルトで非表示\n            visible: false,\n        });\n\n        // ドラッグ時に使用するので保持しておく\n        this.head.copy(head);\n        // this.tail.copy(tail);\n        this.direction.copy(dir);\n        this.length = forceLength;\n\n        return [arrow, label];\n    }\n\n    public update(params?: Force): void {\n        if (params) {\n            this.data = params;\n        }\n\n        // ラベルが表示されていた場合、集中荷重が選択されていたとみなす\n        const selected = this.label.visible ?? false;\n\n        // キャンバスから集中荷重を削除\n        this.manager.canvas.remove(this.force, this.label);\n        // 集中荷重を再作成\n        [this.force, this.label] = this.create();\n        this.manager.canvas.add(this.force, this.label);\n\n        // イベント割当\n        this.attachEvent();\n\n        if (selected) {\n            // 選択状態を復元する\n            this.select();\n        }\n    }\n\n    /**\n     * 集中荷重の削除\n     * (NOTE: 集中荷重の平均値を再計算すること)\n     */\n    public remove(): void {\n        // キャンバスから集中荷重を削除\n        this.manager.canvas.remove(this.force, this.label);\n\n        const forces = this.manager.forceMap[this.data.beam];\n        if (forces) {\n            // 自身を配列から除去\n            const list = forces.filter((shape) => shape.data.id !== this.data.id);\n            this.manager.forceMap[this.data.beam] = list;\n        }\n    }\n\n    /**\n     * 選択\n     */\n    public select(): void {\n        this.manager.canvas.setActiveObject(this.force);\n    }\n\n    // イベントハンドラ\n\n    private attachEvent() {\n        this.force.on('selected', this.onSelected.bind(this));\n        this.force.on('deselected', this.onDeselected.bind(this));\n        // クリック・長押し\n        this.force.on('mousedown', this.onMouseDown.bind(this));\n        this.force.on('mouseup', this.onMouseUp.bind(this));\n        this.force.on('mousedblclick', this.onDblClick.bind(this));\n        // ドラッグ\n        this.force.on('moving', this.onMoving.bind(this));\n        this.force.on('moved', this.onMoved.bind(this));\n        // 回転\n        this.force.on('rotating', this.onRotating.bind(this));\n        this.force.on('rotated', this.onRotated.bind(this));\n        // 伸縮\n        this.force.on('scaling', this.onScaling.bind(this));\n        this.force.on('scaled', this.onScaled.bind(this));\n    }\n\n    private onSelected(): void {\n        this.label.visible = true;\n    }\n\n    private onDeselected(): void {\n        this.label.visible = false;\n    }\n\n    private onMouseDown(event: fabric.IEvent<Event>): void {\n        if (this.readonly) {\n            // 読み取り専用時は何もしない\n            return;\n        }\n\n        if (this.manager.tool === 'delete') {\n            this.remove();\n            this.manager.calcForceAverage();\n            return;\n        }\n\n        if (['select', 'force'].includes(this.manager.tool) && event.target) {\n            // すでに長押しを実行中ならタイマーキャンセル\n            if (this.longpressTimer) {\n                clearTimeout(this.longpressTimer);\n                this.longpressTimer = undefined;\n            }\n\n            const shape = this.force;\n            // 長押し前の現在位置を保持する\n            const { top: beforeTop, left: beforeLeft } = shape.getBoundingRect(true, true);\n\n            // 長押し判定\n            this.longpressTimer = setTimeout(() => {\n                // 長押し後の現在位置\n                const { top: afterTop, left: afterLeft } = shape.getBoundingRect(true, true);\n                // 位置が変わっていなければ longpress とする\n                if (beforeTop === afterTop && beforeLeft === afterLeft) {\n                    // ダイアログの表示\n                    this.manager.openForceDialog(event, this);\n                }\n                this.longpressTimer = undefined;\n            }, CanvasManager.LongpressInterval);\n        }\n    } // end onMouseDown\n\n    private onMouseUp(event: fabric.IEvent<Event>): void {\n        if (this.longpressTimer) {\n            clearTimeout(this.longpressTimer);\n            this.longpressTimer = undefined;\n        }\n    }\n\n    private onDblClick(event: fabric.IEvent<Event>): void {\n        if (!this.readonly) {\n            // ダイアログの表示\n            this.manager.openForceDialog(event, this);\n        }\n    }\n\n    private onRotating(event: fabric.IEvent<Event>): void {\n        if (['select', 'force'].includes(this.manager.tool)) {\n            if (!this.dragging) {\n                // ラベルを非表示にする\n                this.label.visible = false;\n                // 現在の角度を保持\n                this.originalAngle = this.force.angle ?? 0;\n            }\n\n            this.dragging = true;\n        }\n    }\n\n    private onRotated(event: fabric.IEvent<Event>): void {\n        const currentAngle = this.force.angle ?? 0;\n\n        let deg = 0;\n        if (this.originalAngle === currentAngle) {\n            return;\n        } else if (this.originalAngle < currentAngle) {\n            deg = currentAngle - this.originalAngle;\n        } else if (this.originalAngle > currentAngle) {\n            deg = 360 - this.originalAngle + currentAngle;\n        }\n        // 0 <= deg < 360 に変換\n        deg = roundDegree(deg);\n        // 5° にスナップする\n        deg = snapAngle(deg, 5);\n\n        let angle = this.originalAngle + deg;\n        angle = roundDegree(angle);\n\n        // 矢印、ラベルを回す\n        this.force.angle = angle;\n        this.label.angle = angle - 90;\n        this.label.visible = true;\n\n        // 角度を保持\n        let value = (this.data.angle ?? 0) + deg;\n        value = roundDegree(value);\n        this.data.angle = value;\n\n        this.dragging = false;\n    }\n\n    private onScaling(event: fabric.IEvent<Event>): void {\n        if (['select', 'force'].includes(this.manager.tool)) {\n            this.dragging = true;\n        }\n    }\n\n    private onScaled(event: fabric.IEvent<Event>): void {\n        if (this.dragging) {\n            const scale = this.force.scaleY ?? 1;\n            const length = this.length * scale;\n\n            // 長さから集中荷重の大きさを計算\n            this.length = length;\n            const f = this.calcForce();\n            this.data.force = f;\n\n            // 矢印を作成しなおす\n            this.update();\n\n            // 選択\n            this.select();\n        }\n        this.dragging = false;\n    }\n\n    private calcMovedPosition() {\n        if (this.beam) {\n            // ドラッグ位置\n            this.position.x = this.force.left ?? 0;\n            this.position.y = this.force.top ?? 0;\n\n            // 元の位置から現在位置までの長さ\n            const dragDis = this.head.distance(this.position);\n            // ドラッグの方向\n            const dragDir = this.position.clone().subtract(this.head).normalize();\n            // ドラッグの角度\n            const angle = 180 - dragDir.verticalAngleDeg();\n            // ドラッグ方向と梁要素のなす角度\n            const deg = this.beam.angle - angle;\n            const rad = (deg * Math.PI) / 180;\n            // ドラッグされた長さを梁要素上の長さに変換\n            let dist = dragDis * Math.cos(rad);\n\n            if (this.draggableMin > dist) {\n                dist = this.draggableMin;\n            } else if (this.draggableMax < dist) {\n                dist = this.draggableMax;\n            }\n\n            // 集中荷重の位置\n            this.position.copy(this.head).add(this.beam.direction.clone().multiplyScalar(dist));\n        }\n    }\n\n    private onMoving(event: fabric.IEvent<Event>): void {\n        if (['select', 'force'].includes(this.manager.tool)) {\n            if (!this.dragging) {\n                // ラベルを非表示\n                this.label.visible = false;\n                // 対象の梁要素を取得\n                this.beam = this.manager.beamMap[this.data.beam];\n\n                // ドラッグ可能範囲を計算\n                [this.vi.x, this.vi.y] = [this.beam.points[0], this.beam.points[1]];\n                [this.vj.x, this.vj.y] = [this.beam.points[2], this.beam.points[3]];\n\n                this.draggableMin = this.vi.distance(this.head) * -1;\n                this.draggableMax = this.vj.distance(this.head);\n\n                // 初期位置を初期化\n                this.position.copy(this.head);\n\n                this.dragging = true;\n            }\n\n            // 位置の計算\n            this.calcMovedPosition();\n            // 集中荷重を移動\n            this.force.left = this.position.x;\n            this.force.top = this.position.y;\n        }\n    }\n\n    private onMoved(event: fabric.IEvent<Event>): void {\n        if (this.beam) {\n            // ドラッグ位置を計算\n            this.calcMovedPosition();\n            // i端からの距離を更新\n            const distI = this.vi.distance(this.position);\n            this.data.distanceI = round(distI / this.beam.length, 2);\n\n            // 位置を再計算\n            this.head.copy(\n                this.vi\n                    .clone()\n                    .add(\n                        this.beam.direction\n                            .clone()\n                            .multiplyScalar(this.beam.length * this.data.distanceI)\n                    )\n            );\n            this.force.left = this.head.x;\n            this.force.top = this.head.y;\n\n            // ラベル位置を更新\n            this.label.left = this.head.x;\n            this.label.top = this.head.y;\n            this.label.visible = true;\n        }\n        // ドラッグ終了\n        this.beam = undefined;\n        this.draggableMin = Number.MIN_SAFE_INTEGER;\n        this.draggableMax = Number.MAX_SAFE_INTEGER;\n        this.dragging = false;\n    }\n}\n","import { fabric } from 'fabric';\nimport { isNode, Node, NodePinType } from '../../../types/shape';\nimport CanvasManager from '../manager';\nimport { snap } from '../util';\nimport { BeamShape } from './BeamShape';\n\nconst Pins: Readonly<Record<NodePinType, string>> = {\n    free: '/assets/images/pins/pin_1.svg', // とりあえずダミーで指定\n    pin: '/assets/images/pins/pin_1.svg',\n    pinX: '/assets/images/pins/pin_2.svg',\n    pinZ: '/assets/images/pins/pin_2.svg',\n    fixX: '/assets/images/pins/pin_3.svg',\n    fix: '/assets/images/pins/pin_4.svg',\n};\nconst PinSize = 24;\nconst NodeRadius = 5;\n\nexport class NodeShape {\n    public data: Node;\n    public node: fabric.Circle;\n    public pin: fabric.Object | undefined;\n\n    private manager: CanvasManager;\n    private longpressTimer: NodeJS.Timer | undefined;\n    private dragging = false;\n    private _readonly = false;\n\n    constructor(manager: CanvasManager, params: Node) {\n        this.manager = manager;\n        this.data = params;\n\n        this.node = this.createNode(params);\n        // キャンバスに追加\n        this.manager.canvas.add(this.node);\n        // pin読み込み\n        this.loadPin();\n\n        this.attachEvents();\n    }\n\n    public update(): void;\n    public update(x: number, y: number, visiblePin?: boolean): void;\n    public update(params: Node, visiblePin?: boolean): void;\n\n    public update(arg1?: number | Node, arg2?: number | boolean, arg3?: boolean): void {\n        if (typeof arg1 === 'number' && typeof arg2 === 'number') {\n            this.updatePosition(arg1, arg2, arg3);\n            return;\n        } else if (isNode(arg1) && typeof arg2 !== 'number') {\n            this.updateByParams(arg1, arg2);\n            return;\n        } else if (typeof arg1 === 'undefined') {\n            const { x, y } = this.data;\n            this.updatePosition(x, y, true);\n        }\n        throw new Error('invalid parameters');\n    }\n\n    private updatePosition(x: number, y: number, visiblePin = true): void {\n        const params: Node = {\n            ...this.data,\n            x,\n            y,\n        };\n        this.updateByParams(params, visiblePin);\n    }\n\n    private updateByParams(params: Node, visiblePin = true): void {\n        const { x, y, pin } = params;\n        this.data = params;\n        this.node.top = y;\n        this.node.left = x;\n        this.node.data = {\n            ...params,\n            type: 'node',\n        };\n\n        if (pin) {\n            if (this.pin && this.pin.data.pin === pin) {\n                // pin の変更なし、位置のみ更新する\n                if (pin === 'pinZ') {\n                    this.pin.top = y + NodeRadius;\n                    this.pin.left = x;\n                } else {\n                    this.pin.top = y;\n                    this.pin.left = x + NodeRadius;\n                }\n                this.pin.visible = visiblePin;\n            } else {\n                // pin の再読み込み\n                this.loadPin(visiblePin);\n            }\n        }\n    }\n\n    public remove(): void {\n        this.manager.canvas.remove(this.node);\n        if (this.pin) {\n            this.manager.canvas.remove(this.pin);\n        }\n\n        const beams = this.manager.nodeBeamMap[this.data.id];\n        if (beams) {\n            beams.forEach((beam) => {\n                beam.remove();\n            });\n        }\n\n        delete this.manager.nodeMap[this.data.id];\n        delete this.manager.nodeBeamMap[this.data.id];\n    }\n\n    public get readonly(): boolean {\n        return this._readonly;\n    }\n    public set readonly(value: boolean) {\n        this._readonly = value;\n        // readonly時はイベントに反応しない\n        this.node.selectable = !value;\n        this.node.evented = !value;\n    }\n\n    private createNode(params: Node): fabric.Circle {\n        return new fabric.Circle({\n            name: params.id,\n            data: {\n                type: 'node',\n                ...params,\n            },\n            top: params.y,\n            left: params.x,\n            radius: NodeRadius,\n            fill: 'black',\n            originX: 'center',\n            originY: 'center',\n            // 選択してもコントロールを表示しない\n            hasBorders: false,\n            hasControls: false,\n            // readonly時はイベントに反応しない\n            selectable: !this.manager.readonly,\n            evented: !this.manager.readonly,\n        });\n    }\n\n    private setPinProperties(params: Node) {\n        if (this.pin) {\n            this.pin.name = `image/${params.id}`;\n            this.pin.data = {\n                ...params,\n                type: 'node/pin',\n            };\n            this.pin.originX = 'center';\n            this.pin.originY = 'top';\n            this.pin.centeredRotation = false;\n            this.pin.top = params.y + NodeRadius;\n            this.pin.left = params.x;\n            this.pin.scale(PinSize / 160);\n            // イベントに反応させない\n            this.pin.selectable = false;\n            this.pin.evented = false;\n            if (params.pin === 'pinZ') {\n                this.pin.top = params.y;\n                this.pin.left = params.x + NodeRadius;\n                this.pin.rotate(-90);\n            }\n        }\n    }\n\n    private loadPin(visiblePin = true): void {\n        const pinType = this.data.pin;\n\n        // 表示中の pin をクリア\n        if (this.pin) {\n            this.manager.canvas.remove(this.pin);\n            this.pin = undefined;\n        }\n\n        if (typeof pinType === 'undefined' || pinType === 'free') {\n            // pin を表示しない\n            return;\n        }\n\n        fabric.loadSVGFromURL(`${process.env.PUBLIC_URL}${Pins[pinType]}`, (objects, options) => {\n            this.pin = fabric.util.groupSVGElements(objects, options);\n            // プロパティ設定\n            this.setPinProperties(this.data);\n            // 表示する\n            this.pin.visible = visiblePin;\n            this.manager.canvas.add(this.pin);\n        });\n    }\n\n    // イベントハンドラ\n    private attachEvents() {\n        this.node.on('mousedown', this.onMouseDown.bind(this));\n        this.node.on('mouseup', this.onMouseUp.bind(this));\n        this.node.on('mousedblclick', this.onDblClick.bind(this));\n        this.node.on('moving', this.onMoving.bind(this));\n        this.node.on('moved', this.onMoved.bind(this));\n    }\n\n    private onMouseDown(event: fabric.IEvent<Event>): void {\n        if (this.readonly) {\n            // 読み取り専用時は何もしない\n            return;\n        }\n\n        if (this.manager.tool === 'delete') {\n            this.remove();\n            // 梁要素に紐付かない節点を削除\n            this.manager.removeUnconnectedNodes();\n            // 寸法線を更新\n            this.manager.updateGlobalGuidelines();\n            // 集中荷重の平均値を再計算\n            this.manager.calcForceAverage();\n            // 分布荷重の平均値を再計算\n            this.manager.calcTrapezoidAverage();\n            return;\n        }\n\n        // すでに長押しを実行中ならタイマーキャンセル\n        if (this.longpressTimer) {\n            clearTimeout(this.longpressTimer);\n            this.longpressTimer = undefined;\n        }\n\n        if (this.manager.tool === 'select') {\n            const shape = this.node;\n            // 長押し前の現在位置を保持する\n            const { top: beforeTop, left: beforeLeft } = shape.getBoundingRect(true, true);\n\n            // 長押し判定\n            this.longpressTimer = setTimeout(() => {\n                // 長押し後の現在位置\n                const { top: afterTop, left: afterLeft } = shape.getBoundingRect(true, true);\n                // 位置が変わっていなければ longpress とする\n                if (beforeTop === afterTop && beforeLeft === afterLeft) {\n                    // ダイアログの表示\n                    this.manager.openNodeDialog(event, this);\n                }\n                this.longpressTimer = undefined;\n            }, CanvasManager.LongpressInterval);\n        }\n    }\n\n    private onMouseUp(event: fabric.IEvent<Event>): void {\n        if (this.longpressTimer) {\n            clearTimeout(this.longpressTimer);\n            this.longpressTimer = undefined;\n        }\n    }\n    private onDblClick(event: fabric.IEvent<Event>): void {\n        if (!this.readonly) {\n            // ダイアログの表示\n            this.manager.openNodeDialog(event, this);\n        }\n    }\n\n    /**\n     * ドラッグで節点の移動\n     * 梁要素（とそれに紐づく集中荷重、分布荷重）を追従して更新する\n     * @param event\n     */\n    private onMoving(event: fabric.IEvent<Event>): void {\n        if (!this.readonly && event.pointer) {\n            // ドラッグされた位置\n            const { x, y } = event.pointer;\n\n            const { nodeMap, nodeBeamMap } = this.manager;\n\n            if (!this.dragging) {\n                // ドラッグ開始\n                if (this.pin) {\n                    // pin を非表示\n                    this.pin.visible = false;\n                }\n            }\n\n            // この節点に紐づく梁要素\n            const beams = nodeBeamMap[this.data.id];\n            if (beams) {\n                beams.forEach((beamShape) => {\n                    // 梁要素の再描画\n                    const ni = nodeMap[beamShape.data.nodeI];\n                    const nj = nodeMap[beamShape.data.nodeJ];\n                    let [ix, iy, jx, jy] = [ni.data.x, ni.data.y, nj.data.x, nj.data.y];\n                    if (beamShape.data.nodeI === this.data.id) {\n                        // i端の移動\n                        ix = x;\n                        iy = y;\n                    } else if (beamShape.data.nodeJ === this.data.id) {\n                        jx = x;\n                        jy = y;\n                    }\n\n                    beamShape.update([ix, iy, jx, jy]);\n\n                    if (!this.dragging) {\n                        // 梁要素の集中荷重、分布荷重を非表示とする\n                        beamShape.setVisibleParts(false);\n                    }\n                });\n            }\n\n            this.dragging = true;\n        }\n    } // onMoving\n\n    /**\n     * ドラッグ終了\n     * @param event\n     */\n    private onMoved(event: fabric.IEvent<Event>): void {\n        if (!this.readonly && event.target) {\n            // 現在位置をスナップ\n            const { x, y } = event.target.getCenterPoint();\n            const [sx, sy] = snap([x, y], this.manager.snapSize);\n\n            // 節点の更新\n            this.update(sx, sy);\n\n            const { nodeBeamMap, nodeMap } = this.manager;\n            // この節点に紐づく梁要素\n            const beams = nodeBeamMap[this.data.id];\n            if (beams) {\n                // 削除対象の梁要素\n                const removingBeams: BeamShape[] = [];\n\n                beams.forEach((beamShape) => {\n                    const ni = nodeMap[beamShape.data.nodeI];\n                    const nj = nodeMap[beamShape.data.nodeJ];\n                    const [ix, iy, jx, jy] = [ni.data.x, ni.data.y, nj.data.x, nj.data.y];\n\n                    // 長さが 0 となった梁要素を削除するようマーク\n                    if (ix === jx && iy === jy) {\n                        removingBeams.push(beamShape);\n                        return;\n                    }\n\n                    // 梁要素の再描画\n                    beamShape.update([ix, iy, jx, jy]);\n                    // 集中荷重、分布荷重、寸法線を更新\n                    beamShape.updateParts();\n                });\n\n                if (removingBeams.length > 0) {\n                    // 長さ 0 となった梁要素を削除\n                    removingBeams.forEach((beam) => {\n                        beam.remove();\n                    });\n                    // 梁要素を削除したら集中荷重、分布荷重の平均値を更新\n                    this.manager.calcForceAverage();\n                    this.manager.calcTrapezoidAverage();\n                }\n            }\n\n            // 同一座標の節点が存在する場合にドラッグした節点とマージする\n            if (typeof this.manager.nodeBeamMap[this.data.id] === 'undefined') {\n                // 絶対に大丈夫だけど念の為に空配列を準備しておく\n                this.manager.nodeBeamMap[this.data.id] = [];\n            }\n\n            Object.values(this.manager.nodeMap).forEach((ns) => {\n                // この節点と同一座標の節点について\n                if (ns.data.id !== this.data.id && ns.data.x === sx && ns.data.y === sy) {\n                    // canvas から節点を除去\n                    this.manager.canvas.remove(ns.node);\n                    if (ns.pin) {\n                        this.manager.canvas.remove(ns.pin);\n                    }\n\n                    // 同一座標の節点に紐づく梁要素\n                    const beams = this.manager.nodeBeamMap[ns.data.id];\n                    if (beams) {\n                        beams.forEach((beamShape) => {\n                            // 節点を付け替え\n                            if (beamShape.data.nodeI === ns.data.id) {\n                                beamShape.data.nodeI = this.data.id;\n                            }\n                            if (beamShape.data.nodeJ === ns.data.id) {\n                                beamShape.data.nodeJ = this.data.id;\n                            }\n                            beamShape.beam.data = {\n                                type: 'beam',\n                                ...beamShape.data,\n                            };\n\n                            // マージされた節点に参照を移動する\n                            this.manager.nodeBeamMap[this.data.id].push(beamShape);\n                        });\n                    }\n\n                    // 節点を削除\n                    ns.remove();\n                }\n            });\n\n            // 全体の寸法線を更新する\n            this.manager.updateGlobalGuidelines();\n\n            // ドラッグ終了\n            this.dragging = false;\n        }\n    } // onMoved\n}\n","import { fabric } from 'fabric';\nimport { Trapezoid } from '../../../types/shape';\nimport { ArrowOptions, createArrow, createGuideLine } from '../factory';\nimport CanvasManager from '../manager';\nimport { BeamPoints } from '../types';\nimport {\n    getInsidePoints,\n    intercectPoint,\n    lerp,\n    round,\n    roundDegree,\n    snapAngle,\n    Vector,\n    vX,\n    vY,\n} from '../util';\nimport { BeamShape } from './BeamShape';\n\nconst TrapezoidColor = 'pink';\n/**\n * 分布荷重の矢印の長さ\n */\nconst TrapezoidArrowBaseLength = 25;\n\nconst defaultTrapezoidArrowOptions: ArrowOptions = {\n    stroke: TrapezoidColor,\n    fill: TrapezoidColor,\n    arrowWidth: 2,\n    arrowEdgeSize: 8,\n};\nconst defaultTrapezoidLineOptions: fabric.ILineOptions = {\n    stroke: TrapezoidColor,\n    strokeWidth: 2,\n    hasControls: false,\n    hasBorders: false,\n};\nconst defaultTrapezoidLabelOptions: fabric.ITextboxOptions = {\n    fill: TrapezoidColor,\n    fontSize: 10,\n    fontFamily: 'sans-serif',\n    height: 10,\n    selectable: false,\n    evented: false,\n};\n\nexport class TrapezoidShape {\n    public data: Trapezoid;\n    public forceI: fabric.Group;\n    public forceJ: fabric.Group;\n    public arrows: fabric.Group[];\n    public line: fabric.Line;\n    public labelI: fabric.Textbox;\n    public labelJ: fabric.Textbox;\n    public guide?: fabric.Group; // 寸法線\n\n    private manager: CanvasManager;\n    private longpressTimer: NodeJS.Timer | undefined;\n    private dragging = false;\n    private _readonly = false;\n\n    // 選択中のオブジェクト\n    private selectedShapes = new Set<string>();\n\n    // 分布荷重 i端の位置\n    private pi = new Vector(0, 0);\n    // 分布荷重 j端の位置\n    private pj = new Vector(0, 0);\n    // 分布荷重の方向\n    private direction = new Vector(0, 0);\n    // 分布荷重 上側の線\n    private linePoints: BeamPoints = [0, 0, 0, 0];\n\n    // ドラッグ中のi端/j端の矢印\n    private draggingEdge: 'i' | 'j' | undefined;\n\n    // ドラッグ中に梁要素の Shape を保持する\n    // メモリリークを避けるため、ドラッグ完了後にクリアすること\n    private beam: BeamShape | undefined;\n    // 梁要素のi端\n    private vi = new Vector(0, 0);\n    // 梁要素のj端\n    private vj = new Vector(0, 0);\n\n    // rotate前の global な angle\n    private originalAngle = 0;\n    // ドラッグ中の角度・位置・長さ\n    private draggingDirection = new Vector(0, 0);\n    private draggingPosition = new Vector(0, 0);\n    private draggingLength = 0;\n    // ドラッグ可能な範囲\n    private draggableMin = Number.MIN_SAFE_INTEGER;\n    private draggableMax = Number.MAX_SAFE_INTEGER;\n\n    constructor(manager: CanvasManager, params: Trapezoid) {\n        this.manager = manager;\n        this.data = params;\n        this._readonly = this.manager.readonly;\n\n        // fabricのオブジェクトを作成\n        [this.forceI, this.forceJ, this.arrows, this.line, this.labelI, this.labelJ, this.guide] =\n            this.create();\n\n        // キャンバスに追加\n        this.addToCanvas();\n        // イベント割当\n        this.attachEvents();\n    }\n\n    public get readonly(): boolean {\n        return this._readonly;\n    }\n    public set readonly(value: boolean) {\n        this._readonly = value;\n        // readonly時はイベントに反応しない\n        [this.forceI, this.forceJ, ...this.arrows, this.line].forEach(\n            (shape: fabric.Object | undefined) => {\n                if (shape) {\n                    shape.evented = value;\n                }\n            }\n        );\n    }\n\n    public get visible(): boolean {\n        return this.forceI.visible ?? true;\n    }\n    public set visible(value: boolean) {\n        this.forceI.visible = value;\n        this.forceJ.visible = value;\n        this.arrows.forEach((arrow) => (arrow.visible = value));\n        this.line.visible = value;\n        this.labelI.visible = value;\n        this.labelJ.visible = value;\n        if (this.guide) {\n            this.guide.visible = value;\n        }\n    }\n\n    public get evented(): boolean {\n        return this.forceI.evented ?? true;\n    }\n\n    public set evented(value: boolean) {\n        [this.forceI, this.forceJ, ...this.arrows, this.line].forEach((shape) => {\n            shape.evented = value;\n        });\n    }\n\n    public get selectable(): boolean {\n        return this.forceI.selectable ?? true;\n    }\n\n    public set selectable(value: boolean) {\n        [this.forceI, this.forceJ, ...this.arrows, this.line].forEach((shape) => {\n            shape.selectable = value;\n        });\n    }\n\n    private create(): [\n        fabric.Group,\n        fabric.Group,\n        fabric.Group[],\n        fabric.Line,\n        fabric.Textbox,\n        fabric.Textbox,\n        fabric.Group\n    ] {\n        const {\n            beam,\n            forceI,\n            forceJ,\n            distanceI,\n            distanceJ,\n            angle = 0,\n            isGlobal = false,\n        } = this.data;\n        const average = this.manager.trapezoidAverage;\n        const beamShape = this.manager.beamMap[beam];\n\n        // 梁要素のi端\n        const vI = new Vector(beamShape.points[0], beamShape.points[1]);\n\n        // 分布荷重の方向\n        let dir: Vector;\n        if (isGlobal) {\n            dir = vX\n                .clone()\n                .rotateDeg(angle - 90)\n                .normalize();\n        } else {\n            dir = beamShape.direction\n                .clone()\n                .rotateDeg(angle - 90)\n                .normalize();\n        }\n\n        // 分布荷重の下端の位置\n        const bi = vI\n            .clone()\n            .add(beamShape.direction.clone().multiplyScalar(beamShape.length * distanceI));\n        const bj = vI\n            .clone()\n            .add(beamShape.direction.clone().multiplyScalar(beamShape.length * (1 - distanceJ)));\n        // 分布荷重の上端の位置\n        const pi = bi.clone().add(dir.clone().multiplyScalar(this.calcLength(forceI, average)));\n        const pj = bj.clone().add(dir.clone().multiplyScalar(this.calcLength(forceJ, average)));\n\n        // 下端を等間隔に分割する点を取得\n        const points = getInsidePoints(bi, bj, beamShape.direction);\n        // 上端の傾き\n        const slope = pj.x - pi.x !== 0 ? (pj.y - pi.y) / (pj.x - pi.x) : NaN;\n        // 上端の切片\n        const intercept = isNaN(slope) ? NaN : pi.y - slope * pi.x;\n\n        // 内側の矢印位置\n        const insideArrows: BeamPoints[] = [];\n        points.forEach((point) => {\n            // 下端の点から上端に線を伸ばして交差する点\n            const pu = intercectPoint([pi, pj, slope, intercept], point, dir);\n            if (pu) {\n                const arrow: BeamPoints = [point.x, point.y, pu[0], pu[1]];\n                insideArrows.push(arrow);\n            }\n        });\n\n        // 矢印\n        const arrows = insideArrows.map((arrow) => {\n            const shape = createArrow(arrow, {\n                ...defaultTrapezoidArrowOptions,\n                hasControls: false,\n                hasBorders: false,\n                selectable: !this.readonly,\n                evented: !this.readonly,\n            });\n            return shape;\n        });\n        // i端\n        const arrowI = createArrow([bi.x, bi.y, pi.x, pi.y], {\n            ...defaultTrapezoidArrowOptions,\n            name: `${this.data.id}/i`,\n            data: {\n                type: 'trapezoid/i',\n                ...this.data,\n            },\n            selectable: !this.readonly,\n            evented: !this.readonly,\n        });\n        // j端\n        const arrowJ = createArrow([bj.x, bj.y, pj.x, pj.y], {\n            ...defaultTrapezoidArrowOptions,\n            name: `${this.data.id}/j`,\n            data: {\n                type: 'trapezoid/j',\n                ...this.data,\n            },\n            selectable: !this.readonly,\n            evented: !this.readonly,\n        });\n\n        // 上端\n        const line = this.createLine([pi.x, pi.y, pj.x, pj.y]);\n\n        // 寸法線\n        const guide = createGuideLine([bi.x, bi.y, bj.x, bj.y], 50);\n        guide.visible = false;\n\n        // i端側ラベル\n        const li = bi.clone().add(beamShape.direction.clone().multiplyScalar(5));\n        // j端側ラベル\n        const lj = bj.clone().add(beamShape.direction.clone().multiplyScalar(5));\n        // ラベルの角度\n        const labelAngle = dir.angleDeg();\n\n        const labelI = this.createTrapezoidLabel(`  ${forceI} kN/m`, li, labelAngle);\n        labelI.visible = false;\n        const labelJ = this.createTrapezoidLabel(`  ${forceJ} kN/m`, lj, labelAngle);\n        labelJ.visible = false;\n\n        // ドラッグ時に使用するデータを保持する\n        this.pi.copy(bi);\n        this.pj.copy(bj);\n        this.direction.copy(dir);\n\n        return [arrowI, arrowJ, arrows, line, labelI, labelJ, guide];\n    }\n\n    public update(params?: Trapezoid): void {\n        if (params) {\n            this.data = params;\n        }\n\n        // キャンバスから削除\n        this.removeFromCanvas();\n\n        // fabricのオブジェクトを作成\n        [this.forceI, this.forceJ, this.arrows, this.line, this.labelI, this.labelJ, this.guide] =\n            this.create();\n\n        // キャンバスに追加\n        this.addToCanvas();\n        // イベント割当\n        this.attachEvents();\n    }\n\n    private createLine(points: BeamPoints): fabric.Line {\n        // ドラッグ時に使用するので保持しておく\n        this.linePoints = points;\n\n        return new fabric.Line(points, {\n            ...defaultTrapezoidLineOptions,\n            selectable: !this.readonly,\n            evented: !this.readonly,\n            name: this.data.id,\n            data: {\n                type: 'trapezoid',\n                ...this.data,\n            },\n        });\n    }\n\n    private updateLine(): void;\n    private updateLine(points: BeamPoints): void;\n    /**\n     * 上端の線を更新する\n     */\n    private updateLine(points?: BeamPoints): void {\n        const average = this.manager.trapezoidAverage;\n        let li: Vector;\n        let lj: Vector;\n\n        if (points) {\n            li = new Vector(points[0], points[1]);\n            lj = new Vector(points[2], points[3]);\n        } else {\n            if (this.draggingEdge === 'i') {\n                li = this.draggingPosition\n                    .clone()\n                    .add(\n                        this.direction\n                            .clone()\n                            .multiplyScalar(this.calcLength(this.data.forceI, average))\n                    );\n                lj = this.pj\n                    .clone()\n                    .add(\n                        this.direction\n                            .clone()\n                            .multiplyScalar(this.calcLength(this.data.forceJ, average))\n                    );\n            } else if (this.draggingEdge === 'j') {\n                li = this.pi\n                    .clone()\n                    .add(\n                        this.direction\n                            .clone()\n                            .multiplyScalar(this.calcLength(this.data.forceI, average))\n                    );\n                lj = this.draggingPosition\n                    .clone()\n                    .add(\n                        this.direction\n                            .clone()\n                            .multiplyScalar(this.calcLength(this.data.forceJ, average))\n                    );\n            } else {\n                li = this.pi\n                    .clone()\n                    .add(\n                        this.direction\n                            .clone()\n                            .multiplyScalar(this.calcLength(this.data.forceI, average))\n                    );\n                lj = this.pj\n                    .clone()\n                    .add(\n                        this.direction\n                            .clone()\n                            .multiplyScalar(this.calcLength(this.data.forceJ, average))\n                    );\n            }\n\n            this.linePoints = [li.x, li.y, lj.x, lj.y];\n        }\n\n        this.manager.canvas.remove(this.line);\n        this.line = this.createLine([li.x, li.y, lj.x, lj.y]);\n        // ドラッグ中のみの描画、ドラッグ完了後に再作成されるので\n        // イベント割当は割愛\n        this.manager.canvas.add(this.line);\n    }\n\n    public remove(): void {\n        // キャンバスから削除\n        this.removeFromCanvas();\n\n        const trapezoids = this.manager.trapezoidMap[this.data.beam];\n        if (trapezoids) {\n            const list = trapezoids.filter((shape) => shape.data.id !== this.data.id);\n            this.manager.trapezoidMap[this.data.beam] = list;\n        }\n    }\n\n    private addToCanvas(): void {\n        this.manager.canvas.add(\n            this.forceI,\n            this.forceJ,\n            ...this.arrows,\n            this.line,\n            this.labelI,\n            this.labelJ\n        );\n        if (this.guide) {\n            this.manager.canvas.add(this.guide);\n        }\n        // 選択しやすいように i端、j端の矢印を最前面に持ってくる\n        this.forceI.bringToFront();\n        this.forceJ.bringToFront();\n    }\n\n    /**\n     * キャンバスから分布荷重を削除する\n     */\n    private removeFromCanvas(): void {\n        this.manager.canvas.remove(\n            this.forceI,\n            this.forceJ,\n            ...this.arrows,\n            this.line,\n            this.labelI,\n            this.labelJ\n        );\n        if (this.guide) {\n            this.manager.canvas.remove(this.guide);\n        }\n    }\n\n    /**\n     * 矢印の長さから分布荷重の大きさを計算\n     * @param length 矢印の長さ\n     * @returns\n     */\n    private calcForce(length: number): number {\n        if (this.manager.trapezoidAverage === 0) {\n            return 10;\n        }\n\n        return Math.round((length / TrapezoidArrowBaseLength) * this.manager.trapezoidAverage);\n    }\n\n    private calcLength(force: number, average: number): number {\n        if (isNaN(average) || average === 0) {\n            return TrapezoidArrowBaseLength;\n        }\n        return (force / average) * TrapezoidArrowBaseLength;\n    }\n\n    private createTrapezoidLabel(label: string, position: Vector, angle: number): fabric.Textbox {\n        return new fabric.Textbox(label, {\n            ...defaultTrapezoidLabelOptions,\n            top: position.y,\n            left: position.x,\n            angle,\n            width: 140,\n        });\n    }\n\n    /**\n     * ラベル、寸法線、中央の矢印の表示・非表示を切り替える\n     */\n    private setVisibleParts(visible = true) {\n        const shapes = [this.labelI, this.labelJ, ...this.arrows];\n        shapes.forEach((shape) => (shape.visible = visible));\n\n        if (this.guide) {\n            this.guide.visible = visible;\n        }\n    }\n\n    /**\n     * 選択\n     */\n    public select(): void {\n        let shape: fabric.Object = this.line;\n        if (this.draggingEdge) {\n            shape = this.draggingEdge === 'i' ? this.forceI : this.forceJ;\n        }\n\n        this.manager.canvas.setActiveObject(shape);\n    }\n\n    // イベントハンドラ\n\n    private attachEvents() {\n        const edges = [this.forceI, this.forceJ];\n        const shapes = [this.forceI, this.forceJ, ...this.arrows, this.line];\n\n        shapes.forEach((shape) => {\n            // 選択・選択解除\n            shape.on('selected', this.onSelected.bind(this));\n            shape.on('deselected', this.onDeselected.bind(this));\n            // クリック・長押し\n            shape.on('mousedown', this.onMouseDown.bind(this));\n            shape.on('mouseup', this.onMouseUp.bind(this));\n            shape.on('mousedblclick', this.onDblClick.bind(this));\n        });\n\n        edges.forEach((edge) => {\n            // ドラッグ\n            edge.on('moving', this.onMoving.bind(this));\n            edge.on('moved', this.onMoved.bind(this));\n            // 回転\n            edge.on('rotating', this.onRotating.bind(this));\n            edge.on('rotated', this.onRotated.bind(this));\n            // 伸縮\n            edge.on('scaling', this.onScaling.bind(this));\n            edge.on('scaled', this.onScaled.bind(this));\n        });\n    }\n\n    private onSelected(event: fabric.IEvent<Event>): void {\n        // 選択された項目を保持する\n        const name = event.target?.name;\n        if (name) {\n            this.selectedShapes.add(name);\n        }\n\n        this.labelI.visible = true;\n        this.labelJ.visible = true;\n        if (this.guide) {\n            this.guide.visible = true;\n        }\n    }\n\n    private onDeselected(event: fabric.IEvent<Event>): void {\n        // 選択解除\n        const name = event.target?.name;\n        if (name) {\n            this.selectedShapes.delete(name);\n        }\n        // すべての選択が解除されたら寸法線を隠す\n        if (this.selectedShapes.size === 0) {\n            this.labelI.visible = false;\n            this.labelJ.visible = false;\n            if (this.guide) {\n                this.guide.visible = false;\n            }\n        }\n    }\n\n    private onMouseDown(event: fabric.IEvent<Event>): void {\n        if (this.readonly) {\n            // 読み取り専用時は何もしない\n            return;\n        }\n\n        if (this.manager.tool === 'delete') {\n            this.remove();\n            this.manager.calcTrapezoidAverage();\n            return;\n        }\n\n        if (['select', 'trapezoid'].includes(this.manager.tool) && event.target) {\n            // すでに長押しを実行中ならタイマーキャンセル\n            if (this.longpressTimer) {\n                clearTimeout(this.longpressTimer);\n                this.longpressTimer = undefined;\n            }\n\n            const shape = event.target;\n            // 長押し前の現在位置を保持する\n            const { top: beforeTop, left: beforeLeft } = shape.getBoundingRect(true, true);\n\n            // 長押し判定\n            this.longpressTimer = setTimeout(() => {\n                // 長押し後の現在位置\n                const { top: afterTop, left: afterLeft } = shape.getBoundingRect(true, true);\n                // 位置が変わっていなければ longpress とする\n                if (beforeTop === afterTop && beforeLeft === afterLeft && !this.dragging) {\n                    // ダイアログの表示\n                    this.manager.openTrapezoidDialog(event, this);\n                }\n                this.longpressTimer = undefined;\n            }, CanvasManager.LongpressInterval);\n        }\n    } // end onMouseDown\n\n    private onMouseUp(event: fabric.IEvent<Event>): void {\n        if (this.longpressTimer) {\n            clearTimeout(this.longpressTimer);\n            this.longpressTimer = undefined;\n        }\n    }\n\n    private onDblClick(event: fabric.IEvent<Event>): void {\n        if (!this.readonly) {\n            // ダイアログの表示\n            this.manager.openTrapezoidDialog(event, this);\n        }\n    }\n\n    /**\n     * ドラッグ可能範囲を計算\n     */\n    private calcDraggableRange() {\n        if (this.beam && this.draggingEdge) {\n            // 梁要素のi端、j端\n            [this.vi.x, this.vi.y] = [this.beam.points[0], this.beam.points[1]];\n            [this.vj.x, this.vj.y] = [this.beam.points[2], this.beam.points[3]];\n\n            if (this.draggingEdge === 'i') {\n                // i端の移動可能範囲\n                // 最小値: 現在位置から i端側\n                this.draggableMin = this.vi.distance(this.pi) * -1;\n\n                // 最大値: 現在位置から j方向、distanceJ + 5% の地点まで\n                // (梁要素の長さに対して 5% を分布荷重の最小幅とする)\n                if (1 - (this.data.distanceJ + 0.05) < this.data.distanceI) {\n                    // j端側へは移動不可\n                    this.draggableMax = 0;\n                } else {\n                    const ratio = 1 - (this.data.distanceJ + 0.05);\n                    const dj = lerp(this.vi, this.vj, ratio);\n                    this.draggableMax = this.pi.distance(dj);\n                }\n            } else if (this.draggingEdge === 'j') {\n                // j端の移動可能範囲\n                // 最大値: 現在位置から j端側\n                this.draggableMax = this.vj.distance(this.pj);\n\n                // 最小値: 現在位置から i方向、distanceI + 5% の地点まで\n                if (1 - this.data.distanceJ < this.data.distanceI + 0.05) {\n                    // i端側へは移動不可\n                    this.draggableMin = 0;\n                } else {\n                    const di = lerp(this.vi, this.vj, this.data.distanceI + 0.05);\n                    this.draggableMin = this.pj.distance(di) * -1;\n                }\n            }\n        }\n    }\n\n    /**\n     * 梁要素に沿って移動する\n     * @param shape\n     */\n    private moveArrow(shape: fabric.Object, position: Vector) {\n        if (this.beam) {\n            // ドラッグ位置\n            this.draggingPosition.x = shape.left ?? 0;\n            this.draggingPosition.y = shape.top ?? 0;\n\n            // 元の位置から現在位置までの距離\n            const dragLength = position.distance(this.draggingPosition);\n            // ドラッグの方向\n            this.draggingDirection.copy(\n                this.draggingPosition.clone().subtract(position).normalize()\n            );\n            // ドラッグの角度\n            const angle = 180 - this.draggingDirection.verticalAngleDeg();\n            // ドラッグ方向と梁要素のなす角度\n            const deg = this.beam.angle - angle;\n            const rad = (deg * Math.PI) / 180;\n            // ドラッグされた長さを梁要素上の長さに変換\n            let dist = dragLength * Math.cos(rad);\n            // ドラッグ可能な範囲に修正\n            if (this.draggableMin > dist) {\n                dist = this.draggableMin;\n            } else if (this.draggableMax < dist) {\n                dist = this.draggableMax;\n            }\n\n            // 矢印の位置を更新\n            this.draggingPosition\n                .copy(position)\n                .add(this.beam.direction.clone().multiplyScalar(dist));\n            shape.left = this.draggingPosition.x;\n            shape.top = this.draggingPosition.y;\n\n            // 上端の線を更新\n            this.updateLine();\n        }\n    }\n\n    /**\n     * ドラッグしている要素が i端かj端かを判定する\n     * @param event\n     * @returns\n     */\n    private checkDraggingEdge(event: fabric.IEvent<Event>): 'i' | 'j' | undefined {\n        if (event.transform) {\n            // NOTE: 型定義に transform.target が存在しないので\n            // 強制的に変換する\n            const eventTransform = event.transform as unknown as Record<string, unknown>;\n            const eventTarget = eventTransform.target as fabric.Object;\n            // 移動中の矢印が i端/j端のどちらか？\n            switch (eventTarget.data?.type) {\n                case 'trapezoid/i':\n                    return 'i';\n                case 'trapezoid/j':\n                    return 'j';\n            }\n        }\n    }\n\n    private onMoving(event: fabric.IEvent<Event>): void {\n        if (this.manager.tool === 'select' && event.transform) {\n            if (!this.dragging) {\n                // ラベル、寸法線、中央の矢印を非表示にする\n                this.setVisibleParts(false);\n                // 対象の梁要素を取得\n                this.beam = this.manager.beamMap[this.data.beam];\n\n                // ドラッグしているのが i端かj端か？\n                this.draggingEdge = this.checkDraggingEdge(event);\n\n                if (this.draggingEdge) {\n                    // ドラッグ可能範囲を計算\n                    this.calcDraggableRange();\n\n                    this.dragging = true;\n                }\n            }\n\n            // 矢印の移動\n            if (this.draggingEdge === 'i') {\n                this.moveArrow(this.forceI, this.pi);\n            } else if (this.draggingEdge === 'j') {\n                this.moveArrow(this.forceJ, this.pj);\n            }\n        }\n    }\n\n    private onMoved(event: fabric.IEvent<Event>): void {\n        if (this.beam && this.dragging) {\n            // 最終的なドラッグ位置を計算\n            if (this.draggingEdge === 'i') {\n                this.moveArrow(this.forceI, this.pi);\n\n                // distanceI を更新\n                const distance = this.vi.distance(this.draggingPosition);\n                this.data.distanceI = round(distance / this.beam.length, 2);\n            } else if (this.draggingEdge === 'j') {\n                this.moveArrow(this.forceJ, this.pj);\n\n                // distanceJ を更新\n                const distance = this.vj.distance(this.draggingPosition);\n                this.data.distanceJ = round(distance / this.beam.length, 2);\n            }\n\n            // 再描画\n            this.update();\n            // 移動した矢印を再選択する\n            this.select();\n        }\n        // ドラッグ終了\n        this.dragging = false;\n        this.beam = undefined;\n        this.draggableMin = Number.MIN_SAFE_INTEGER;\n        this.draggableMax = Number.MAX_SAFE_INTEGER;\n        this.draggingEdge = undefined;\n    }\n\n    private onScaling(event: fabric.IEvent<Event>): void {\n        if (this.manager.tool === 'select' && event.transform) {\n            if (!this.dragging) {\n                // ラベル、寸法線、中央の矢印を非表示にする\n                this.setVisibleParts(false);\n                // ドラッグしているのが i端かj端か？\n                this.draggingEdge = this.checkDraggingEdge(event);\n\n                // 長さを保持する\n                if (this.draggingEdge === 'i') {\n                    this.draggingLength = this.forceI.height ?? 0;\n                } else if (this.draggingEdge === 'j') {\n                    this.draggingLength = this.forceJ.height ?? 0;\n                }\n\n                this.dragging = true;\n            }\n\n            let force: fabric.Object | undefined;\n            // 矢印とその位置を取得\n            if (this.draggingEdge === 'i') {\n                force = this.forceI;\n                this.draggingPosition.copy(this.pi);\n            } else if (this.draggingEdge === 'j') {\n                force = this.forceJ;\n                this.draggingPosition.copy(this.pj);\n            }\n\n            if (force) {\n                // 矢印のお尻の位置\n                const scale = force.scaleY ?? 1;\n                const length = this.draggingLength * scale;\n                this.draggingPosition.add(this.direction.clone().multiplyScalar(length));\n\n                // 上側の線を更新\n                if (this.draggingEdge === 'i') {\n                    this.linePoints[0] = this.draggingPosition.x;\n                    this.linePoints[1] = this.draggingPosition.y;\n                } else if (this.draggingEdge === 'j') {\n                    this.linePoints[2] = this.draggingPosition.x;\n                    this.linePoints[3] = this.draggingPosition.y;\n                }\n                this.updateLine(this.linePoints);\n            }\n        }\n    }\n    private onScaled(event: fabric.IEvent<Event>): void {\n        if (this.dragging) {\n            let force: fabric.Object | undefined;\n            // 矢印を取得\n            if (this.draggingEdge === 'i') {\n                force = this.forceI;\n            } else if (this.draggingEdge === 'j') {\n                force = this.forceJ;\n            }\n\n            if (force) {\n                const scale = force.scaleY ?? 1;\n                const length = this.draggingLength * scale;\n                // 長さから荷重の大きさを計算\n                const value = this.calcForce(length);\n                if (this.draggingEdge === 'i') {\n                    this.data.forceI = value;\n                } else if (this.draggingEdge === 'j') {\n                    this.data.forceJ = value;\n                }\n\n                // 分布荷重を再生成\n                this.update();\n                // ドラッグした要素を再選択\n                this.select();\n            }\n        }\n        // ドラッグ終了\n        this.dragging = false;\n        this.draggingEdge = undefined;\n    }\n\n    private onRotating(event: fabric.IEvent<Event>): void {\n        if (this.manager.tool === 'select' && event.transform) {\n            if (!this.dragging) {\n                // ラベル、寸法線、中央の矢印を非表示にする\n                this.setVisibleParts(false);\n                // ドラッグしているのが i端かj端か？\n                this.draggingEdge = this.checkDraggingEdge(event);\n\n                // 現在の角度を保持する\n                // (同じ角度のはずだが、念の為にドラッグされている要素の角度を取得)\n                if (this.draggingEdge === 'i') {\n                    this.originalAngle = this.forceI.angle ?? 0;\n                } else if (this.draggingEdge === 'j') {\n                    this.originalAngle = this.forceJ.angle ?? 0;\n                }\n\n                this.dragging = true;\n            }\n\n            if (this.draggingEdge) {\n                // i端とj端の矢印の angle を一致させる\n                let angle = 0;\n                if (this.draggingEdge === 'i') {\n                    angle = this.forceI.angle ?? 0;\n                    this.forceJ.angle = angle;\n                } else if (this.draggingEdge === 'j') {\n                    angle = this.forceJ.angle ?? 0;\n                    this.forceI.angle = angle;\n                }\n                // i端の矢印のお尻の位置\n                const y = vY.clone().invert();\n                const li = this.pi.clone().add(\n                    y\n                        .clone()\n                        .multiplyScalar(this.forceI.height ?? 0)\n                        .rotateDeg(angle)\n                );\n                // j端の矢印のお尻の位置\n                const lj = this.pj.clone().add(\n                    y\n                        .clone()\n                        .multiplyScalar(this.forceJ.height ?? 0)\n                        .rotateDeg(angle)\n                );\n                // 上側の線を更新\n                this.linePoints = [li.x, li.y, lj.x, lj.y];\n                this.updateLine(this.linePoints);\n            }\n        }\n    }\n\n    private onRotated(event: fabric.IEvent<Event>): void {\n        if (this.dragging) {\n            // 角度を取得\n            let angle = 0;\n            if (this.draggingEdge === 'i') {\n                angle = this.forceI.angle ?? 0;\n            } else if (this.draggingEdge === 'j') {\n                angle = this.forceJ.angle ?? 0;\n            }\n\n            // 角度が変わっていなければ終了\n            if (this.originalAngle === angle) {\n                return;\n            }\n\n            // 元の位置から回転させた角度\n            let deg = 0;\n            if (angle - this.originalAngle > 0) {\n                deg = angle - this.originalAngle;\n            } else {\n                deg = 360 - this.originalAngle + angle;\n            }\n            // 5°にスナップ\n            deg = snapAngle(deg, 5);\n\n            // 角度を保持\n            let degree = (this.data.angle ?? 0) + deg;\n            degree = roundDegree(degree);\n            this.data.angle = degree;\n\n            // 再描画\n            this.update();\n            // 選択\n            this.select();\n        }\n        // ドラッグ終了\n        this.dragging = false;\n        this.draggingEdge = undefined;\n    }\n}\n","import { StructureCanvasProps } from '../../types/note';\n\nexport type BeamPoints = [number, number, number, number];\n\nexport interface Shape {\n    type: 'beams' | 'forces' | 'trapezoids';\n    id: string;\n}\n\nexport type Point = [number, number];\n\nexport interface CanvasCoreHandler {\n    getStructure: () => StructureCanvasProps;\n}\n\n/**\n * path:created イベント\n */\nexport interface PathEvent {\n    path: fabric.Path;\n}\n\nexport const isPathEvent = (item: unknown): item is PathEvent => {\n    if (item && typeof item === 'object') {\n        const temp = item as Record<string, unknown>;\n        return typeof temp.path === 'object';\n    }\n    return false;\n};\n\ntype PathStart = ['M' | 'm', number, number];\ntype PathMid = ['Q' | 'q', number, number, number, number];\ntype PathEnd = ['L' | 'l', number, number];\n\nexport type SVGPath = [PathStart, ...PathMid[], PathEnd];\nexport const isPathStart = (item: unknown): item is PathStart => {\n    if (Array.isArray(item) && item.length === 3) {\n        return (\n            (item[0] === 'M' || item[0] === 'm') &&\n            typeof item[1] === 'number' &&\n            typeof item[2] === 'number'\n        );\n    }\n    return false;\n};\nexport const isPathEnd = (item: unknown): item is PathEnd => {\n    if (Array.isArray(item) && item.length === 3) {\n        return (\n            (item[0] === 'L' || item[0] === 'l') &&\n            typeof item[1] === 'number' &&\n            typeof item[2] === 'number'\n        );\n    }\n    return false;\n};\nexport const isSVGPath = (item: unknown): item is SVGPath => {\n    if (Array.isArray(item)) {\n        if (item.length > 0) {\n            const s = item[0];\n            const e = item[item.length - 1];\n            return isPathStart(s) && isPathEnd(e);\n        }\n        return true;\n    }\n    return false;\n};\n","import { fabric } from 'fabric';\nimport { v4 as uuid } from 'uuid';\nimport { CanvasTool, ShapePosition } from '../../types/common';\nimport { StructureCanvasProps } from '../../types/note';\nimport {\n    Beam,\n    Force,\n    isForce,\n    isNode,\n    isTrapezoid,\n    Node,\n    Structure,\n    Trapezoid,\n} from '../../types/shape';\nimport { createGlobalGuideLine } from './factory';\nimport { OpenPopupFunction } from './popup/types';\nimport { BeamShape, ForceShape, NodeShape, TrapezoidShape } from './shape';\nimport { isPathEnd, isPathEvent, isPathStart, isSVGPath } from './types';\nimport { getPointerPosition, snap, Vector } from './util';\n\nexport interface CanvasManagerParameters extends StructureCanvasProps {\n    readonly?: boolean;\n    snapSize?: number;\n    gridSize?: number;\n}\n\n/**\n * 背景のグリッド線の設定\n */\nconst defaultGridLineProps: fabric.ILineOptions = {\n    stroke: '#eee',\n    strokeWidth: 1,\n    // イベントに反応させない\n    evented: false,\n    hasControls: false,\n    selectable: false,\n    // 出力対象外\n    excludeFromExport: true,\n    data: {\n        type: 'background',\n        excludeExport: true,\n    },\n};\n\nclass CanvasManager {\n    public canvas: fabric.Canvas;\n    private _tool: CanvasTool = 'select';\n    private _readonly = false;\n    private pageWidth = 0;\n    private pageHeight = 0;\n    public snapSize = 25;\n    public gridSize = 25;\n\n    private _props: StructureCanvasProps;\n    private _data: Structure;\n\n    /**\n     * ポップアップの表示\n     */\n    private openPopup: OpenPopupFunction;\n\n    /**\n     * キャンバスのパンの可否\n     */\n    private enablePan = false;\n    /**\n     * キャンバスのドラッグ中フラグ\n     */\n    private isCanvasDragging = false;\n    /**\n     * ドラッグ時のポインタ位置\n     */\n    private lastPos: ShapePosition = { x: 0, y: 0 };\n\n    /**\n     * 集中荷重の平均値\n     */\n    public forceAverage = 0;\n    /**\n     * 分布荷重の平均値\n     */\n    public trapezoidAverage = 0;\n    /**\n     * 節点\n     */\n    public nodeMap: Record<string, NodeShape> = {};\n    /**\n     * 梁要素\n     */\n    public beamMap: Record<string, BeamShape> = {};\n    /**\n     * 節点に紐づく梁要素\n     * key: 節点ID, value: 梁要素の配列\n     */\n    public nodeBeamMap: Record<string, BeamShape[]> = {};\n    /**\n     * beamId と force の矢印・ラベルの組み合わせ\n     */\n    public forceMap: Record<string, ForceShape[]> = {};\n    /**\n     * beamId と trapezoid の矢印・ラベルの組み合わせ\n     */\n    public trapezoidMap: Record<string, TrapezoidShape[]> = {};\n    /**\n     * 全体の寸法線\n     */\n    public globalGuideLines: fabric.Group[] = [];\n\n    /**\n     * 長押しと判定する時間 (ms)\n     */\n    public static LongpressInterval: Readonly<number> = 1000;\n\n    private _initialized = false;\n\n    /**\n     * 分布荷重を追加する梁要素ID\n     * (追加後にクリアすること)\n     */\n    public currentBeam: string | undefined;\n\n    constructor(\n        canvasDom: HTMLCanvasElement,\n        params: CanvasManagerParameters,\n        open: OpenPopupFunction\n    ) {\n        const {\n            data,\n            zoom,\n            viewport,\n            width,\n            height,\n            readonly = false,\n            snapSize = 25,\n            gridSize = 25,\n        } = params;\n\n        // IDなどを確保\n        this._props = params;\n        this._data = data;\n\n        this.canvas = new fabric.Canvas(canvasDom, {\n            selection: true,\n            isDrawingMode: false,\n            stopContextMenu: true,\n        });\n\n        this.canvas.setZoom(zoom);\n        this.canvas.setViewportTransform(viewport);\n\n        this.setTool('select');\n        this.pageHeight = height;\n        this.pageWidth = width;\n        this._readonly = readonly;\n        this.snapSize = snapSize;\n        this.gridSize = gridSize;\n\n        this.openPopup = open;\n\n        // 背景の描画\n        this.drawBackgroundGrid();\n        // 初期化処理\n        const { nodes, beams, forces, trapezoids } = data;\n\n        // 平均値\n        this.calcForceAverage(forces);\n        this.calcTrapezoidAverage(trapezoids);\n\n        // 節点の作成\n        nodes.forEach((node) => {\n            const shape = new NodeShape(this, node);\n            this.nodeMap[node.id] = shape;\n        });\n\n        // 梁要素の作成\n        beams.forEach((beam) => {\n            const shape = new BeamShape(this, beam);\n            // 参照を保持する\n            this.beamMap[beam.id] = shape;\n            if (typeof this.nodeBeamMap[beam.nodeI] === 'undefined') {\n                this.nodeBeamMap[beam.nodeI] = [shape];\n            } else {\n                this.nodeBeamMap[beam.nodeI].push(shape);\n            }\n            if (typeof this.nodeBeamMap[beam.nodeJ] === 'undefined') {\n                this.nodeBeamMap[beam.nodeJ] = [shape];\n            } else {\n                this.nodeBeamMap[beam.nodeJ].push(shape);\n            }\n        });\n\n        // 集中荷重の作成\n        forces.forEach((force) => {\n            const shape = new ForceShape(this, force);\n            // 参照を保持する\n            if (typeof this.forceMap[force.beam] === 'undefined') {\n                this.forceMap[force.beam] = [shape];\n            } else {\n                this.forceMap[force.beam].push(shape);\n            }\n        });\n\n        // 分布荷重の作成\n        trapezoids.forEach((trapezoid) => {\n            const shape = new TrapezoidShape(this, trapezoid);\n            // 参照を保持する\n            if (typeof this.trapezoidMap[trapezoid.beam] === 'undefined') {\n                this.trapezoidMap[trapezoid.beam] = [shape];\n            } else {\n                this.trapezoidMap[trapezoid.beam].push(shape);\n            }\n        });\n\n        // 寸法線の作成\n        this.updateGlobalGuidelines();\n\n        // キャンバスイベント設定\n        this.attachEvent();\n\n        // 初期化完了\n        this._initialized = true;\n    } // end constructor\n\n    // --- properties ---\n\n    get tool(): CanvasTool {\n        return this._tool;\n    }\n\n    get readonly(): boolean {\n        return this._readonly;\n    }\n\n    get initialized(): boolean {\n        return this._initialized;\n    }\n\n    /**\n     * ツール選択に応じたモードの変更\n     * @param tool\n     */\n    public setTool(tool: CanvasTool): void {\n        this._tool = tool;\n\n        // 選択を解除する\n        this.canvas.discardActiveObject();\n\n        // キャンバスの設定\n        if (tool === 'select' || tool === 'force' || tool === 'delete') {\n            this.canvas.isDrawingMode = false;\n            this.canvas.selection = tool === 'select';\n            this.enablePan = true;\n        } else {\n            // pen, trapezoid\n            this.canvas.isDrawingMode = tool === 'pen';\n            this.canvas.selection = false;\n            this.enablePan = false;\n        }\n\n        // オブジェクトの設定\n        this.setSelectableShapes();\n    }\n\n    /**\n     * ツール選択に応じたオブジェクトの設定\n     */\n    private setSelectableShapes(): void {\n        // 節点\n        const selectableNode = this.tool === 'select';\n        const eventedNode = ['select', 'delete'].includes(this.tool);\n        // 梁要素\n        const selectableBeam = this.tool === 'select';\n        const eventedBeam = true; // 梁要素は常にイベントに反応する\n        // 集中荷重\n        const selectableForce = ['select', 'force'].includes(this.tool);\n        const eventedForce = ['select', 'force', 'delete'].includes(this.tool);\n        // 分布荷重\n        const selectableTrapezoid = ['select', 'trapezoid'].includes(this.tool);\n        const eventedTrapezoid = ['select', 'trapezoid', 'delete'].includes(this.tool);\n\n        // 節点\n        Object.values(this.nodeMap).forEach((shape) => {\n            shape.node.selectable = selectableNode;\n            shape.node.evented = eventedNode;\n        });\n        Object.entries(this.beamMap).forEach(([beamId, shape]) => {\n            // 梁要素\n            shape.beam.selectable = selectableBeam;\n            shape.beam.evented = eventedBeam;\n            // 集中荷重\n            const forces = this.forceMap[beamId];\n            if (forces) {\n                forces.forEach((shape) => {\n                    shape.force.selectable = selectableForce;\n                    shape.force.evented = eventedForce;\n                });\n            }\n            // 分布荷重\n            const trapezoids = this.trapezoidMap[beamId];\n            if (trapezoids) {\n                trapezoids.forEach((shape) => {\n                    shape.evented = eventedTrapezoid;\n                    shape.selectable = selectableTrapezoid;\n                });\n            }\n        });\n    }\n\n    // --- public methods ---\n\n    /**\n     * 保持しているデータを整形して返す\n     * @returns\n     */\n    public toCanvasProps(): StructureCanvasProps {\n        const nodes = Object.values(this.nodeMap).map(({ data }) => data);\n        const beams = Object.values(this.beamMap).map(({ data }) => data);\n        const forces = Object.values(this.forceMap).flatMap((shapes) =>\n            shapes.map(({ data }) => data)\n        );\n        const trapezoids = Object.values(this.trapezoidMap).flatMap((shapes) =>\n            shapes.map(({ data }) => data)\n        );\n\n        // 現在表示されている内容を SVG にする\n        const image = this.canvas.toSVG({ suppressPreamble: true });\n\n        // viewport, zoom\n        const viewport = this.canvas.viewportTransform ?? this._props.viewport;\n        const zoom = this.canvas.getZoom();\n\n        const data: StructureCanvasProps = {\n            ...this._props,\n            data: {\n                ...this._data,\n                nodes,\n                beams,\n                forces,\n                trapezoids,\n            },\n            image,\n            zoom,\n            viewport,\n        };\n\n        return data;\n    }\n\n    /**\n     * ポップアップの表示\n     * @param event\n     * @param shape\n     */\n    public openNodeDialog(event: fabric.IEvent<Event>, shape: NodeShape): void {\n        // ポインタの位置を取得する\n        const { clientX: left, clientY: top } = getPointerPosition(event);\n        // ダイアログを表示\n        this.openPopup(\n            'nodes',\n            { top, left },\n            shape.data as unknown as Record<string, unknown>,\n            (values: Record<string, unknown>) => {\n                if (isNode(values)) {\n                    // 節点を更新\n                    shape.update(values);\n                }\n            }\n        );\n    }\n\n    /**\n     * ポップアップの表示\n     * @param event\n     * @param shape\n     */\n    public openForceDialog(event: fabric.IEvent<Event>, shape: ForceShape): void {\n        // ポインタの位置を取得する\n        const { clientX: left, clientY: top } = getPointerPosition(event);\n        // ダイアログを表示\n        this.openPopup(\n            'forces',\n            { top, left },\n            shape.data as unknown as Record<string, unknown>,\n            (values: Record<string, unknown>) => {\n                if (isForce(values)) {\n                    // 集中荷重を更新\n                    shape.update(values);\n                }\n            }\n        );\n    }\n\n    /**\n     * ポップアップの表示\n     * @param event\n     * @param shape\n     */\n    public openTrapezoidDialog(event: fabric.IEvent<Event>, shape: TrapezoidShape): void {\n        // ポインタの位置を取得する\n        const { clientX: left, clientY: top } = getPointerPosition(event);\n        // ダイアログを表示\n        this.openPopup(\n            'trapezoids',\n            { top, left },\n            shape.data as unknown as Record<string, unknown>,\n            (values: Record<string, unknown>) => {\n                if (isTrapezoid(values)) {\n                    // 分布荷重を更新\n                    shape.update(values);\n                }\n            }\n        );\n    }\n\n    /**\n     * 集中荷重の平均値\n     * @param forces\n     */\n    public calcForceAverage(forces?: Force[]): void {\n        let list = forces ?? [];\n        if (typeof forces === 'undefined') {\n            list = Object.values(this.forceMap).flatMap((shapes) =>\n                shapes.map((shape) => shape.data)\n            );\n        }\n\n        let forceAverage = 0;\n        if (list.length > 0) {\n            const { force: total } = list.reduce((prev, current) => {\n                const item: Force = {\n                    ...prev,\n                    force: prev.force + current.force,\n                };\n                return item;\n            });\n            forceAverage = total / list.length;\n        }\n\n        this.forceAverage = forceAverage;\n    }\n\n    /**\n     * 分布荷重の平均値\n     * @param trapezoids\n     */\n    public calcTrapezoidAverage(trapezoids?: Trapezoid[]): void {\n        let list = trapezoids ?? [];\n        if (typeof trapezoids === 'undefined') {\n            list = Object.values(this.trapezoidMap).flatMap((shapes) =>\n                shapes.map((shape) => shape.data)\n            );\n        }\n\n        let trapezoidAverage = 0;\n        if (list.length > 0) {\n            const total = list\n                .map(({ forceI, forceJ }) => forceI + forceJ)\n                .reduce((prev, current) => prev + current);\n            trapezoidAverage = total / (list.length * 2);\n        }\n\n        this.trapezoidAverage = trapezoidAverage;\n    }\n\n    /**\n     * 全体の寸法線の更新\n     */\n    public updateGlobalGuidelines(): void {\n        if (this.globalGuideLines.length > 0) {\n            // 表示済みの寸法線を削除\n            this.canvas.remove(...this.globalGuideLines);\n            // 念の為配列を初期化\n            this.globalGuideLines.length = 0;\n        }\n\n        // 全体の寸法線の作成\n        const nodes = Object.values(this.nodeMap).map((shape) => shape.data);\n        const lines = createGlobalGuideLine(nodes, this.pageHeight);\n\n        this.globalGuideLines.push(...lines);\n        this.canvas.add(...lines);\n    }\n\n    /**\n     * 梁要素に紐付かない節点を削除\n     */\n    public removeUnconnectedNodes(): void {\n        Object.entries(this.nodeBeamMap).forEach(([nodeId, beams]) => {\n            if (typeof beams === 'undefined' || beams.length === 0) {\n                // 節点に紐づく梁要素が存在しない\n                const node = this.nodeMap[nodeId];\n                if (node) {\n                    node.remove();\n                }\n                delete this.nodeBeamMap[nodeId];\n            }\n        });\n    }\n\n    // --- private methods ---\n    /**\n     * 背景の描画\n     */\n    private drawBackgroundGrid() {\n        const lines: fabric.Line[] = [];\n\n        for (let y = 0; y <= this.pageHeight; y += this.gridSize) {\n            const hl = new fabric.Line([0, y, this.pageWidth, y], { ...defaultGridLineProps });\n            lines.push(hl);\n        }\n        for (let x = 0; x <= this.pageWidth; x += this.gridSize) {\n            const vl = new fabric.Line([x, 0, x, this.pageHeight], { ...defaultGridLineProps });\n            lines.push(vl);\n        }\n\n        this.canvas.add(...lines);\n    }\n\n    /**\n     * 節点の追加\n     * @param x\n     * @param y\n     * @returns\n     */\n    private addNodeIfNotExists(x: number, y: number): string {\n        // 同一座標にすでに節点が存在する場合はその節点を使用\n        const entry = Object.entries(this.nodeMap).find(\n            ([, node]) => node.data.x === x && node.data.y === y\n        );\n        if (entry) {\n            const [nodeId] = entry;\n            return nodeId;\n        }\n\n        // 新しい節点を追加\n        const nodeId = uuid();\n        const node: Node = {\n            id: nodeId,\n            name: nodeId,\n            x,\n            y,\n        };\n\n        // 節点の作成\n        const shape = new NodeShape(this, node);\n        this.nodeMap[nodeId] = shape;\n\n        return nodeId;\n    }\n\n    /**\n     * 梁要素の追加\n     * @param nodeI\n     * @param nodeJ\n     * @returns\n     */\n    private addBeamIfNotExists(nodeI: string, nodeJ: string): string {\n        const nodes = [nodeI, nodeJ];\n        // i端, j端を同じくする梁要素が存在する？\n        const entry = Object.entries(this.beamMap).find(([, beam]) => {\n            return nodes.includes(beam.data.nodeI) && nodes.includes(beam.data.nodeJ);\n        });\n        if (entry) {\n            const [beamId] = entry;\n            return beamId;\n        }\n\n        const beamId = uuid();\n        const beam: Beam = {\n            id: beamId,\n            name: beamId,\n            nodeI,\n            nodeJ,\n        };\n\n        // 梁要素の作成\n        const shape = new BeamShape(this, beam);\n        this.beamMap[beamId] = shape;\n        nodes.forEach((node) => {\n            if (typeof this.nodeBeamMap[node] === 'undefined') {\n                this.nodeBeamMap[node] = [];\n            }\n            this.nodeBeamMap[node].push(shape);\n        });\n\n        return beamId;\n    }\n\n    // イベント\n\n    private attachEvent() {\n        this.canvas.on('mouse:down', this.onMouseDown.bind(this));\n        this.canvas.on('mouse:move', this.onMouseMove.bind(this));\n        this.canvas.on('mouse:up', this.onMouseUp.bind(this));\n        this.canvas.on('selection:created', this.onSelect.bind(this));\n        this.canvas.on('selection:updated', this.onSelect.bind(this));\n        this.canvas.on('selection:cleared', this.onDeselect.bind(this));\n        this.canvas.on('path:created', this.onCreatePath.bind(this));\n        this.canvas.on('object:added', this.onCreateObject.bind(this));\n    }\n\n    private onMouseDown(event: fabric.IEvent<Event>): void {\n        if (this.enablePan) {\n            // ポインタ位置\n            const { clientX: x, clientY: y } = getPointerPosition(event);\n            // ドラッグ開始\n            this.canvas.selection = false; // 選択範囲の矩形を出さない\n            this.isCanvasDragging = true;\n            this.lastPos = { x, y };\n        }\n    }\n\n    private onMouseMove(event: fabric.IEvent<Event>): void {\n        if (this.isCanvasDragging) {\n            // ポインタ位置\n            const { clientX: x, clientY: y } = getPointerPosition(event);\n\n            const vpt = this.canvas.viewportTransform;\n            const zoom = this.canvas.getZoom();\n            const canvasWidth = this.canvas.getWidth();\n            const canvasHeight = this.canvas.getHeight();\n            if (vpt) {\n                let px = vpt[4];\n                let py = vpt[5];\n\n                // ページ幅がキャンバス幅に収まる\n                if (canvasWidth >= this.pageWidth * zoom) {\n                    px = canvasWidth / 2 - (this.pageHeight * zoom) / 2;\n                } else {\n                    px += x - this.lastPos.x;\n                    if (px >= 0) {\n                        px = 0;\n                    } else if (px < canvasWidth - this.pageWidth * zoom) {\n                        px = canvasWidth - this.pageWidth * zoom;\n                    }\n                }\n                // ページ高がキャンバス高に収まる\n                if (canvasHeight >= this.pageHeight * zoom) {\n                    py = canvasHeight / 2 - (this.pageHeight * zoom) / 2;\n                } else {\n                    py += y - this.lastPos.y;\n                    if (py >= 0) {\n                        py = 0;\n                    } else if (py < canvasHeight - this.pageHeight * zoom) {\n                        py = canvasHeight - this.pageHeight * zoom;\n                    }\n                }\n\n                vpt[4] = px;\n                vpt[5] = py;\n\n                this.canvas.requestRenderAll();\n            }\n\n            this.lastPos = { x, y };\n        }\n    }\n\n    private onMouseUp(): void {\n        if (this.isCanvasDragging) {\n            const vpt = this.canvas.viewportTransform;\n            if (vpt) {\n                this.canvas.setViewportTransform(vpt);\n            }\n        }\n\n        // ドラッグ終了\n        this.isCanvasDragging = false;\n        // 複数選択を可能にする\n        this.canvas.selection = this.tool === 'select';\n    }\n\n    // 要素選択\n    private onSelect(): void {\n        this.enablePan = false;\n    }\n    // 要素選択解除\n    private onDeselect(): void {\n        if (['select', 'force', 'delete'].includes(this.tool)) {\n            this.enablePan = true;\n        }\n    }\n\n    /**\n     * パスが描かれたとき\n     * @param event\n     * @returns\n     */\n    private onCreatePath(event: fabric.IEvent<Event>): void {\n        if (isPathEvent(event)) {\n            const { path } = event.path;\n            if (path && isSVGPath(path) && path.length >= 2) {\n                // 始点と終点\n                const s = path[0];\n                const e = path[path.length - 1];\n                if (isPathStart(s) && isPathEnd(e)) {\n                    let [, ix, iy] = s;\n                    let [, jx, jy] = e;\n\n                    if (this.tool === 'pen') {\n                        // スナップする\n                        [ix, iy] = snap([ix, iy], this.snapSize);\n                        [jx, jy] = snap([jx, jy], this.snapSize);\n\n                        if (ix === jx && iy === jy) {\n                            // 同一座標の場合は何もしない\n                            return;\n                        }\n\n                        if (ix > jx || (ix === jx && iy > jy)) {\n                            // 始点と終点を入れ替え\n                            [ix, jx] = [jx, ix];\n                            [iy, jy] = [jy, iy];\n                        }\n\n                        // 節点の作成\n                        const nodeI = this.addNodeIfNotExists(ix, iy);\n                        const nodeJ = this.addNodeIfNotExists(jx, jy);\n                        // 梁要素の作成\n                        this.addBeamIfNotExists(nodeI, nodeJ);\n                    } else if (this.tool === 'trapezoid' && this.currentBeam) {\n                        // 梁要素を取得\n                        const beam = this.beamMap[this.currentBeam];\n\n                        if (beam) {\n                            // 始点、終点から i端/j端からの距離比を取得\n                            const vs = new Vector(ix, iy);\n                            const ve = new Vector(jx, jy);\n                            const distanceI = beam.calcRatio(vs);\n                            const distanceJ = 1 - beam.calcRatio(ve);\n                            // 分布荷重を作成\n                            const trapezoidId = uuid();\n                            const data: Trapezoid = {\n                                id: trapezoidId,\n                                name: trapezoidId,\n                                beam: beam.data.id,\n                                forceI: 10,\n                                forceJ: 10,\n                                distanceI,\n                                distanceJ,\n                            };\n                            const shape = new TrapezoidShape(this, data);\n\n                            if (typeof this.trapezoidMap[beam.data.id] === 'undefined') {\n                                this.trapezoidMap[beam.data.id] = [];\n                            }\n                            this.trapezoidMap[beam.data.id].push(shape);\n                        }\n\n                        // 分布荷重の追加終了\n                        this.canvas.isDrawingMode = false;\n                        this.currentBeam = undefined;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * 要素が追加されたとき\n     * @param event\n     */\n    private onCreateObject(event: fabric.IEvent<Event>): void {\n        // パスが追加されたら即削除する\n        if (event.target?.type === 'path') {\n            this.canvas.remove(event.target);\n        }\n    }\n\n    /**\n     * 保持しているデータを破棄する\n     */\n    public dispose(): void {\n        console.log('dispose canvas.');\n        if (this._initialized) {\n            this.canvas.clear();\n            this.canvas.dispose();\n        }\n    }\n}\n\nexport default CanvasManager;\n","var _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgPin1(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"svg\",\n    viewBox: \"0 0 160 160\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M80 0 L30 80 L130 80 Z\",\n    strokeWidth: 6,\n    stroke: \"gray\",\n    fill: \"transparent\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgPin1);\nexport default __webpack_public_path__ + \"static/media/pin_1.92d54adc.svg\";\nexport { ForwardRef as ReactComponent };","import {\n    createContext,\n    Dispatch,\n    ReactNode,\n    SetStateAction,\n    useCallback,\n    useRef,\n    useState,\n} from 'react';\nimport {\n    OpenPopupFunction,\n    PopupCallbackFunction,\n    PopupParams,\n    PopupPosition,\n    PopupType,\n} from '../popup/types';\n\ninterface IPopupContext {\n    popupType?: PopupType;\n    setPopupType: Dispatch<SetStateAction<PopupType | undefined>>;\n    popupPosition: PopupPosition;\n    setPopupPosition: Dispatch<SetStateAction<PopupPosition>>;\n    open: OpenPopupFunction;\n    close: VoidFunction;\n    popupParams?: PopupParams;\n    callback?: PopupCallbackFunction;\n}\n\ninterface Props {\n    children: ReactNode;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nexport const PopupContext = createContext<IPopupContext>(undefined!);\n\nconst PopupProvider: React.VFC<Props> = ({ children }) => {\n    // ポップアップの種類\n    const [popupType, setPopupType] = useState<PopupType>();\n    // ポップアップの位置\n    const [popupPosition, setPopupPosition] = useState<PopupPosition>({ top: 0, left: 0 });\n    // パラメータ\n    const [popupParams, setPopupParams] = useState<PopupParams>({});\n    // コールバック\n    const callbackFunc = useRef<PopupCallbackFunction>();\n\n    const open = useCallback(\n        (\n            type: PopupType,\n            position: PopupPosition,\n            params?: PopupParams,\n            callback?: PopupCallbackFunction\n        ) => {\n            setPopupType(type);\n            setPopupPosition(position);\n            setPopupParams(params ?? {});\n            callbackFunc.current = callback;\n        },\n        []\n    );\n\n    const close = useCallback(() => {\n        setPopupType(undefined);\n        setPopupPosition({ top: 0, left: 0 });\n        setPopupParams({});\n        callbackFunc.current = undefined;\n    }, []);\n\n    const callback = useCallback((values: Record<string, unknown>) => {\n        if (callbackFunc.current) {\n            callbackFunc.current(values);\n        }\n    }, []);\n\n    return (\n        <PopupContext.Provider\n            value={{\n                popupType,\n                setPopupType,\n                popupPosition,\n                setPopupPosition,\n                open,\n                close,\n                popupParams,\n                callback,\n            }}\n        >\n            {children}\n        </PopupContext.Provider>\n    );\n};\n\nexport default PopupProvider;\n","import { forwardRef, useContext, useEffect, useImperativeHandle, useRef } from 'react';\nimport { CanvasTool } from '../../types/common';\nimport { defaultCanvasProps, StructureCanvasProps } from '../../types/note';\nimport CanvasManager from './manager';\nimport { PopupContext } from './provider/PopupProvider';\nimport { CanvasCoreHandler } from './types';\n\ninterface Props extends StructureCanvasProps {\n    readonly?: boolean;\n    tool: CanvasTool;\n    snapSize?: number;\n    gridSize?: number;\n}\n\nconst CanvasCore: React.ForwardRefRenderFunction<CanvasCoreHandler, Props> = (\n    { tool, ...props },\n    ref\n) => {\n    const { open } = useContext(PopupContext);\n\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    const managerRef = useRef<CanvasManager>();\n\n    useImperativeHandle(ref, () => ({\n        getStructure: () => {\n            if (managerRef.current) {\n                return managerRef.current.toCanvasProps();\n            }\n            return defaultCanvasProps;\n        },\n    }));\n\n    // 初期化\n    useEffect(() => {\n        if (canvasRef.current && props.width !== 0 && props.height !== 0) {\n            if (typeof managerRef.current === 'undefined') {\n                managerRef.current = new CanvasManager(canvasRef.current, props, open);\n            }\n        }\n    }, [open, props]);\n\n    // ツールが変更された場合\n    useEffect(() => {\n        if (managerRef.current && managerRef.current.tool !== tool) {\n            managerRef.current.setTool(tool);\n        }\n    }, [tool]);\n\n    return <canvas ref={canvasRef} width={props.width} height={props.height} />;\n};\n\nexport default forwardRef(CanvasCore);\n","import { Button, InputAdornment, Paper, Stack, TextField } from '@mui/material';\nimport { ChangeEvent, FormEvent, useCallback, useEffect, useMemo, useState } from 'react';\nimport { Force, isForce } from '../../../types/shape';\nimport { PopupBaseProps } from './types';\n\ntype Props = PopupBaseProps;\n\ninterface ForceEditorProps extends Omit<Props, 'values'> {\n    force: Force;\n}\n\nconst ForceEditor: React.VFC<ForceEditorProps> = ({ force, onChange, onClose }) => {\n    const [value, setValue] = useState('');\n    const [error, setError] = useState<string>();\n\n    const handleSubmit = useCallback(\n        (event: FormEvent<HTMLFormElement>) => {\n            event.preventDefault();\n\n            if (event.currentTarget.checkValidity() && typeof error === 'undefined') {\n                const num = parseFloat(value);\n                if (!isNaN(num)) {\n                    // 更新\n                    onChange &&\n                        onChange({\n                            ...force,\n                            force: num,\n                        });\n                    // ポップアップ閉じる\n                    onClose();\n                }\n            }\n        },\n        [error, onChange, onClose, value, force]\n    );\n\n    const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const { value } = event.currentTarget;\n        let errorMessage: string | undefined;\n        setValue(value);\n\n        // 必須\n        if (value.length === 0) {\n            errorMessage = '数値を入力してください';\n        }\n        // 数値？\n        const num = parseFloat(value);\n        if (isNaN(num)) {\n            errorMessage = '数値を入力してください';\n        }\n        if (0 > num || num > Number.MAX_SAFE_INTEGER) {\n            errorMessage = '0 より大きい値を入力してください';\n        }\n\n        setError(errorMessage);\n    }, []);\n\n    useEffect(() => {\n        setValue(`${force.force}`);\n        setError(undefined);\n    }, [force]);\n\n    return (\n        <Paper>\n            <Stack\n                direction=\"column\"\n                spacing={1}\n                sx={{ p: 1, width: 240 }}\n                component=\"form\"\n                autoComplete=\"off\"\n                noValidate\n                onSubmit={handleSubmit}\n            >\n                <TextField\n                    variant=\"outlined\"\n                    margin=\"dense\"\n                    size=\"small\"\n                    label=\"集中荷重\"\n                    value={value}\n                    required\n                    fullWidth\n                    onChange={handleChange}\n                    InputProps={{\n                        endAdornment: <InputAdornment position=\"end\">kN</InputAdornment>,\n                    }}\n                    error={Boolean(error)}\n                    helperText={error}\n                />\n                <Stack direction=\"row\" justifyContent=\"flex-end\" spacing={1}>\n                    <Button size=\"small\" onClick={onClose}>\n                        キャンセル\n                    </Button>\n                    <Button type=\"submit\" size=\"small\" variant=\"contained\">\n                        OK\n                    </Button>\n                </Stack>\n            </Stack>\n        </Paper>\n    );\n};\n\nconst ConnectedForceEditor: React.VFC<Props> = ({ values, ...props }) => {\n    const force = useMemo(() => {\n        if (isForce(values)) {\n            return values;\n        }\n        // 空の force を渡す\n        return {\n            id: '',\n            name: '',\n            beam: '',\n            force: 0,\n            distanceI: 0,\n        };\n    }, [values]);\n\n    return <ForceEditor {...props} force={force} />;\n};\n\nexport default ConnectedForceEditor;\n","var _path, _circle, _circle2, _line;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgPin2(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"svg\",\n    viewBox: \"0 0 160 160\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M80 0 L30 80 L130 80 Z\",\n    strokeWidth: 6,\n    stroke: \"gray\",\n    fill: \"transparent\"\n  })), _circle || (_circle = /*#__PURE__*/React.createElement(\"circle\", {\n    stroke: \"gray\",\n    strokeWidth: 6,\n    fill: \"transparent\",\n    cx: 45,\n    cy: 115,\n    r: 20\n  })), _circle2 || (_circle2 = /*#__PURE__*/React.createElement(\"circle\", {\n    stroke: \"gray\",\n    strokeWidth: 6,\n    fill: \"transparent\",\n    cx: 115,\n    cy: 115,\n    r: 20\n  })), _line || (_line = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 30,\n    y1: 150,\n    x2: 130,\n    y2: 150,\n    stroke: \"gray\",\n    strokeWidth: 6\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgPin2);\nexport default __webpack_public_path__ + \"static/media/pin_2.2b2bb714.svg\";\nexport { ForwardRef as ReactComponent };","var _path, _circle, _circle2, _line;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgPin3(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"svg\",\n    viewBox: \"0 0 160 160\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M30 3 L30 80 L130 80 L130 3 Z\",\n    strokeWidth: 6,\n    stroke: \"gray\",\n    fill: \"transparent\"\n  })), _circle || (_circle = /*#__PURE__*/React.createElement(\"circle\", {\n    stroke: \"gray\",\n    strokeWidth: 6,\n    fill: \"transparent\",\n    cx: 45,\n    cy: 115,\n    r: 20\n  })), _circle2 || (_circle2 = /*#__PURE__*/React.createElement(\"circle\", {\n    stroke: \"gray\",\n    strokeWidth: 6,\n    fill: \"transparent\",\n    cx: 115,\n    cy: 115,\n    r: 20\n  })), _line || (_line = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 30,\n    y1: 150,\n    x2: 130,\n    y2: 150,\n    stroke: \"gray\",\n    strokeWidth: 6\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgPin3);\nexport default __webpack_public_path__ + \"static/media/pin_3.ed9f9bf0.svg\";\nexport { ForwardRef as ReactComponent };","var _line, _line2, _line3, _line4, _line5;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgPin4(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"svg\",\n    viewBox: \"0 0 160 160\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _line || (_line = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 0,\n    y1: 3,\n    x2: 160,\n    y2: 3,\n    stroke: \"gray\",\n    strokeWidth: 6\n  })), _line2 || (_line2 = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 20,\n    y1: 0,\n    x2: 0,\n    y2: 60,\n    stroke: \"gray\",\n    strokeWidth: 6\n  })), _line3 || (_line3 = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 60,\n    y1: 0,\n    x2: 40,\n    y2: 60,\n    stroke: \"gray\",\n    strokeWidth: 6\n  })), _line4 || (_line4 = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 100,\n    y1: 0,\n    x2: 80,\n    y2: 60,\n    stroke: \"gray\",\n    strokeWidth: 6\n  })), _line5 || (_line5 = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 140,\n    y1: 0,\n    x2: 120,\n    y2: 60,\n    stroke: \"gray\",\n    strokeWidth: 6\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgPin4);\nexport default __webpack_public_path__ + \"static/media/pin_4.962a4879.svg\";\nexport { ForwardRef as ReactComponent };","import CircleOutlinedIcon from '@mui/icons-material/CircleOutlined';\nimport {\n    Button,\n    Paper,\n    Stack,\n    SvgIcon,\n    ToggleButton,\n    ToggleButtonGroup,\n    ToggleButtonProps,\n    Typography,\n} from '@mui/material';\nimport {\n    FormEvent,\n    MouseEvent,\n    ReactElement,\n    useCallback,\n    useEffect,\n    useMemo,\n    useState,\n} from 'react';\nimport { isNode, isNodePinType, Node, NodePinType } from '../../../types/shape';\nimport { ReactComponent as PinIcon1 } from './pins/pin_1.svg';\nimport { ReactComponent as PinIcon2 } from './pins/pin_2.svg';\nimport { ReactComponent as PinIcon3 } from './pins/pin_3.svg';\nimport { ReactComponent as PinIcon4 } from './pins/pin_4.svg';\nimport { PopupBaseProps } from './types';\n\ntype Props = PopupBaseProps;\n\ninterface PinSelectorProps extends Omit<Props, 'values'> {\n    node: Node;\n}\n\ninterface PinButtonProps {\n    type: NodePinType;\n    icon: ReactElement;\n    label: string;\n}\n\nconst PinButtons: Readonly<Record<NodePinType, PinButtonProps>> = {\n    free: {\n        type: 'free',\n        icon: <CircleOutlinedIcon />,\n        label: '完全フリー',\n    },\n    pin: {\n        type: 'pin',\n        icon: (\n            <SvgIcon sx={{ width: 24 }} viewBox=\"0 0 160 160\">\n                <PinIcon1 />\n            </SvgIcon>\n        ),\n        label: '完全ピン',\n    },\n    pinX: {\n        type: 'pinX',\n        icon: (\n            <SvgIcon sx={{ width: 24 }} viewBox=\"0 0 160 160\">\n                <PinIcon2 />\n            </SvgIcon>\n        ),\n        label: 'ピンXローラー',\n    },\n    pinZ: {\n        type: 'pinZ',\n        icon: (\n            <SvgIcon sx={{ width: 24, transform: 'rotate(-90deg)' }} viewBox=\"0 0 160 160\">\n                <PinIcon2 />\n            </SvgIcon>\n        ),\n        label: 'ピンZローラー',\n    },\n    fixX: {\n        type: 'fixX',\n        icon: (\n            <SvgIcon sx={{ width: 24 }} viewBox=\"0 0 160 160\">\n                <PinIcon3 />\n            </SvgIcon>\n        ),\n        label: '固定Xローラー',\n    },\n    fix: {\n        type: 'fix',\n        icon: (\n            <SvgIcon sx={{ width: 24 }} viewBox=\"0 0 160 160\">\n                <PinIcon4 />\n            </SvgIcon>\n        ),\n        label: '完全固定',\n    },\n};\n\nconst defaultButtonProps: Partial<ToggleButtonProps> = {\n    sx: { justifyContent: 'flex-start', alignItems: 'center' },\n};\n\nconst PinSelector: React.VFC<PinSelectorProps> = ({ node, onChange, onClose }) => {\n    const [pin, setPin] = useState<NodePinType>();\n\n    const handleSubmit = useCallback(\n        (event: FormEvent) => {\n            event.preventDefault();\n\n            const values: Node = {\n                ...node,\n                pin,\n            };\n\n            // 無理くり Record<string, unknown> に変換して渡す\n            onChange && onChange(values as unknown as Record<string, unknown>);\n            onClose();\n        },\n        [node, onChange, onClose, pin]\n    );\n\n    const handleChange = useCallback((_: MouseEvent<HTMLElement>, newValue: string | null) => {\n        if (newValue !== null && isNodePinType(newValue)) {\n            setPin(newValue);\n        }\n    }, []);\n\n    useEffect(() => {\n        setPin(node.pin ?? 'free');\n    }, [node.pin]);\n\n    return (\n        <Paper>\n            <Stack\n                direction=\"column\"\n                spacing={1}\n                sx={{ p: 1, width: 240 }}\n                component=\"form\"\n                autoComplete=\"off\"\n                noValidate\n                onSubmit={handleSubmit}\n            >\n                <ToggleButtonGroup\n                    orientation=\"vertical\"\n                    value={pin}\n                    size=\"small\"\n                    exclusive\n                    fullWidth\n                    onChange={handleChange}\n                >\n                    {Object.entries(PinButtons).map(([key, { icon, label }]) => (\n                        <ToggleButton key={key} value={key} {...defaultButtonProps}>\n                            {icon}\n                            <Typography variant=\"caption\" sx={{ ml: 1 }}>\n                                {label}\n                            </Typography>\n                        </ToggleButton>\n                    ))}\n                </ToggleButtonGroup>\n                <Stack direction=\"row\" justifyContent=\"flex-end\" spacing={1}>\n                    <Button size=\"small\" onClick={onClose}>\n                        キャンセル\n                    </Button>\n                    <Button type=\"submit\" size=\"small\" variant=\"contained\">\n                        OK\n                    </Button>\n                </Stack>\n            </Stack>\n        </Paper>\n    );\n};\n\nconst ConnectedPinSelector: React.VFC<Props> = ({ values, ...props }) => {\n    const node = useMemo(() => {\n        if (isNode(values)) {\n            return values;\n        }\n        return {\n            id: '',\n            name: '',\n            x: 0,\n            y: 0,\n        };\n    }, [values]);\n\n    return <PinSelector {...props} node={node} />;\n};\n\nexport default ConnectedPinSelector;\n","import {\n    Button,\n    Checkbox,\n    FormControlLabel,\n    InputAdornment,\n    Paper,\n    Stack,\n    TextField,\n} from '@mui/material';\nimport { ChangeEvent, FormEvent, useCallback, useEffect, useMemo, useState } from 'react';\nimport { isTrapezoid, Trapezoid } from '../../../types/shape';\nimport { round } from '../util';\nimport { PopupBaseProps } from './types';\n\ntype Props = PopupBaseProps;\n\ninterface FormProps extends Omit<Props, 'values'> {\n    trapezoid: Trapezoid;\n}\n\ninterface TrapezoidAttrs {\n    forceI: number;\n    forceJ: number;\n    angle: number;\n    isGlobal: boolean;\n}\ninterface FormValues {\n    forceI: string;\n    forceJ: string;\n    angle: string;\n    isGlobal: boolean;\n}\n\ntype ValidateTuple = [value: number, valid: boolean, error: string];\n\n/**\n * 必須かつ 0以上の数値\n * @param value\n */\nconst validateForce = (value: string): ValidateTuple => {\n    if (value.length === 0) {\n        // 必須\n        return [NaN, false, '数値を入力してください'];\n    } else {\n        const val = parseFloat(value);\n        if (isNaN(val)) {\n            // 数値でない\n            return [NaN, false, '数値を入力してください'];\n        } else if (0 >= val && val > Number.MAX_SAFE_INTEGER) {\n            // 数値が範囲外\n            return [val, false, '0 以上の数値を入力してください'];\n        }\n        // OK\n        return [round(val, 3), true, ''];\n    }\n};\n\n/**\n * -180 から 180 の範囲の数値\n * -180 の場合は 180 とする\n * @param value\n */\nconst validateAngle = (value: string): ValidateTuple => {\n    if (value.length > 0) {\n        let val = parseInt(value, 10);\n        if (isNaN(val) || value.indexOf('.') >= 0) {\n            // 整数でない\n            return [NaN, false, '整数を入力してください'];\n        } else if (-180 > val || 180 < val) {\n            // 180 から 180 の範囲外\n            return [val, false, '-180 〜 180 で入力してください'];\n        }\n        if (val === -180) {\n            // -180 の場合は 180 とする\n            val = 180;\n        }\n        // OK\n        return [val, true, ''];\n    }\n    // 未指定の場合は 90 を返す\n    return [90, true, ''];\n};\n\nconst parseFormValues = (values: Partial<FormValues>): [boolean, TrapezoidAttrs] => {\n    const attrs: TrapezoidAttrs = {\n        forceI: 0,\n        forceJ: 0,\n        angle: 90,\n        isGlobal: false,\n    };\n\n    // forceI\n    const [value1, valid1] = validateForce(values.forceI ?? '');\n    const [value2, valid2] = validateForce(values.forceJ ?? '');\n    const [value3, valid3] = validateAngle(values.angle ?? '');\n    const valid = valid1 && valid2 && valid3;\n\n    attrs.forceI = value1;\n    attrs.forceJ = value2;\n    attrs.angle = value3;\n    attrs.isGlobal = values.isGlobal ?? false;\n\n    return [valid, attrs];\n};\n\nconst toFormValues = (trapezoid: Trapezoid): Partial<FormValues> => {\n    const values: Partial<FormValues> = {};\n\n    values.forceI = `${trapezoid.forceI}`;\n    values.forceJ = `${trapezoid.forceJ}`;\n    values.angle = `${trapezoid.angle ?? ''}`;\n    values.isGlobal = trapezoid.isGlobal;\n\n    return values;\n};\n\nconst TrapezoidEditor: React.VFC<FormProps> = ({ trapezoid, onChange, onClose }) => {\n    const [values, setValues] = useState<Partial<FormValues>>({});\n    const [errors, setErrors] = useState<Record<string, string>>({});\n\n    const handleSubmit = useCallback(\n        (event: FormEvent<HTMLFormElement>) => {\n            event.preventDefault();\n\n            if (event.currentTarget.checkValidity()) {\n                // エラーがあれば更新しない\n                const invalid = Object.values(errors).some((error) => error.length > 0);\n                if (!invalid) {\n                    // values を TrapezoidAttrs に変換する\n                    const [valid, attrs] = parseFormValues(values);\n                    if (valid) {\n                        // 更新\n                        onChange &&\n                            onChange({\n                                ...trapezoid,\n                                ...attrs,\n                            });\n                    }\n                    // ポップアップ閉じる\n                    onClose();\n                }\n            }\n        },\n        [errors, onChange, onClose, trapezoid, values]\n    );\n\n    const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const { name, value } = event.target;\n        let errorMessage = '';\n        switch (name) {\n            case 'forceI':\n            case 'forceJ':\n                // 必須かつ 0以上の数値\n                const [, valid1, error1] = validateForce(value);\n                if (!valid1) {\n                    errorMessage = error1;\n                }\n                break;\n            case 'angle':\n                const [, valid2, error2] = validateAngle(value);\n                if (!valid2) {\n                    errorMessage = error2;\n                }\n                break;\n        }\n\n        // エラー情報の更新\n        setErrors((state) => ({\n            ...state,\n            [name]: errorMessage,\n        }));\n\n        // 値を更新\n        setValues((state) => ({\n            ...state,\n            [name]: value,\n        }));\n    }, []);\n\n    const handleChangeIsGlobal = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const { checked } = event.target;\n        setValues((state) => ({\n            ...state,\n            isGlobal: checked,\n        }));\n    }, []);\n\n    useEffect(() => {\n        setValues(toFormValues(trapezoid));\n        setErrors({});\n    }, [trapezoid]);\n\n    return (\n        <Paper>\n            <Stack\n                direction=\"column\"\n                spacing={1}\n                sx={{ p: 1, width: 240 }}\n                component=\"form\"\n                autoComplete=\"off\"\n                noValidate\n                onSubmit={handleSubmit}\n            >\n                {/* forceI */}\n                <TextField\n                    variant=\"outlined\"\n                    margin=\"dense\"\n                    size=\"small\"\n                    label=\"I端側の荷重\"\n                    name=\"forceI\"\n                    value={values['forceI'] ?? ''}\n                    required\n                    fullWidth\n                    onChange={handleChange}\n                    InputProps={{\n                        endAdornment: <InputAdornment position=\"end\">kN/m</InputAdornment>,\n                    }}\n                    error={Boolean(errors['forceI'])}\n                    helperText={errors['forceI'] ?? ''}\n                />\n                {/* forceJ */}\n                <TextField\n                    variant=\"outlined\"\n                    margin=\"dense\"\n                    size=\"small\"\n                    label=\"J端側の荷重\"\n                    name=\"forceJ\"\n                    value={values['forceJ'] ?? ''}\n                    required\n                    fullWidth\n                    onChange={handleChange}\n                    InputProps={{\n                        endAdornment: <InputAdornment position=\"end\">kN/m</InputAdornment>,\n                    }}\n                    error={Boolean(errors['forceJ'])}\n                    helperText={errors['forceJ'] ?? ''}\n                />\n                {/* angle */}\n                <TextField\n                    variant=\"outlined\"\n                    margin=\"dense\"\n                    size=\"small\"\n                    label=\"角度\"\n                    name=\"angle\"\n                    value={values['angle'] ?? ''}\n                    fullWidth\n                    onChange={handleChange}\n                    InputProps={{\n                        endAdornment: <InputAdornment position=\"end\">°</InputAdornment>,\n                    }}\n                    error={Boolean(errors['angle'])}\n                    helperText={errors['angle'] ?? ''}\n                />\n                {/* isGlobal */}\n                <FormControlLabel\n                    label=\"全体座標系\"\n                    control={\n                        <Checkbox\n                            name=\"isGlobal\"\n                            size=\"small\"\n                            checked={values.isGlobal ?? false}\n                            onChange={handleChangeIsGlobal}\n                        />\n                    }\n                />\n                <Stack direction=\"row\" justifyContent=\"flex-end\" spacing={1}>\n                    <Button size=\"small\" onClick={onClose}>\n                        キャンセル\n                    </Button>\n                    <Button type=\"submit\" size=\"small\" variant=\"contained\">\n                        OK\n                    </Button>\n                </Stack>\n            </Stack>\n        </Paper>\n    );\n};\n\nconst ConnectedTrapezoidEditor: React.VFC<Props> = ({ values, ...props }) => {\n    const trapezoid = useMemo(() => {\n        if (isTrapezoid(values)) {\n            return values;\n        }\n        // 空データを返す\n        return {\n            id: '',\n            name: '',\n            beam: '',\n            forceI: 0,\n            distanceI: 0,\n            forceJ: 0,\n            distanceJ: 0,\n        };\n    }, [values]);\n\n    return <TrapezoidEditor {...props} trapezoid={trapezoid} />;\n};\n\nexport default ConnectedTrapezoidEditor;\n","import { Box } from '@mui/material';\nimport { useContext } from 'react';\nimport { PopupContext } from '../provider/PopupProvider';\nimport ForceEditor from './ForceEditor';\nimport PinSelector from './PinSelector';\nimport TrapezoidEditor from './TrapezoidEditor';\n\nconst Popup: React.VFC = () => {\n    const { popupType, popupPosition, popupParams, close, callback } = useContext(PopupContext);\n\n    if (typeof popupType === 'undefined') {\n        return null;\n    }\n\n    return (\n        <Box\n            sx={{\n                position: 'absolute',\n                zIndex: 5000,\n                ...popupPosition,\n            }}\n        >\n            {popupType === 'forces' && (\n                <ForceEditor values={popupParams ?? {}} onClose={close} onChange={callback} />\n            )}\n            {popupType === 'trapezoids' && (\n                <TrapezoidEditor values={popupParams ?? {}} onClose={close} onChange={callback} />\n            )}\n            {popupType === 'nodes' && (\n                <PinSelector values={popupParams ?? {}} onClose={close} onChange={callback} />\n            )}\n        </Box>\n    );\n};\n\nexport default Popup;\n","import { Box } from '@mui/material';\nimport { forwardRef, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport { CanvasTool, DOMSize } from '../../types/common';\nimport { defaultCanvasProps, StructureCanvasProps } from '../../types/note';\nimport CanvasCore from './core';\nimport Popup from './popup';\nimport PopupProvider from './provider/PopupProvider';\nimport { CanvasCoreHandler } from './types';\n\ninterface Props extends StructureCanvasProps {\n    readonly?: boolean;\n    tool?: CanvasTool;\n}\n\nexport type CanvasHandler = CanvasCoreHandler;\n\nconst Canvas: React.ForwardRefRenderFunction<CanvasHandler, Props> = (\n    { tool = 'select', readonly = false, children, ...props },\n    ref\n) => {\n    // キャンバス表示領域\n    const [size, setSize] = useState<DOMSize>({ width: 0, height: 0 });\n    // キャンバスの親要素\n    const containerRef = useRef<HTMLDivElement>(null);\n    // キャンバス本体\n    const canvasRef = useRef<CanvasCoreHandler>(null);\n\n    useImperativeHandle(\n        ref,\n        () => ({\n            getStructure: () => {\n                if (canvasRef.current) {\n                    return canvasRef.current.getStructure();\n                }\n                return defaultCanvasProps;\n            },\n        }),\n        []\n    );\n\n    // 要素のリサイズを監視\n    useEffect(() => {\n        const observer = new ResizeObserver((entries) => {\n            const { width, height } = entries[0].contentRect;\n            setSize({\n                width,\n                height,\n            });\n        });\n\n        if (containerRef.current) {\n            observer.observe(containerRef.current);\n        }\n\n        return () => {\n            observer.disconnect();\n        };\n    }, []);\n\n    return (\n        <Box\n            ref={containerRef}\n            sx={{\n                width: 'auto',\n                height: '100%',\n                backgroundColor: '#ffffff',\n                overscrollBehavior: 'contain',\n            }}\n        >\n            <PopupProvider>\n                <CanvasCore ref={canvasRef} tool={tool} readonly={readonly} {...size} {...props} />\n                <Popup />\n            </PopupProvider>\n        </Box>\n    );\n};\n\nexport default forwardRef(Canvas);\n","// --- app 共通 ---\nexport interface DOMSize {\n    width: number;\n    height: number;\n}\nexport interface DOMPosition {\n    top: number;\n    left: number;\n}\n\nexport interface ShapePosition {\n    x: number;\n    y: number;\n}\n\nexport type SizePosition = DOMSize & ShapePosition;\n\nexport const AppModes = ['note', 'canvas'] as const;\nexport type AppMode = typeof AppModes[number];\n\n// --- canvas関係 ---\n\nexport const CanvasTools = ['select', 'pen', 'force', 'trapezoid', 'delete'] as const;\nexport type CanvasTool = typeof CanvasTools[number];\nexport const isCanvasTool = (item: unknown): item is CanvasTool => {\n    if (typeof item === 'string') {\n        return CanvasTools.some((tool) => tool === item);\n    }\n    return false;\n};\n\nexport const isNumberArray = (item: unknown): item is number[] => {\n    if (Array.isArray(item)) {\n        if (item.length === 0) {\n            return true;\n        }\n\n        return item.every((value) => typeof value === 'number');\n    }\n    return false;\n};\n\nexport const isLinePoints = (item: unknown): item is [number, number, number, number] => {\n    if (isNumberArray(item)) {\n        return item.length === 4;\n    }\n    return false;\n};\n\n// fabric の座標\nexport type Point = {\n    x: number;\n    y: number;\n};\n\nexport interface ShapeCoordinates {\n    tl: Point;\n    tr: Point;\n    bl: Point;\n    br: Point;\n}\n\nexport const isPoint = (item: unknown): item is Point => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return typeof value.x === 'number' && typeof value.y === 'number';\n    }\n    return false;\n};\n\nexport const isShapeCoordinates = (item: unknown): item is ShapeCoordinates => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return isPoint(value.tl) && isPoint(value.tr) && isPoint(value.bl) && isPoint(value.br);\n    }\n    return false;\n};\n","import { fabric } from 'fabric';\nimport { isShapeCoordinates } from '../../../types/common';\nimport { StructureCanvasProps } from '../../../types/note';\nimport PageManager from '../manager';\n\nconst defaultLayerOptions: fabric.IRectOptions = {\n    lockRotation: true,\n    fill: '#fff',\n    stroke: '#000',\n    strokeWidth: 1,\n    hasRotatingPoint: false,\n    erasable: false,\n};\nconst defaultImageOptions: fabric.IObjectOptions = {\n    // イベントに反応させない\n    selectable: false,\n    evented: false,\n    // 消しゴムで消せない\n    erasable: false,\n};\n\nclass StructureRect {\n    private manager: PageManager;\n    private data: StructureCanvasProps;\n    private layer: fabric.Rect;\n    private image?: fabric.Object;\n\n    private dragging = false;\n\n    constructor(manager: PageManager, props: StructureCanvasProps) {\n        this.manager = manager;\n        this.data = props;\n\n        // レイヤーの作成\n        this.layer = this.createLayer();\n        this.manager.canvas.add(this.layer);\n\n        // イメージの読み込み\n        this.loadImage();\n\n        // イベントの割当\n        this.attachEvents();\n    }\n\n    // --- public methods ---\n\n    public update(): void;\n    public update(data: StructureCanvasProps): void;\n\n    /**\n     * 更新処理\n     * @param data\n     */\n    public update(data?: StructureCanvasProps): void {\n        if (data) {\n            this.data = data;\n        }\n\n        // キャンバスから除去\n        this.manager.canvas.remove(this.layer);\n        if (this.image) {\n            this.manager.canvas.remove(this.image);\n        }\n\n        // レイヤーの作成\n        this.layer = this.createLayer();\n        this.manager.canvas.add(this.layer);\n\n        // イメージの読み込み\n        this.loadImage();\n\n        // イベントの割当\n        this.attachEvents();\n    }\n\n    /**\n     * 削除処理\n     */\n    public remove(): void {\n        this.manager.canvas.remove(this.layer);\n        if (this.image) {\n            this.manager.canvas.remove(this.image);\n        }\n    }\n\n    // --- private methods ---\n\n    private createLayer(): fabric.Rect {\n        const rect = new fabric.Rect({\n            top: this.data.y,\n            left: this.data.x,\n            height: this.data.height,\n            width: this.data.width,\n            ...defaultLayerOptions,\n        });\n        rect.setControlsVisibility({\n            bl: true,\n            br: true,\n            mb: true,\n            ml: true,\n            mr: true,\n            mt: true,\n            tl: true,\n            tr: true,\n            mtr: false,\n        });\n\n        return rect;\n    }\n\n    private loadImage(): void {\n        if (this.image) {\n            this.manager.canvas.remove(this.image);\n            this.image = undefined;\n        }\n\n        if (this.data.image) {\n            fabric.loadSVGFromString(this.data.image, (objects, options) => {\n                this.image = fabric.util.groupSVGElements(objects, options);\n                // プロパティ設定\n                this.image.setOptions({\n                    ...defaultImageOptions,\n                    top: this.layer.top,\n                    left: this.layer.left,\n                });\n\n                // キャンバスに追加\n                this.manager.canvas.add(this.image);\n                // レイヤーを透明にする\n                this.layer.opacity = 0;\n                // レイヤーを最前面に持ってくる\n                this.layer.bringToFront();\n            });\n        }\n    }\n\n    // --- events ---\n\n    /**\n     * イベントの割当\n     */\n    private attachEvents() {\n        this.layer.on('selected', this.onSelected.bind(this));\n        this.layer.on('deselected', this.onDeselected.bind(this));\n        // 伸縮\n        this.layer.on('scaling', this.onScaling.bind(this));\n        this.layer.on('scaled', this.onScaled.bind(this));\n        // 移動\n        this.layer.on('moving', this.onMoving.bind(this));\n        this.layer.on('moved', this.onMoved.bind(this));\n    }\n\n    /**\n     * 選択されたらナビゲーションを表示する\n     * @param event\n     */\n    private onSelected(event: fabric.IEvent<Event>): void {\n        const coords = this.layer.calcCoords();\n        this.manager.openCanvasNavigation(this.data, coords);\n    }\n\n    /**\n     * 選択が解除されたらナビゲーションを閉じる\n     * @param event\n     */\n    private onDeselected(event: fabric.IEvent<Event>): void {\n        // TODO: 複数のキャンバスがある場合にマズい気がする\n        this.manager.closeCanvasNavigation();\n    }\n\n    private onScaling(event: fabric.IEvent<Event>): void {\n        if (!this.dragging) {\n            // レイヤーを半透明にする (画像がなければそのまま)\n            this.layer.opacity = this.image ? 0.1 : 1;\n\n            this.dragging = true;\n        }\n    }\n\n    private onScaled(event: fabric.IEvent<Event>): void {\n        if (this.dragging) {\n            // TODO: ズームの考慮が必要\n            const scaleX = this.layer.scaleX ?? 1;\n            const scaleY = this.layer.scaleY ?? 1;\n            const width = this.data.width * scaleX;\n            const height = this.data.height * scaleY;\n\n            // scale をリセット\n            this.layer.scaleX = 1;\n            this.layer.scaleY = 1;\n            this.layer.width = width;\n            this.layer.height = height;\n\n            // 構造データを更新\n            this.data.width = width;\n            this.data.height = height;\n\n            // TODO: 画像を再生成する?\n\n            // 透明度を戻す\n            this.layer.opacity = this.image ? 0 : 1;\n\n            // ドラッグ終了\n            this.dragging = false;\n            // ナビゲーションの更新\n            this.onSelected(event);\n        }\n    }\n\n    private onMoving(event: fabric.IEvent<Event>): void {\n        if (!this.dragging) {\n            // ナビゲーションを閉じる\n            this.manager.closeCanvasNavigation();\n\n            this.dragging = true;\n        }\n\n        // レイヤーの位置に画像を移動する\n        if (this.image) {\n            this.image.top = this.layer.top;\n            this.image.left = this.layer.left;\n        }\n    }\n\n    private onMoved(event: fabric.IEvent<Event>): void {\n        if (this.dragging) {\n            // ノート上での絶対座標を取得\n            const coords = this.layer.calcCoords(true);\n            if (isShapeCoordinates(coords)) {\n                this.data.x = coords.tl.x;\n                this.data.y = coords.tl.y;\n            }\n\n            // ナビゲーションを再表示\n            this.onSelected(event);\n\n            // ドラッグ終了\n            this.dragging = false;\n        }\n    }\n}\n\nexport default StructureRect;\n","import { fabric } from 'fabric';\nimport { ShapeCoordinates, ShapePosition } from '../../types/common';\nimport {\n    defaultCanvasProps,\n    defaultDrawSettings,\n    DrawSettings,\n    NoteMode,\n    PageProps,\n    PageSize,\n    StructureCanvasProps,\n    StructureCanvasState,\n} from '../../types/note';\nimport { getPointerPosition } from '../Canvas/util';\nimport StructureRect from './shape/StructureRect';\n\ninterface Parameters extends PageProps {\n    showCanvasNavigation: (props: StructureCanvasState) => void;\n    closeCanvasNavigation: VoidFunction;\n}\n\n/**\n * 背景のグリッド線の設定\n */\nconst defaultGridLineProps: fabric.ILineOptions = {\n    stroke: '#eee',\n    strokeWidth: 1,\n    // イベントに反応させない\n    evented: false,\n    hasControls: false,\n    selectable: false,\n    // 出力対象外\n    excludeFromExport: true,\n    // 消しゴムで消えないようにする\n    erasable: false,\n    data: {\n        type: 'background',\n        excludeExport: true,\n    },\n};\n\nclass PageManager {\n    public canvas: fabric.Canvas;\n    private _mode: NoteMode = 'edit';\n    private _readonly = false;\n\n    /**\n     * ページサイズ\n     */\n    private pageWidth = 0;\n    /**\n     * ページサイズ\n     */\n    private pageHeight = 0;\n\n    /**\n     * 背景グリッド線の感覚\n     */\n    private gridSize = 25;\n\n    /**\n     * 描画設定\n     */\n    private _settings: DrawSettings = defaultDrawSettings;\n\n    /**\n     * パンの可否\n     */\n    private enablePan = true;\n    /**\n     * ドラッグ中フラグ\n     */\n    private dragging = false;\n    /**\n     * ドラッグ時のポインタ位置\n     */\n    private lastPos: ShapePosition = { x: 0, y: 0 };\n\n    /**\n     * 構造データ\n     */\n    private structures: Record<string, StructureRect> = {};\n\n    /**\n     * 構造データのヘッダーメニュー表示メソッド\n     */\n    private showCanvasNavigation: (props: StructureCanvasState) => void;\n    /**\n     * 構造データのヘッダーメニューを閉じるメソッド\n     */\n    public closeCanvasNavigation: VoidFunction;\n\n    constructor(\n        canvasDom: HTMLCanvasElement,\n        {\n            size,\n            zoom,\n            viewport,\n            drawData,\n            structures,\n            showCanvasNavigation,\n            closeCanvasNavigation,\n        }: Parameters\n    ) {\n        this.canvas = new fabric.Canvas(canvasDom, {\n            selection: true,\n            isDrawingMode: false,\n            stopContextMenu: true,\n        });\n\n        this.canvas.setZoom(zoom);\n        this.canvas.setViewportTransform(viewport);\n\n        this.readonly = false;\n        this.mode = 'select';\n        const pageSize = PageSize[size];\n        this.pageHeight = pageSize.height;\n        this.pageWidth = pageSize.width;\n        this.gridSize = 25; // ひとまず固定で指定\n        this.showCanvasNavigation = showCanvasNavigation;\n        this.closeCanvasNavigation = closeCanvasNavigation;\n\n        // 背景のグリッド線を描画する\n        this.drawBackgroundGrid();\n\n        if (drawData) {\n            // 描画データが渡された場合は表示処理を行う\n            this.canvas.loadFromJSON(drawData, this.canvas.renderAll.bind(this.canvas));\n        }\n\n        // 構造データの配置\n        structures.forEach((structure) => {\n            const rect = new StructureRect(this, structure);\n            this.structures[structure.id] = rect;\n        });\n\n        // イベント割当\n        this.attachEvents();\n    }\n\n    // --- public properties ---\n\n    public get mode(): NoteMode {\n        return this._mode;\n    }\n\n    public set mode(value: NoteMode) {\n        this._mode = value;\n        // モード変更時の処理\n        this.canvas.selection = this._mode === 'select';\n        this.canvas.isDrawingMode = this._mode === 'edit';\n        this.enablePan = this._mode === 'select';\n    }\n\n    public get readonly(): boolean {\n        return this._readonly;\n    }\n\n    public set readonly(value: boolean) {\n        this._readonly = value;\n\n        this.canvas.isDrawingMode = value ? false : this._mode === 'edit';\n        this.canvas.selection = value ? false : this._mode === 'select';\n        // TODO: 読み取り専用時は完全に操作できないようにしたい\n    }\n\n    public get drawSettings(): DrawSettings {\n        return this._settings;\n    }\n\n    public set drawSettings(value: DrawSettings) {\n        // ブラシの設定を更新する\n        let brush = this.canvas.freeDrawingBrush;\n        if (!Boolean(brush) || this._settings.eraser !== value.eraser) {\n            // ブラシ未定義 あるいは 鉛筆と消しゴムを切り替えた場合は生成\n            if (value.eraser) {\n                // 消しゴム\n                brush = new fabric.EraserBrush(this.canvas);\n            } else {\n                // 鉛筆\n                brush = new fabric.PencilBrush(this.canvas);\n            }\n            this.canvas.freeDrawingBrush = brush;\n        }\n\n        const { stroke: color, strokeWidth: width } = value;\n        brush.color = color;\n        brush.width = width;\n\n        this._settings = { ...value };\n    }\n\n    /**\n     * 現在選択されている構造データを取得する\n     */\n    public get activeStructure(): StructureCanvasProps {\n        return defaultCanvasProps;\n    }\n\n    /**\n     * 構造データを更新する\n     */\n    public set activeStructure(props: StructureCanvasProps) {\n        const structure = this.structures[props.id];\n        if (structure) {\n            // 更新・再描画\n            structure.update(props);\n        }\n    }\n\n    // --- public methods ---\n\n    public save(): void {\n        // TODO: 描画内容を保存する\n    }\n\n    public load(): void {\n        // TODO: 描画内容を読み込む\n    }\n\n    public clear(): void {\n        // TODO: ノートの全クリア\n    }\n\n    public undo(): void {\n        // TODO: 実装\n    }\n\n    public redo(): void {\n        // TODO: 実装\n    }\n\n    public openCanvasNavigation(\n        canvasProps: StructureCanvasProps,\n        coordinates: ShapeCoordinates\n    ): void {\n        const params: StructureCanvasState = {\n            ...canvasProps,\n            coordinates,\n        };\n\n        this.showCanvasNavigation(params);\n    }\n\n    // --- private methods ---\n\n    /**\n     * 背景の描画\n     */\n    private drawBackgroundGrid() {\n        const lines: fabric.Line[] = [];\n\n        for (let y = 0; y <= this.pageHeight; y += this.gridSize) {\n            const hl = new fabric.Line([0, y, this.pageWidth, y], { ...defaultGridLineProps });\n            lines.push(hl);\n        }\n        for (let x = 0; x <= this.pageWidth; x += this.gridSize) {\n            const vl = new fabric.Line([x, 0, x, this.pageHeight], { ...defaultGridLineProps });\n            lines.push(vl);\n        }\n\n        this.canvas.add(...lines);\n    }\n\n    // --- events ---\n\n    private attachEvents(): void {\n        // イベント割当\n        this.canvas.on('mouse:down', this.onMouseDown.bind(this));\n        this.canvas.on('mouse:move', this.onMouseMove.bind(this));\n        this.canvas.on('mouse:up', this.onMouseUp.bind(this));\n        this.canvas.on('selection:created', this.onSelect.bind(this));\n        this.canvas.on('selection:updated', this.onSelect.bind(this));\n        this.canvas.on('selection:cleared', this.onDeselect.bind(this));\n        this.canvas.on('object:added', this.onCreateObject.bind(this));\n    }\n\n    private onSelect(): void {\n        this.enablePan = false;\n    }\n\n    private onDeselect(): void {\n        this.enablePan = this.mode === 'select';\n    }\n\n    private onMouseDown(event: fabric.IEvent<Event>): void {\n        if (this.enablePan) {\n            // ポインタ位置\n            const { clientX: x, clientY: y } = getPointerPosition(event);\n            // ドラッグ開始\n            this.canvas.selection = false; // 選択範囲の矩形を出さない\n            this.dragging = true;\n            this.lastPos = { x, y };\n        }\n    }\n\n    private onMouseMove(event: fabric.IEvent<Event>): void {\n        if (this.dragging) {\n            // ポインタ位置\n            const { clientX: x, clientY: y } = getPointerPosition(event);\n\n            const vpt = this.canvas.viewportTransform;\n            const zoom = this.canvas.getZoom();\n            const canvasWidth = this.canvas.getWidth();\n            const canvasHeight = this.canvas.getHeight();\n            if (vpt) {\n                let px = vpt[4];\n                let py = vpt[5];\n\n                // ページ幅がキャンバス幅に収まる\n                if (canvasWidth >= this.pageWidth * zoom) {\n                    px = canvasWidth / 2 - (this.pageHeight * zoom) / 2;\n                } else {\n                    px += x - this.lastPos.x;\n                    if (px >= 0) {\n                        px = 0;\n                    } else if (px < canvasWidth - this.pageWidth * zoom) {\n                        px = canvasWidth - this.pageWidth * zoom;\n                    }\n                }\n                // ページ高がキャンバス高に収まる\n                if (canvasHeight >= this.pageHeight * zoom) {\n                    py = canvasHeight / 2 - (this.pageHeight * zoom) / 2;\n                } else {\n                    py += y - this.lastPos.y;\n                    if (py >= 0) {\n                        py = 0;\n                    } else if (py < canvasHeight - this.pageHeight * zoom) {\n                        py = canvasHeight - this.pageHeight * zoom;\n                    }\n                }\n\n                vpt[4] = px;\n                vpt[5] = py;\n\n                this.canvas.requestRenderAll();\n            }\n\n            this.lastPos = { x, y };\n        }\n    }\n\n    private onMouseUp(): void {\n        if (this.dragging) {\n            const vpt = this.canvas.viewportTransform;\n            if (vpt) {\n                this.canvas.setViewportTransform(vpt);\n            }\n        }\n\n        // ドラッグ終了\n        this.dragging = false;\n        // 複数選択を可能にする\n        this.canvas.selection = this.mode === 'select';\n    }\n\n    /**\n     * 要素が追加されたとき\n     * @param event\n     */\n    private onCreateObject(event: fabric.IEvent<Event>): void {\n        // TODO: UNDO/REDO のための履歴管理\n    }\n\n    // --- dispose ---\n\n    /**\n     * 保持しているデータを破棄する\n     */\n    public dispose(): void {\n        console.log('dispose canvas.');\n        this.canvas.clear();\n        this.canvas.dispose();\n    }\n}\n\nexport default PageManager;\n","import CloseIcon from '@mui/icons-material/Close';\nimport EditIcon from '@mui/icons-material/Edit';\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport { Box, IconButton, Menu, MenuItem, styled } from '@mui/material';\nimport { MouseEvent, useCallback, useMemo, useState } from 'react';\nimport { AppMode } from '../../../types/common';\nimport { StructureCanvasState } from '../../../types/note';\n\ninterface Props extends StructureCanvasState {\n    mode: AppMode;\n    onEdit?: VoidFunction;\n    onCopy?: VoidFunction;\n    onDelete?: VoidFunction;\n    onCancel?: VoidFunction;\n}\n\nconst Background = styled('div')({\n    display: 'flex',\n    alignItems: 'center',\n    width: '100%',\n    padding: '0 8',\n});\nconst Spacer = styled('div')({\n    flex: 1,\n});\n\nconst CanvasNavigation: React.VFC<Props> = ({\n    mode,\n    coordinates,\n    width,\n    onEdit,\n    onCopy,\n    onDelete,\n    onCancel,\n}) => {\n    const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\n\n    const handleClickMore = useCallback((event: MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget);\n    }, []);\n    const handleCloseMenu = useCallback(() => {\n        setAnchorEl(null);\n    }, []);\n\n    const [top, left] = useMemo(() => {\n        let top = coordinates.tl.y - 34; // 34 はナビゲーションの高さ\n        const left = coordinates.tl.x;\n\n        if (top < 0) {\n            // ナビゲーションがキャンバスをはみ出す場合は\n            // 下側にナビゲーションを出す\n            top = coordinates.bl.y;\n        }\n\n        return [top, left];\n    }, [coordinates.bl.y, coordinates.tl.x, coordinates.tl.y]);\n\n    return (\n        <Box\n            sx={{\n                position: 'absolute',\n                top,\n                left,\n                width,\n            }}\n        >\n            <Background>\n                {mode === 'canvas' && (\n                    <IconButton size=\"small\" onClick={onCancel}>\n                        <CloseIcon />\n                    </IconButton>\n                )}\n                {mode === 'note' && (\n                    <>\n                        <IconButton size=\"small\" onClick={onEdit}>\n                            <EditIcon />\n                        </IconButton>\n                        <Spacer />\n                        <IconButton size=\"small\" onClick={handleClickMore}>\n                            <MoreVertIcon />\n                        </IconButton>\n                    </>\n                )}\n            </Background>\n            <Menu anchorEl={anchorEl} open={Boolean(anchorEl)} onClose={handleCloseMenu}>\n                <MenuItem onClick={onCopy}>コピー</MenuItem>\n                <MenuItem onClick={onDelete}>削除</MenuItem>\n            </Menu>\n        </Box>\n    );\n};\n\nexport default CanvasNavigation;\n","import {\n    forwardRef,\n    useCallback,\n    useEffect,\n    useImperativeHandle,\n    useLayoutEffect,\n    useRef,\n    useState,\n} from 'react';\nimport { AppMode } from '../../types/common';\nimport {\n    CommitStructureFunction,\n    DrawSettings,\n    NoteMode,\n    PageProps,\n    StructureCanvasProps,\n    StructureCanvasState,\n} from '../../types/note';\nimport PageManager from './manager';\nimport CanvasNavigation from './nav/CanvasNavigation';\n\ninterface Props extends PageProps {\n    mode: AppMode;\n    tool: NoteMode;\n    viewSize: DOMRect;\n    drawSettings: DrawSettings;\n    onEditCanvas?: (props: StructureCanvasState, callback: CommitStructureFunction) => void;\n    onCloseCanvas?: VoidFunction;\n}\n\ninterface PageHandler {\n    getActiveStructure: () => StructureCanvasProps | undefined;\n    setActiveStructure: (prosp: StructureCanvasProps) => void;\n}\n\nconst Page: React.ForwardRefRenderFunction<PageHandler, Props> = (\n    { mode, tool, viewSize, drawSettings, onEditCanvas, onCloseCanvas, ...props },\n    ref\n) => {\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    const managerRef = useRef<PageManager>();\n\n    const [canvasProps, setCanvasProps] = useState<StructureCanvasState>();\n\n    useImperativeHandle(ref, () => ({\n        getActiveStructure: () => {\n            if (managerRef.current) {\n                return managerRef.current.activeStructure;\n            }\n        },\n        setActiveStructure: (props: StructureCanvasProps) => {\n            if (managerRef.current) {\n                managerRef.current.activeStructure = props;\n            }\n        },\n    }));\n\n    /**\n     * 選択された構造データに編集メニューを表示する\n     */\n    const showCanvasNavigation = useCallback((params: StructureCanvasState) => {\n        setCanvasProps(params);\n    }, []);\n\n    /**\n     * 編集メニューを閉じる\n     */\n    const closeCanvasNavigation = useCallback(() => {\n        setCanvasProps(undefined);\n        onCloseCanvas && onCloseCanvas();\n    }, [onCloseCanvas]);\n\n    /**\n     * キャンバスの編集を開始する\n     */\n    const handleEdit = useCallback(() => {\n        if (onEditCanvas && canvasProps) {\n            onEditCanvas(canvasProps, (data) => {\n                if (managerRef.current) {\n                    managerRef.current.activeStructure = data;\n                }\n            });\n        }\n    }, [canvasProps, onEditCanvas]);\n\n    // 初期化\n    useLayoutEffect(() => {\n        if (canvasRef.current && viewSize.width !== 0 && viewSize.height !== 0) {\n            if (typeof managerRef.current === 'undefined') {\n                managerRef.current = new PageManager(canvasRef.current, {\n                    ...props,\n                    showCanvasNavigation,\n                    closeCanvasNavigation,\n                });\n            }\n        }\n    }, [closeCanvasNavigation, props, showCanvasNavigation, viewSize.height, viewSize.width]);\n\n    // AppMode が変更された場合\n    useEffect(() => {\n        if (managerRef.current) {\n            // キャンバスモード時は readonly とする\n            managerRef.current.readonly = mode === 'canvas';\n        }\n    }, [mode]);\n\n    // NoteMode (ツール) が変更された場合\n    useEffect(() => {\n        if (managerRef.current) {\n            managerRef.current.mode = tool;\n        }\n    }, [tool]);\n\n    // 描画ツールが変更された場合\n    useEffect(() => {\n        if (managerRef.current) {\n            managerRef.current.drawSettings = drawSettings;\n        }\n    }, [drawSettings]);\n\n    return (\n        <>\n            <canvas ref={canvasRef} width={viewSize.width} height={viewSize.height} />\n            {canvasProps && (\n                <CanvasNavigation\n                    mode={mode}\n                    {...canvasProps}\n                    onEdit={handleEdit}\n                    onCancel={closeCanvasNavigation}\n                />\n            )}\n        </>\n    );\n};\n\nexport default forwardRef(Page);\n","import { Box } from '@mui/material';\nimport { useContext, useEffect, useRef, useState } from 'react';\nimport { AppSettingsContext } from '../../providers/AppSettingsProvider';\nimport { NoteSettingsContext } from '../../providers/NoteSettingsProvider';\nimport { defaultPageProps } from '../../types/note';\nimport Page from './Page';\n\nconst Note: React.VFC = () => {\n    // キャンバスの親要素\n    const containerRef = useRef<HTMLDivElement>(null);\n    // 表示領域\n    const [viewSize, setViewSize] = useState<DOMRect>();\n\n    const { mode, editCanvas, closeCanvas } = useContext(AppSettingsContext);\n    const { mode: tool, settings } = useContext(NoteSettingsContext);\n\n    // 要素のリサイズを監視\n    useEffect(() => {\n        const observer = new ResizeObserver((entries) => {\n            const rect = entries[0].target.getBoundingClientRect();\n            setViewSize(rect);\n        });\n\n        if (containerRef.current) {\n            observer.observe(containerRef.current);\n        }\n\n        return () => {\n            observer.disconnect();\n        };\n    }, []);\n\n    return (\n        <Box\n            ref={containerRef}\n            sx={{\n                width: 'auto',\n                height: '100%',\n                backgroundColor: '#ffffff',\n                overscrollBehavior: 'contain',\n                overflow: 'hidden',\n            }}\n        >\n            {viewSize && (\n                <Page\n                    mode={mode}\n                    tool={tool}\n                    viewSize={viewSize}\n                    drawSettings={settings}\n                    onEditCanvas={editCanvas}\n                    onCloseCanvas={closeCanvas}\n                    {...defaultPageProps}\n                />\n            )}\n        </Box>\n    );\n};\n\nexport default Note;\n","import { Box } from '@mui/material';\nimport { useContext } from 'react';\nimport { AppSettingsContext } from '../providers/AppSettingsProvider';\nimport { ConfigurationContext } from '../providers/ConfigurationProvider';\nimport Canvas from './Canvas';\nimport Note from './Note';\n\nconst MainContainer: React.VFC = () => {\n    const { mode, canvasProps, canvasRef } = useContext(AppSettingsContext);\n    const { tool } = useContext(ConfigurationContext);\n\n    return (\n        <Box\n            sx={{\n                position: 'relative',\n                boxSizing: 'border-box',\n                ml: 1,\n                mb: 1,\n                flex: 1,\n                border: (theme) => `1px solid ${theme.palette.divider}`,\n                borderRadius: 1,\n                overflow: 'hidden',\n            }}\n        >\n            <Note />\n            {canvasProps && (\n                <Box\n                    sx={{\n                        position: 'absolute',\n                        top: canvasProps.coordinates.tl.y,\n                        left: canvasProps.coordinates.tl.x,\n                        width: canvasProps.width,\n                        height: canvasProps.height,\n                    }}\n                >\n                    <Canvas\n                        ref={canvasRef}\n                        tool={tool}\n                        readonly={mode === 'note'}\n                        {...canvasProps}\n                    />\n                </Box>\n            )}\n        </Box>\n    );\n};\n\nexport default MainContainer;\n","import { ArrowDownward, Delete, Edit, PanToolAlt, Texture } from '@mui/icons-material';\nimport { Stack, ToggleButton, ToggleButtonGroup, Typography } from '@mui/material';\nimport { MouseEvent, ReactElement, useCallback, useContext } from 'react';\nimport { ConfigurationContext } from '../../providers/ConfigurationProvider';\nimport { CanvasTool, isCanvasTool } from '../../types/common';\n\ninterface Props {\n    tool: CanvasTool;\n    onChange: (tool: CanvasTool) => void;\n}\n\ninterface ButtonProps {\n    tool: CanvasTool;\n    icon: ReactElement;\n    label: string;\n}\n\nconst ToolboxButtons: Readonly<Record<CanvasTool, ButtonProps>> = {\n    select: {\n        tool: 'select',\n        icon: <PanToolAlt />,\n        label: '選択',\n    },\n    pen: {\n        tool: 'pen',\n        icon: <Edit />,\n        label: '梁要素の描画',\n    },\n    force: {\n        tool: 'force',\n        icon: <ArrowDownward />,\n        label: '集中荷重の追加',\n    },\n    trapezoid: {\n        tool: 'trapezoid',\n        icon: <Texture />,\n        label: '分布荷重の追加',\n    },\n    delete: {\n        tool: 'delete',\n        icon: <Delete />,\n        label: '要素の削除',\n    },\n};\n\nconst CanvasToolboxCore: React.VFC<Props> = ({ tool, onChange }) => {\n    /**\n     * ツールの変更\n     */\n    const handleChange = useCallback(\n        (_: MouseEvent<HTMLElement>, newValue: string | null) => {\n            if (newValue !== null && isCanvasTool(newValue)) {\n                onChange(newValue);\n            }\n        },\n        [onChange]\n    );\n\n    return (\n        <Stack sx={{ width: 160 }} alignItems=\"flex-start\">\n            <Typography variant=\"caption\">Toolbox</Typography>\n            <ToggleButtonGroup\n                orientation=\"vertical\"\n                value={tool}\n                exclusive\n                fullWidth\n                onChange={handleChange}\n            >\n                {Object.entries(ToolboxButtons).map(([key, { icon, label }]) => (\n                    <ToggleButton\n                        key={key}\n                        value={key}\n                        sx={{ justifyContent: 'flex-start', alignItems: 'center' }}\n                    >\n                        {icon}\n                        <Typography variant=\"caption\" sx={{ ml: 1 }}>\n                            {label}\n                        </Typography>\n                    </ToggleButton>\n                ))}\n            </ToggleButtonGroup>\n        </Stack>\n    );\n};\n\nconst CanvasToolbox: React.VFC = () => {\n    const { tool, setTool } = useContext(ConfigurationContext);\n    return <CanvasToolboxCore tool={tool} onChange={setTool} />;\n};\n\nexport default CanvasToolbox;\n","import { AutoFixNormal, Edit, PanToolAlt } from '@mui/icons-material';\nimport {\n    Slider,\n    Stack,\n    TextField,\n    ToggleButton,\n    ToggleButtonGroup,\n    Typography,\n} from '@mui/material';\nimport {\n    ChangeEvent,\n    Dispatch,\n    MouseEvent,\n    ReactElement,\n    SetStateAction,\n    useCallback,\n    useContext,\n} from 'react';\nimport { NoteSettingsContext } from '../../providers/NoteSettingsProvider';\nimport { DrawSettings, isNoteMode, NoteMode } from '../../types/note';\n\ninterface Props {\n    mode: NoteMode;\n    settings: DrawSettings;\n    onChangeMode: Dispatch<SetStateAction<NoteMode>>;\n    onChangeDrawSettings: Dispatch<SetStateAction<DrawSettings>>;\n}\n\nconst DrawModes = ['pen', 'eraser'] as const;\ntype DrawMode = typeof DrawModes[number];\nconst isDrawMode = (item: unknown): item is DrawMode => {\n    if (typeof item === 'string') {\n        return DrawModes.some((mode) => mode === item);\n    }\n    return false;\n};\n\ninterface ButtonProps {\n    mode: NoteMode | DrawMode;\n    icon: ReactElement;\n    label: string;\n}\n\nconst NoteModeButtons: Readonly<Record<NoteMode, ButtonProps>> = {\n    select: {\n        mode: 'select',\n        icon: <PanToolAlt />,\n        label: '選択',\n    },\n    edit: {\n        mode: 'edit',\n        icon: <Edit />,\n        label: '描画',\n    },\n};\n\nconst DrawModeButtons: Readonly<Record<DrawMode, ButtonProps>> = {\n    pen: {\n        mode: 'pen',\n        icon: <Edit />,\n        label: 'ペンツール',\n    },\n    eraser: {\n        mode: 'eraser',\n        icon: <AutoFixNormal />,\n        label: '消しゴム',\n    },\n};\n\nconst MinStrokeWidth = 1;\nconst MaxStrokeWidth = 20;\nconst StrokeWidthStep = 1;\n\nconst NoteToolboxCore: React.VFC<Props> = ({\n    mode,\n    settings,\n    onChangeMode,\n    onChangeDrawSettings,\n}) => {\n    /**\n     * モードの変更\n     */\n    const handleChangeMode = useCallback(\n        (_: MouseEvent<HTMLElement>, newValue: string | null) => {\n            if (newValue !== null && isNoteMode(newValue)) {\n                onChangeMode(newValue);\n            }\n        },\n        [onChangeMode]\n    );\n\n    /**\n     * 描画ツールの選択\n     */\n    const handleChangeTool = useCallback(\n        (_: MouseEvent<HTMLElement>, newValue: string | null) => {\n            if (newValue !== null && isDrawMode(newValue)) {\n                onChangeDrawSettings((state) => ({\n                    ...state,\n                    eraser: newValue === 'eraser',\n                }));\n            }\n        },\n        [onChangeDrawSettings]\n    );\n\n    const handleChangeStrokeWidth = useCallback(\n        (_: Event, value: number | number[]) => {\n            if (typeof value === 'number') {\n                onChangeDrawSettings((state) => ({\n                    ...state,\n                    strokeWidth: value,\n                }));\n            }\n        },\n        [onChangeDrawSettings]\n    );\n\n    const handleChangeStroke = useCallback(\n        (event: ChangeEvent<HTMLInputElement>) => {\n            if (event.target.checkValidity()) {\n                const { value } = event.target;\n                onChangeDrawSettings((state) => ({\n                    ...state,\n                    stroke: value,\n                }));\n            }\n        },\n        [onChangeDrawSettings]\n    );\n\n    return (\n        <Stack sx={{ width: 160 }} alignItems=\"flex-start\">\n            <Typography variant=\"caption\">Toolbox</Typography>\n            {/* 選択 / 編集の切り替え */}\n            <ToggleButtonGroup\n                orientation=\"vertical\"\n                value={mode}\n                exclusive\n                fullWidth\n                onChange={handleChangeMode}\n            >\n                {Object.entries(NoteModeButtons).map(([key, { icon, label }]) => (\n                    <ToggleButton\n                        key={key}\n                        value={key}\n                        sx={{ justifyContent: 'flex-start', alignItems: 'center' }}\n                    >\n                        {icon}\n                        <Typography variant=\"caption\" sx={{ ml: 1 }}>\n                            {label}\n                        </Typography>\n                    </ToggleButton>\n                ))}\n            </ToggleButtonGroup>\n            <Typography variant=\"caption\" sx={{ mt: 1 }}>\n                描画ツール\n            </Typography>\n            {/* eraser */}\n            <ToggleButtonGroup\n                orientation=\"vertical\"\n                value={settings.eraser ? 'eraser' : 'pen'}\n                exclusive\n                fullWidth\n                disabled={mode !== 'edit'}\n                onChange={handleChangeTool}\n            >\n                {Object.entries(DrawModeButtons).map(([key, { icon, label }]) => (\n                    <ToggleButton\n                        key={key}\n                        value={key}\n                        sx={{ justifyContent: 'flex-start', alignItems: 'center' }}\n                    >\n                        {icon}\n                        <Typography variant=\"caption\" sx={{ ml: 1 }}>\n                            {label}\n                        </Typography>\n                    </ToggleButton>\n                ))}\n            </ToggleButtonGroup>\n            {/* strokeWidth */}\n            <Typography variant=\"caption\" sx={{ mt: 1 }}>\n                太さ\n            </Typography>\n            <Slider\n                sx={{ ml: 1, mb: 2, boxSizing: 'border-box', width: 140 }}\n                value={settings.strokeWidth}\n                min={MinStrokeWidth}\n                max={MaxStrokeWidth}\n                step={StrokeWidthStep}\n                valueLabelDisplay=\"auto\"\n                disabled={mode !== 'edit'}\n                onChange={handleChangeStrokeWidth}\n            />\n            {/* stroke */}\n            <TextField\n                type=\"color\"\n                label=\"ペンの色\"\n                value={settings.stroke}\n                disabled={mode !== 'edit' || settings.eraser}\n                fullWidth\n                margin=\"dense\"\n                size=\"small\"\n                onChange={handleChangeStroke}\n            />\n        </Stack>\n    );\n};\n\nconst NoteToolbox: React.VFC = () => {\n    const props = useContext(NoteSettingsContext);\n    return <NoteToolboxCore {...props} />;\n};\n\nexport default NoteToolbox;\n","import { useContext } from 'react';\nimport { AppSettingsContext } from '../../providers/AppSettingsProvider';\nimport CanvasToolbox from './CanvasToolbox';\nimport NoteToolbox from './NoteToolbox';\n\nconst Toolbox: React.VFC = () => {\n    const { mode } = useContext(AppSettingsContext);\n    if (mode === 'canvas') {\n        return <CanvasToolbox />;\n    }\n    return <NoteToolbox />;\n};\n\nexport default Toolbox;\n","import { Box } from '@mui/material';\nimport { useCallback, useEffect, useState } from 'react';\nimport { DOMSize } from '../types/common';\nimport Header from './Header';\nimport MainContainer from './MainContainer';\nimport Toolbox from './Toolbox';\n\nconst Layout: React.VFC = () => {\n    const [windowRect, setWindowRect] = useState<DOMSize>({ width: 0, height: 0 });\n\n    const fitWindowSize = useCallback(() => {\n        const { innerHeight, innerWidth } = window;\n        setWindowRect({\n            height: innerHeight,\n            width: innerWidth,\n        });\n    }, []);\n\n    useEffect(() => {\n        fitWindowSize();\n        window.addEventListener('resize', fitWindowSize);\n\n        return () => {\n            window.removeEventListener('resize', fitWindowSize);\n        };\n    }, [fitWindowSize]);\n\n    return (\n        <Box sx={{ ...windowRect, overflow: 'hidden' }}>\n            <Header />\n            <Box\n                sx={{\n                    boxSizing: 'border-box',\n                    width: 'auto',\n                    height: 'calc(100% - 48px)',\n                    display: 'flex',\n                    flexDirection: 'row',\n                    flexWrap: 'nowrap',\n                    alignItems: 'stretch',\n                    pt: 1,\n                    px: 1,\n                }}\n            >\n                <Toolbox />\n                <MainContainer />\n            </Box>\n        </Box>\n    );\n};\n\nexport default Layout;\n","import { createTheme, CssBaseline, ThemeProvider } from '@mui/material';\nimport React from 'react';\nimport AppSettingsProvider from '../providers/AppSettingsProvider';\nimport ConfigurationProvider from '../providers/ConfigurationProvider';\nimport NoteSettingsProvider from '../providers/NoteSettingsProvider';\nimport Layout from './Layout';\n\nconst theme = createTheme();\n\nconst App: React.VFC = () => {\n    return (\n        <ThemeProvider theme={theme}>\n            <AppSettingsProvider>\n                <ConfigurationProvider>\n                    <NoteSettingsProvider>\n                        <CssBaseline />\n                        <Layout />\n                    </NoteSettingsProvider>\n                </ConfigurationProvider>\n            </AppSettingsProvider>\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}