{"version":3,"sources":["providers/ConfigurationProvider.tsx","types/shape.ts","components/Canvas/util/common.ts","components/Canvas/util/structure.ts","components/Canvas/hook/draw.ts","components/Canvas/layer/DrawLayer.tsx","components/Canvas/provider/StructureProvider.tsx","components/Canvas/layer/GridLayer.tsx","components/Canvas/shape/Beam.tsx","components/Canvas/shape/Force.tsx","components/Canvas/util/vector.ts","components/Canvas/shape/Node.tsx","components/Canvas/layer/ShapeLayer.tsx","components/Canvas/core.tsx","components/Canvas/index.tsx","components/CanvasContainer.tsx","components/Header.tsx","types/common.ts","components/Toolbox/index.tsx","components/Layout.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["ConfigurationContext","createContext","undefined","ConfigurationProvider","children","useState","tool","setTool","Provider","value","emptyStructure","unit","force","length","nodes","beams","forces","trapezoids","clone","data","JSON","parse","stringify","round","figure","n","result","Math","createNode","x","y","id","uuid","useDraw","disabled","structure","setStructure","points","setPoints","isDrawing","useRef","handlePointerDown","useCallback","event","point","target","getStage","getPointerPosition","current","handlePointerMove","state","handlePointerUp","start","slice","end","nodeI","nodeJ","push","beam","name","createBeam","useEffect","onPointerDown","onPointerMove","onPointerUp","DrawLayer","strokeWidth","stroke","StructureContext","StructureProvider","size","useMemo","map","forEach","node","item","items","average","reduce","p","c","forceRatio","addForce","params","createForce","defaultLineProps","dash","listening","GridLayer","useContext","horizontalLines","lines","count","height","width","verticalLines","props","Beam","viRef","Vector","vjRef","handleClick","vp","vi","vj","beamLength","distance","distanceI","createForceParams","cancelBubble","onClick","onTap","Force","tail","v1","v2","alpha","dir","subtract","normalize","mv","multiplyScalar","add","lerp","vertical","verticalNormalizeVector","head","pointerLength","pointerWidth","fill","Node","draggable","onChange","isDragging","setIsDragging","pointRef","redraw","handleDragStart","handleDragMove","handleDragEnd","timer","setInterval","clearInterval","radius","onDragStart","onDragMove","onDragEnd","ShapeLayer","handleChangeNode","find","Object","entries","key","Boolean","CanvasCore","readonly","handlers","Canvas","setSize","containerRef","observer","ResizeObserver","contentRect","observe","disconnect","Box","ref","sx","backgroundColor","overscrollBehavior","CanvasContainer","boxSizing","ml","mb","flex","border","theme","palette","divider","borderRadius","overflow","Header","AppBar","position","Toolbar","variant","Typography","component","color","CanvasTools","ToolboxButtons","select","icon","PanToolAlt","label","pen","Edit","ArrowDownward","trapezoid","Texture","ToolboxCore","handleChange","_","newValue","some","Stack","alignItems","ToggleButtonGroup","orientation","exclusive","fullWidth","ToggleButton","justifyContent","Toolbox","Layout","windowRect","setWindowRect","fitWindowSize","window","innerHeight","innerWidth","addEventListener","removeEventListener","display","flexDirection","flexWrap","pt","px","createTheme","App","ThemeProvider","CssBaseline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.893871ad.chunk.js","sourcesContent":["import { createContext, useState } from 'react';\nimport { CanvasTool } from '../types/common';\n\ninterface Props {\n    children: React.ReactNode;\n}\n\ninterface IConfigurationContext {\n    tool: CanvasTool;\n    setTool: (tool: CanvasTool) => void;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nexport const ConfigurationContext = createContext<IConfigurationContext>(undefined!);\n\nconst ConfigurationProvider: React.VFC<Props> = ({ children }) => {\n    const [tool, setTool] = useState<CanvasTool>('select');\n\n    return (\n        <ConfigurationContext.Provider value={{ tool, setTool }}>\n            {children}\n        </ConfigurationContext.Provider>\n    );\n};\n\nexport default ConfigurationProvider;\n","/**\n * 単位: 力\n */\nexport const ForceUnitValues = ['N', 'kN'] as const;\n\n/**\n * 単位: 長さ\n */\nexport const LengthUnitValues = ['mm', 'cm', 'm'] as const;\n\nexport type ForceUnitType = typeof ForceUnitValues[number];\nexport type LengthUnitType = typeof LengthUnitValues[number];\n\n/**\n * 単位\n */\nexport interface Unit {\n    force: ForceUnitType;\n    length: LengthUnitType;\n}\n\nexport interface Node {\n    id: string;\n    x: number;\n    y: number;\n}\n\nexport interface Beam {\n    id: string;\n    name: string;\n    nodeI: string;\n    nodeJ: string;\n}\n\nexport interface Force {\n    id: string;\n    name: string;\n    beam: string;\n    force: number;\n    // i端からの距離 (0 〜 1)\n    distanceI: number;\n}\n\nexport interface Trapezoid {\n    id: string;\n    name: string;\n    beam: string;\n    forceI: number;\n    forceJ: number;\n    // i端からの距離 (0 〜 1, distanceI + distanceJ <= 1)\n    distanceI: number;\n    // j端からの距離 (0 〜 1, distanceI + distanceJ <= 1)\n    distanceJ: number;\n}\n\nexport interface Structure {\n    unit: Unit;\n    nodes: Node[];\n    beams: Beam[];\n    forces: Force[];\n    trapezoids: Trapezoid[];\n}\n\nexport type StructureFieldType = keyof Omit<Structure, 'unit'>;\n\nexport const defaultUnit: Unit = {\n    force: 'kN',\n    length: 'm',\n};\n\nexport const emptyStructure: Structure = {\n    unit: defaultUnit,\n    nodes: [],\n    beams: [],\n    forces: [],\n    trapezoids: [],\n};\n","export const clone = <T>(data: T): T => {\n    return JSON.parse(JSON.stringify(data)) as T;\n};\n\nexport const round = (value: number, figure = 3): number => {\n    const n = 10 ** figure;\n    const result = Math.round(value * n) / n;\n    return result;\n};\n","import { v4 as uuid } from 'uuid';\nimport { Beam, Force, Node } from '../../../types/shape';\n\nexport const createNode = (x: number, y: number): Node => {\n    return {\n        id: uuid(),\n        x,\n        y,\n    };\n};\n\nexport const createBeam = (name: string, nodeI: string, nodeJ: string): Beam => {\n    return {\n        id: uuid(),\n        name,\n        nodeI,\n        nodeJ,\n    };\n};\n\ntype CreateForceParams = Omit<Force, 'id'>;\n\nexport const createForce = (params: CreateForceParams): Force => {\n    return {\n        ...params,\n        id: uuid(),\n    };\n};\n","import { KonvaEventObject } from 'konva/lib/Node';\nimport { Dispatch, SetStateAction, useCallback, useEffect, useRef, useState } from 'react';\nimport { Structure } from '../../../types/shape';\nimport { createBeam, createNode } from '../util';\n\ninterface StageEventHandlers {\n    onPointerDown: (event: KonvaEventObject<PointerEvent>) => void;\n    onPointerMove: (event: KonvaEventObject<PointerEvent>) => void;\n    onPointerUp: (event: KonvaEventObject<PointerEvent>) => void;\n}\n\ninterface HookProps {\n    disabled?: boolean;\n    structure: Structure;\n    setStructure?: Dispatch<SetStateAction<Structure>>;\n}\n\ninterface HookResponse extends StageEventHandlers {\n    points: number[];\n}\n\nexport const useDraw = ({ disabled = false, structure, setStructure }: HookProps): HookResponse => {\n    const [points, setPoints] = useState<number[]>([]);\n    const isDrawing = useRef(false);\n\n    const handlePointerDown = useCallback(\n        (event: KonvaEventObject<PointerEvent>) => {\n            if (disabled) {\n                return;\n            }\n\n            const point = event.target.getStage()?.getPointerPosition();\n            if (point) {\n                isDrawing.current = true;\n                setPoints([point.x, point.y]);\n            }\n        },\n        [disabled]\n    );\n\n    const handlePointerMove = useCallback(\n        (event: KonvaEventObject<PointerEvent>) => {\n            if (disabled) {\n                return;\n            }\n            if (!isDrawing.current) {\n                return;\n            }\n\n            const point = event.target.getStage()?.getPointerPosition();\n            if (point) {\n                isDrawing.current = true;\n                setPoints((state) => [...state, point.x, point.y]);\n            }\n        },\n        [disabled]\n    );\n\n    const handlePointerUp = useCallback(() => {\n        if (disabled) {\n            return;\n        }\n\n        isDrawing.current = false;\n\n        if (setStructure && points.length >= 4) {\n            const data = JSON.parse(JSON.stringify(structure)) as Structure;\n            // 開始点\n            const start = points.slice(0, 2);\n            // 終了点\n            const end = points.slice(-2);\n\n            const nodeI = createNode(start[0], start[1]);\n            const nodeJ = createNode(end[0], end[1]);\n            data.nodes.push(nodeI, nodeJ);\n\n            const name = `Beam_${data.beams.length + 1}`;\n            const beam = createBeam(name, nodeI.id, nodeJ.id);\n            data.beams.push(beam);\n\n            setStructure(data);\n            setPoints([]);\n        }\n    }, [disabled, points, setStructure, structure]);\n\n    useEffect(() => {\n        if (disabled) {\n            // 無効になったら描画中の線を消去\n            setPoints([]);\n        }\n    }, [disabled]);\n\n    return {\n        points,\n        onPointerDown: handlePointerDown,\n        onPointerMove: handlePointerMove,\n        onPointerUp: handlePointerUp,\n    };\n};\n","import { Layer, Line } from 'react-konva';\n\ninterface Props {\n    points: number[];\n}\n\nconst DrawLayer: React.VFC<Props> = ({ points }) => {\n    return (\n        <Layer>\n            <Line points={points} strokeWidth={3} stroke=\"blue\" />\n        </Layer>\n    );\n};\n\nexport default DrawLayer;\n","import { createContext, Dispatch, SetStateAction, useCallback, useMemo } from 'react';\nimport { CanvasTool, DOMSize } from '../../../types/common';\nimport { Force, Node, Structure } from '../../../types/shape';\nimport { BeamProps, ForceProps } from '../types';\nimport { clone, createForce } from '../util';\n\ninterface Props {\n    children: React.ReactNode;\n    size: DOMSize;\n    tool?: CanvasTool;\n    structure: Structure;\n    setStructure?: Dispatch<SetStateAction<Structure>>;\n}\n\ntype AddForceFunction = (params: Omit<Force, 'id' | 'name'>) => void;\n\ninterface IStructureContext {\n    // 選択されているツール\n    tool: CanvasTool;\n    // キャンバスのサイズ\n    size: DOMSize;\n    // 単位変換された構造データ\n    structure: Structure;\n    // Node の Map\n    nodes: Record<string, Node>;\n    // Beam の Map\n    beams: Record<string, BeamProps>;\n    // force の Map\n    forces: Record<string, ForceProps>;\n    // 集中荷重の追加\n    addForce: AddForceFunction;\n    // 構造データの更新\n    setStructure?: Dispatch<SetStateAction<Structure>>;\n}\n\n// Context | React TypeScript Cheatsheets\n// https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/context/\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nexport const StructureContext = createContext<IStructureContext>(undefined!);\n\nconst StructureProvider: React.VFC<Props> = ({\n    children,\n    tool = 'select',\n    size,\n    structure,\n    setStructure,\n}) => {\n    const nodes = useMemo(() => {\n        const map: Record<string, Node> = {};\n\n        structure.nodes.forEach((node) => {\n            map[node.id] = node;\n        });\n\n        return map;\n    }, [structure.nodes]);\n\n    const beams = useMemo(() => {\n        const map: Record<string, BeamProps> = {};\n\n        structure.beams.forEach(({ nodeI, nodeJ, ...beam }) => {\n            const item: BeamProps = {\n                ...beam,\n                nodeI: nodes[nodeI],\n                nodeJ: nodes[nodeJ],\n            };\n            map[beam.id] = item;\n        });\n\n        return map;\n    }, [nodes, structure.beams]);\n\n    const forces = useMemo(() => {\n        const { forces: items } = structure;\n        const map: Record<string, ForceProps> = {};\n\n        if (items.length > 0) {\n            const total = items.map((item) => item.force).reduce((p, c) => p + c);\n            const average = total / items.length;\n            items.forEach(({ beam, force: value, ...force }) => {\n                const forceRatio = value / average;\n                map[force.id] = {\n                    ...force,\n                    force: value,\n                    forceRatio,\n                    beam: beams[beam],\n                };\n            });\n        }\n\n        return map;\n    }, [beams, structure]);\n\n    const addForce = useCallback(\n        (params: Omit<Force, 'id' | 'name'>) => {\n            const data = clone(structure);\n            const name = `Force_${data.forces.length + 1}`;\n            const force = createForce({ name, ...params });\n            data.forces.push(force);\n            setStructure && setStructure(data);\n        },\n        [setStructure, structure]\n    );\n\n    return (\n        <StructureContext.Provider\n            value={{\n                tool,\n                size,\n                structure,\n                nodes,\n                beams,\n                forces,\n                addForce,\n                setStructure,\n            }}\n        >\n            {children}\n        </StructureContext.Provider>\n    );\n};\n\nexport default StructureProvider;\n","import { useContext, useMemo } from 'react';\nimport { Layer, Line } from 'react-konva';\nimport { StructureContext } from '../provider/StructureProvider';\n\nconst GridInterval = 25;\n\ninterface LineProps {\n    id: string;\n    points: number[];\n    stroke: string;\n    strokeWidth: number;\n    dash: [number, number];\n    listening: boolean;\n}\n\nconst defaultLineProps: LineProps = {\n    id: '',\n    points: [],\n    stroke: '#c9e1ff',\n    strokeWidth: 1,\n    dash: [5, 3],\n    listening: false,\n};\n\nconst GridLayer: React.VFC = () => {\n    const { size } = useContext(StructureContext);\n\n    const horizontalLines: LineProps[] = useMemo(() => {\n        const lines: LineProps[] = [];\n        let count = 1;\n        for (let y = 0; y <= size.height; y += GridInterval) {\n            lines.push({\n                ...defaultLineProps,\n                id: `Horizontal_${count}`,\n                points: [0, y, size.width, y],\n            });\n            count++;\n        }\n        return lines;\n    }, [size.height, size.width]);\n\n    const verticalLines: LineProps[] = useMemo(() => {\n        const lines: LineProps[] = [];\n        let count = 1;\n        for (let x = 0; x <= size.width; x += GridInterval) {\n            lines.push({\n                ...defaultLineProps,\n                id: `Vertical_${count}`,\n                points: [x, 0, x, size.height],\n            });\n            count++;\n        }\n        return lines;\n    }, [size.height, size.width]);\n\n    return (\n        <Layer listening={false}>\n            {/* horizontal */}\n            {horizontalLines.map((props) => (\n                <Line key={props.id} {...props} />\n            ))}\n            {/* vertical */}\n            {verticalLines.map((props) => (\n                <Line key={props.id} {...props} />\n            ))}\n        </Layer>\n    );\n};\n\nexport default GridLayer;\n","import { KonvaEventObject } from 'konva/lib/Node';\nimport { useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport { Line } from 'react-konva';\nimport { Force } from '../../../types/shape';\nimport { StructureContext } from '../provider/StructureProvider';\nimport { BeamProps } from '../types';\nimport { round, Vector } from '../util';\n\ntype Props = BeamProps;\n\nconst createForceParams = (\n    beam: string,\n    vi: Vector,\n    vj: Vector,\n    vp: Vector\n): Omit<Force, 'id' | 'name'> => {\n    const beamLength = vi.distance(vj);\n    // クリック位置までの距離\n    const distance = vi.distance(vp);\n\n    return {\n        beam,\n        force: 10, // TODO: どうやって指定する？\n        distanceI: round(distance / beamLength),\n    };\n};\n\nconst Beam: React.VFC<Props> = ({ id: beam, nodeI, nodeJ }) => {\n    const { tool, addForce } = useContext(StructureContext);\n    const [points, setPoints] = useState<number[]>([]);\n    const viRef = useRef<Vector>(new Vector(0, 0));\n    const vjRef = useRef<Vector>(new Vector(0, 0));\n\n    /**\n     * beam をクリックすると該当位置に集中荷重を追加する\n     */\n    const handleClick = useCallback(\n        (event: KonvaEventObject<MouseEvent>) => {\n            // クリック位置\n            const point = event.target.getStage()?.getPointerPosition();\n            if (point) {\n                // 集中荷重の追加モードの場合\n                if (tool === 'force') {\n                    const vp = new Vector(point.x, point.y);\n                    const force = createForceParams(beam, viRef.current, vjRef.current, vp);\n                    // 追加\n                    addForce(force);\n                    // イベントの伝播を止める\n                    event.cancelBubble = true;\n                }\n            }\n        },\n        [addForce, beam, tool]\n    );\n\n    useEffect(() => {\n        setPoints([nodeI.x, nodeI.y, nodeJ.x, nodeJ.y]);\n        viRef.current.x = nodeI.x;\n        viRef.current.y = nodeI.y;\n        vjRef.current.x = nodeJ.x;\n        vjRef.current.y = nodeJ.y;\n    }, [nodeI.x, nodeI.y, nodeJ.x, nodeJ.y]);\n\n    return (\n        <Line\n            points={points}\n            stroke=\"black\"\n            strokeWidth={3}\n            onClick={handleClick}\n            onTap={handleClick}\n        />\n    );\n};\n\nexport default Beam;\n","import { useMemo } from 'react';\nimport { Arrow } from 'react-konva';\nimport Vector from 'victor';\nimport { ForceProps } from '../types';\nimport { lerp, verticalNormalizeVector } from '../util';\n\ntype Props = ForceProps;\n\nconst BaseLength = 30;\n\nconst Force: React.VFC<Props> = ({ beam, distanceI, forceRatio }) => {\n    const points = useMemo(() => {\n        const { nodeI, nodeJ } = beam;\n\n        // i端、j端\n        const vi = new Vector(nodeI.x, nodeI.y);\n        const vj = new Vector(nodeJ.x, nodeJ.y);\n        // 矢印のお尻\n        const tail = lerp(vi, vj, distanceI);\n        // 梁に直交する単位ベクトル\n        const vertical = verticalNormalizeVector(vi, vj);\n        // 矢印の頭\n        const head = tail.clone().add(vertical.multiplyScalar(BaseLength * forceRatio));\n\n        return [head.x, head.y, tail.x, tail.y];\n    }, [beam, distanceI, forceRatio]);\n\n    return (\n        <Arrow\n            points={points}\n            pointerLength={6}\n            pointerWidth={6}\n            fill=\"orange\"\n            stroke=\"orange\"\n            strokeWidth={2}\n        />\n    );\n};\n\nexport default Force;\n","import Vector from 'victor';\n\nexport { Vector };\n\nexport const lerp = (v1: Vector, v2: Vector, alpha: number): Vector => {\n    const dir = v2.clone().subtract(v1).normalize();\n    const distance = v1.distance(v2);\n    const mv = dir.multiplyScalar(distance * alpha);\n    return v1.clone().add(mv);\n};\n\nexport const verticalNormalizeVector = (v1: Vector, v2: Vector): Vector => {\n    const dir = v2.clone().subtract(v1).normalize();\n    const v = new Vector(dir.y, dir.x * -1).normalize();\n    return v;\n};\n","import { KonvaEventObject } from 'konva/lib/Node';\nimport { Vector2d } from 'konva/lib/types';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { Circle } from 'react-konva';\nimport { Node as NodeProps } from '../../../types/shape';\n\ninterface Props extends NodeProps {\n    draggable?: boolean;\n    onChange: (node: NodeProps) => void;\n}\n\nconst DrawInterval = 100;\n\nconst Node: React.VFC<Props> = ({ id, x, y, draggable = false, onChange }) => {\n    const [isDragging, setIsDragging] = useState(false);\n    const pointRef = useRef<Vector2d>({ x, y });\n\n    const redraw = useCallback(() => {\n        if (draggable) {\n            const node = { id, x: pointRef.current.x, y: pointRef.current.y };\n            onChange(node);\n        }\n    }, [draggable, id, onChange]);\n\n    const handleDragStart = useCallback((event: KonvaEventObject<DragEvent>) => {\n        const point = event.target.getStage()?.getPointerPosition();\n        if (point) {\n            pointRef.current = point;\n            setIsDragging(true);\n        }\n    }, []);\n\n    const handleDragMove = useCallback((event: KonvaEventObject<DragEvent>) => {\n        const point = event.target.getStage()?.getPointerPosition();\n        if (point) {\n            pointRef.current = point;\n        }\n    }, []);\n\n    const handleDragEnd = useCallback((event: KonvaEventObject<DragEvent>) => {\n        const point = event.target.getStage()?.getPointerPosition();\n        if (point) {\n            pointRef.current = point;\n            setIsDragging(false);\n        }\n    }, []);\n\n    useEffect(() => {\n        let timer: NodeJS.Timer | undefined;\n        if (draggable) {\n            redraw();\n\n            if (isDragging) {\n                timer = setInterval(redraw, DrawInterval);\n            } else {\n                if (timer) {\n                    clearInterval(timer);\n                    timer = undefined;\n                }\n            }\n        }\n\n        return () => {\n            if (timer) {\n                clearInterval(timer);\n            }\n        };\n    }, [draggable, isDragging, redraw]);\n\n    return (\n        <Circle\n            id={id}\n            x={x}\n            y={y}\n            fill={isDragging ? 'blue' : 'black'}\n            radius={4}\n            draggable={draggable}\n            onDragStart={handleDragStart}\n            onDragMove={handleDragMove}\n            onDragEnd={handleDragEnd}\n        />\n    );\n};\n\nexport default Node;\n","import { useCallback, useContext } from 'react';\nimport { Layer } from 'react-konva';\nimport { Node as NodeProps } from '../../../types/shape';\nimport { StructureContext } from '../provider/StructureProvider';\nimport { Beam, Force, Node } from '../shape';\nimport { clone } from '../util';\n\nconst ShapeLayer: React.VFC = () => {\n    const { tool, nodes, beams, forces, setStructure } = useContext(StructureContext);\n\n    const handleChangeNode = useCallback(\n        ({ id, x, y }: NodeProps) => {\n            if (setStructure) {\n                setStructure((structure) => {\n                    const data = clone(structure);\n                    const node = data.nodes.find((item) => item.id === id);\n                    if (node) {\n                        node.x = x;\n                        node.y = y;\n                    }\n                    return data;\n                });\n            }\n        },\n        [setStructure]\n    );\n\n    return (\n        <Layer>\n            {Object.entries(beams).map(([key, beam]) => (\n                <Beam key={key} {...beam} />\n            ))}\n            {Object.entries(nodes).map(([key, node]) => (\n                <Node\n                    key={key}\n                    {...node}\n                    draggable={tool !== 'pen' && Boolean(setStructure)}\n                    onChange={handleChangeNode}\n                />\n            ))}\n            {Object.entries(forces).map(([key, force]) => (\n                <Force key={key} {...force} />\n            ))}\n        </Layer>\n    );\n};\n\nexport default ShapeLayer;\n","import { Dispatch, SetStateAction } from 'react';\nimport { Stage } from 'react-konva';\nimport { CanvasTool, DOMSize } from '../../types/common';\nimport { Structure } from '../../types/shape';\nimport { useDraw } from './hook/draw';\nimport DrawLayer from './layer/DrawLayer';\nimport GridLayer from './layer/GridLayer';\nimport ShapeLayer from './layer/ShapeLayer';\nimport StructureProvider from './provider/StructureProvider';\n\nexport interface CanvasProps {\n    tool: CanvasTool;\n    structure: Structure;\n    size: DOMSize;\n    readonly?: boolean;\n    setStructure?: Dispatch<SetStateAction<Structure>>;\n}\n\nconst CanvasCore: React.VFC<CanvasProps> = ({\n    tool,\n    structure,\n    size,\n    readonly = false,\n    setStructure,\n}) => {\n    const { points, ...handlers } = useDraw({\n        disabled: readonly || tool !== 'pen',\n        structure,\n        setStructure,\n    });\n\n    return (\n        <Stage width={size.width} height={size.height} {...handlers}>\n            <StructureProvider\n                size={size}\n                structure={structure}\n                tool={tool}\n                setStructure={setStructure}\n            >\n                <GridLayer />\n                <ShapeLayer />\n                <DrawLayer points={points} />\n            </StructureProvider>\n        </Stage>\n    );\n};\n\nexport default CanvasCore;\n","import { Box } from '@mui/material';\nimport { useEffect, useRef, useState } from 'react';\nimport { CanvasTool, DOMSize } from '../../types/common';\nimport CanvasCore, { CanvasProps } from './core';\n\ninterface Props extends Omit<CanvasProps, 'size' | 'tool'> {\n    tool?: CanvasTool;\n}\n\nconst Canvas: React.VFC<Props> = ({ tool = 'select', ...props }) => {\n    const [size, setSize] = useState<DOMSize>({ width: 0, height: 0 });\n    const containerRef = useRef<HTMLDivElement>(null);\n\n    // 要素のリサイズを監視\n    useEffect(() => {\n        const observer = new ResizeObserver((entries) => {\n            const { width, height } = entries[0].contentRect;\n            setSize({\n                width,\n                height,\n            });\n        });\n\n        if (containerRef.current) {\n            observer.observe(containerRef.current);\n        }\n\n        return () => {\n            observer.disconnect();\n        };\n    }, []);\n\n    return (\n        <Box\n            ref={containerRef}\n            sx={{\n                width: 'auto',\n                height: '100%',\n                backgroundColor: '#ffffff',\n                overscrollBehavior: 'contain',\n            }}\n        >\n            <CanvasCore size={size} tool={tool} {...props} />\n        </Box>\n    );\n};\n\nexport default Canvas;\n","import { Box } from '@mui/material';\nimport { useContext, useState } from 'react';\nimport { ConfigurationContext } from '../providers/ConfigurationProvider';\nimport { emptyStructure } from '../types/shape';\nimport Canvas from './Canvas';\n\nconst CanvasContainer: React.VFC = () => {\n    const { tool } = useContext(ConfigurationContext);\n    const [structure, setStructure] = useState(emptyStructure);\n\n    return (\n        <Box\n            sx={{\n                boxSizing: 'border-box',\n                ml: 1,\n                mb: 1,\n                flex: 1,\n                border: (theme) => `1px solid ${theme.palette.divider}`,\n                borderRadius: 1,\n                overflow: 'hidden',\n            }}\n        >\n            <Canvas tool={tool} structure={structure} setStructure={setStructure} />\n        </Box>\n    );\n};\n\nexport default CanvasContainer;\n","import { AppBar, Toolbar, Typography } from '@mui/material';\n\nconst Header: React.VFC = () => {\n    return (\n        <AppBar position=\"static\">\n            <Toolbar variant=\"dense\">\n                <Typography component=\"h1\" variant=\"h6\" color=\"inherit\">\n                    Drawing Sample\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    );\n};\n\nexport default Header;\n","export interface DOMSize {\n    width: number;\n    height: number;\n}\n\nexport const CanvasTools = ['select', 'pen', 'force', 'trapezoid'] as const;\nexport type CanvasTool = typeof CanvasTools[number];\nexport const isCanvasTool = (item: unknown): item is CanvasTool => {\n    if (typeof item === 'string') {\n        return CanvasTools.some((tool) => tool === item);\n    }\n    return false;\n};\n","import { ArrowDownward, Edit, PanToolAlt, Texture } from '@mui/icons-material';\nimport { Stack, ToggleButton, ToggleButtonGroup, Typography } from '@mui/material';\nimport { MouseEvent, ReactElement, useCallback, useContext } from 'react';\nimport { ConfigurationContext } from '../../providers/ConfigurationProvider';\nimport { CanvasTool, isCanvasTool } from '../../types/common';\n\ninterface Props {\n    tool: CanvasTool;\n    onChange: (tool: CanvasTool) => void;\n}\n\ninterface ButtonProps {\n    tool: CanvasTool;\n    icon: ReactElement;\n    label: string;\n}\n\nconst ToolboxButtons: Readonly<Record<CanvasTool, ButtonProps>> = {\n    select: {\n        tool: 'select',\n        icon: <PanToolAlt />,\n        label: '選択',\n    },\n    pen: {\n        tool: 'pen',\n        icon: <Edit />,\n        label: '梁要素の描画',\n    },\n    force: {\n        tool: 'force',\n        icon: <ArrowDownward />,\n        label: '集中荷重の追加',\n    },\n    trapezoid: {\n        tool: 'trapezoid',\n        icon: <Texture />,\n        label: '分布荷重の追加',\n    },\n};\n\nconst ToolboxCore: React.VFC<Props> = ({ tool, onChange }) => {\n    /**\n     * ツールの変更\n     */\n    const handleChange = useCallback(\n        (_: MouseEvent<HTMLElement>, newValue: string | null) => {\n            if (newValue !== null && isCanvasTool(newValue)) {\n                onChange(newValue);\n            }\n        },\n        [onChange]\n    );\n\n    return (\n        <Stack sx={{ width: 160 }} alignItems=\"flex-start\">\n            <Typography variant=\"caption\">Toolbox</Typography>\n            <ToggleButtonGroup\n                orientation=\"vertical\"\n                value={tool}\n                exclusive\n                fullWidth\n                onChange={handleChange}\n            >\n                {Object.entries(ToolboxButtons).map(([key, { icon, label }]) => (\n                    <ToggleButton\n                        key={key}\n                        value={key}\n                        sx={{ justifyContent: 'flex-start', alignItems: 'center' }}\n                    >\n                        {icon}\n                        <Typography variant=\"caption\" sx={{ ml: 1 }}>\n                            {label}\n                        </Typography>\n                    </ToggleButton>\n                ))}\n            </ToggleButtonGroup>\n        </Stack>\n    );\n};\n\nconst Toolbox: React.VFC = () => {\n    const { tool, setTool } = useContext(ConfigurationContext);\n    return <ToolboxCore tool={tool} onChange={setTool} />;\n};\n\nexport default Toolbox;\n","import { Box } from '@mui/material';\nimport { useCallback, useEffect, useState } from 'react';\nimport { DOMSize } from '../types/common';\nimport CanvasContainer from './CanvasContainer';\nimport Header from './Header';\nimport Toolbox from './Toolbox';\n\nconst Layout: React.VFC = () => {\n    const [windowRect, setWindowRect] = useState<DOMSize>({ width: 0, height: 0 });\n\n    const fitWindowSize = useCallback(() => {\n        const { innerHeight, innerWidth } = window;\n        setWindowRect({\n            height: innerHeight,\n            width: innerWidth,\n        });\n    }, []);\n\n    useEffect(() => {\n        fitWindowSize();\n        window.addEventListener('resize', fitWindowSize);\n\n        return () => {\n            window.removeEventListener('resize', fitWindowSize);\n        };\n    }, [fitWindowSize]);\n\n    return (\n        <Box sx={{ ...windowRect, overflow: 'hidden' }}>\n            <Header />\n            <Box\n                sx={{\n                    boxSizing: 'border-box',\n                    width: 'auto',\n                    height: 'calc(100% - 48px)',\n                    display: 'flex',\n                    flexDirection: 'row',\n                    flexWrap: 'nowrap',\n                    alignItems: 'stretch',\n                    pt: 1,\n                    px: 1,\n                }}\n            >\n                <Toolbox />\n                <CanvasContainer />\n            </Box>\n        </Box>\n    );\n};\n\nexport default Layout;\n","import { createTheme, CssBaseline, ThemeProvider } from '@mui/material';\nimport React from 'react';\nimport ConfigurationProvider from '../providers/ConfigurationProvider';\nimport Layout from './Layout';\n\nconst theme = createTheme();\n\nconst App: React.VFC = () => {\n    return (\n        <ThemeProvider theme={theme}>\n            <ConfigurationProvider>\n                <CssBaseline />\n                <Layout />\n            </ConfigurationProvider>\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}