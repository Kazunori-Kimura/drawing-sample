{"version":3,"sources":["providers/ConfigurationProvider.tsx","types/shape.ts","components/Canvas/util/common.ts","components/Canvas/util/structure.ts","components/Canvas/hook/draw.ts","components/Canvas/layer/DrawLayer.tsx","components/Canvas/provider/StructureProvider.tsx","components/Canvas/shape/Beam.tsx","components/Canvas/shape/Force.tsx","components/Canvas/util/vector.ts","components/Canvas/shape/Node.tsx","components/Canvas/layer/ShapeLayer.tsx","components/Canvas/core.tsx","components/Canvas/index.tsx","components/CanvasContainer.tsx","components/Header.tsx","types/common.ts","components/Toolbox/index.tsx","components/Layout.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["ConfigurationContext","createContext","undefined","ConfigurationProvider","children","useState","tool","setTool","Provider","value","emptyStructure","unit","force","length","nodes","beams","forces","trapezoids","round","figure","n","result","Math","createNode","x","y","id","uuid","useDraw","disabled","structure","onChange","points","setPoints","isDrawing","useRef","handlePointerDown","useCallback","event","point","target","getStage","getPointerPosition","current","handlePointerMove","state","handlePointerUp","data","JSON","parse","stringify","start","slice","end","nodeI","nodeJ","push","beam","name","createBeam","useEffect","onPointerDown","onPointerMove","onPointerUp","DrawLayer","strokeWidth","stroke","StructureContext","StructureProvider","source","useMemo","map","forEach","node","item","items","average","reduce","p","c","forceRatio","handleChange","payload","addForce","params","clone","createForce","setStructure","Beam","useContext","viRef","Vector","vjRef","handleClick","vp","vi","vj","beamLength","distance","distanceI","createForceParams","cancelBubble","onClick","onTap","Force","tail","v1","v2","alpha","dir","subtract","normalize","mv","multiplyScalar","add","lerp","vertical","verticalNormalizeVector","head","pointerLength","pointerWidth","fill","Node","radius","ShapeLayer","Object","entries","key","CanvasCore","size","readonly","handlers","width","height","Canvas","props","setSize","containerRef","observer","ResizeObserver","contentRect","observe","disconnect","Box","ref","sx","minHeight","backgroundColor","CanvasContainer","ml","mb","border","theme","palette","divider","borderRadius","overflow","Header","AppBar","position","Toolbar","variant","Typography","component","color","CanvasTools","ToolboxButtons","select","icon","PanToolAlt","label","pen","Edit","ArrowDownward","trapezoid","Texture","ToolboxCore","_","newValue","some","Stack","alignItems","ToggleButtonGroup","orientation","exclusive","fullWidth","ToggleButton","justifyContent","Toolbox","Layout","windowRect","setWindowRect","fitWindowSize","window","innerHeight","innerWidth","addEventListener","removeEventListener","display","flexDirection","flexWrap","pt","px","createTheme","App","ThemeProvider","CssBaseline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.89f060d5.chunk.js","sourcesContent":["import { createContext, useState } from 'react';\nimport { CanvasTool } from '../types/common';\n\ninterface Props {\n    children: React.ReactNode;\n}\n\ninterface IConfigurationContext {\n    tool: CanvasTool;\n    setTool: (tool: CanvasTool) => void;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nexport const ConfigurationContext = createContext<IConfigurationContext>(undefined!);\n\nconst ConfigurationProvider: React.VFC<Props> = ({ children }) => {\n    const [tool, setTool] = useState<CanvasTool>('select');\n\n    return (\n        <ConfigurationContext.Provider value={{ tool, setTool }}>\n            {children}\n        </ConfigurationContext.Provider>\n    );\n};\n\nexport default ConfigurationProvider;\n","/**\n * 単位: 力\n */\nexport const ForceUnitValues = ['N', 'kN'] as const;\n\n/**\n * 単位: 長さ\n */\nexport const LengthUnitValues = ['mm', 'cm', 'm'] as const;\n\nexport type ForceUnitType = typeof ForceUnitValues[number];\nexport type LengthUnitType = typeof LengthUnitValues[number];\n\n/**\n * 単位\n */\nexport interface Unit {\n    force: ForceUnitType;\n    length: LengthUnitType;\n}\n\nexport interface Node {\n    id: string;\n    x: number;\n    y: number;\n}\n\nexport interface Beam {\n    id: string;\n    name: string;\n    nodeI: string;\n    nodeJ: string;\n}\n\nexport interface Force {\n    id: string;\n    name: string;\n    beam: string;\n    force: number;\n    // i端からの距離 (0 〜 1)\n    distanceI: number;\n}\n\nexport interface Trapezoid {\n    id: string;\n    name: string;\n    beam: string;\n    forceI: number;\n    forceJ: number;\n    // i端からの距離 (0 〜 1, distanceI + distanceJ <= 1)\n    distanceI: number;\n    // j端からの距離 (0 〜 1, distanceI + distanceJ <= 1)\n    distanceJ: number;\n}\n\nexport interface Structure {\n    unit: Unit;\n    nodes: Node[];\n    beams: Beam[];\n    forces: Force[];\n    trapezoids: Trapezoid[];\n}\n\nexport type StructureFieldType = keyof Omit<Structure, 'unit'>;\n\nexport const defaultUnit: Unit = {\n    force: 'kN',\n    length: 'm',\n};\n\nexport const emptyStructure: Structure = {\n    unit: defaultUnit,\n    nodes: [],\n    beams: [],\n    forces: [],\n    trapezoids: [],\n};\n","export const clone = <T>(data: T): T => {\n    return JSON.parse(JSON.stringify(data)) as T;\n};\n\nexport const round = (value: number, figure = 3): number => {\n    const n = 10 ** figure;\n    const result = Math.round(value * n) / n;\n    return result;\n};\n","import { v4 as uuid } from 'uuid';\nimport { Beam, Force, Node } from '../../../types/shape';\n\nexport const createNode = (x: number, y: number): Node => {\n    return {\n        id: uuid(),\n        x,\n        y,\n    };\n};\n\nexport const createBeam = (name: string, nodeI: string, nodeJ: string): Beam => {\n    return {\n        id: uuid(),\n        name,\n        nodeI,\n        nodeJ,\n    };\n};\n\ntype CreateForceParams = Omit<Force, 'id'>;\n\nexport const createForce = (params: CreateForceParams): Force => {\n    return {\n        ...params,\n        id: uuid(),\n    };\n};\n","import { KonvaEventObject } from 'konva/lib/Node';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { Structure } from '../../../types/shape';\nimport { createBeam, createNode } from '../util';\n\ninterface StageEventHandlers {\n    onPointerDown: (event: KonvaEventObject<PointerEvent>) => void;\n    onPointerMove: (event: KonvaEventObject<PointerEvent>) => void;\n    onPointerUp: (event: KonvaEventObject<PointerEvent>) => void;\n}\n\ninterface HookProps {\n    disabled?: boolean;\n    structure: Structure;\n    onChange?: (structure: Structure) => void;\n}\n\ninterface HookResponse extends StageEventHandlers {\n    points: number[];\n}\n\nexport const useDraw = ({ disabled = false, structure, onChange }: HookProps): HookResponse => {\n    const [points, setPoints] = useState<number[]>([]);\n    const isDrawing = useRef(false);\n\n    const handlePointerDown = useCallback(\n        (event: KonvaEventObject<PointerEvent>) => {\n            if (disabled) {\n                return;\n            }\n\n            const point = event.target.getStage()?.getPointerPosition();\n            if (point) {\n                isDrawing.current = true;\n                setPoints([point.x, point.y]);\n            }\n        },\n        [disabled]\n    );\n\n    const handlePointerMove = useCallback(\n        (event: KonvaEventObject<PointerEvent>) => {\n            if (disabled) {\n                return;\n            }\n            if (!isDrawing.current) {\n                return;\n            }\n\n            const point = event.target.getStage()?.getPointerPosition();\n            if (point) {\n                isDrawing.current = true;\n                setPoints((state) => [...state, point.x, point.y]);\n            }\n        },\n        [disabled]\n    );\n\n    const handlePointerUp = useCallback(() => {\n        if (disabled) {\n            return;\n        }\n\n        isDrawing.current = false;\n\n        if (onChange && points.length >= 4) {\n            const data = JSON.parse(JSON.stringify(structure)) as Structure;\n            // 開始点\n            const start = points.slice(0, 2);\n            // 終了点\n            const end = points.slice(-2);\n\n            const nodeI = createNode(start[0], start[1]);\n            const nodeJ = createNode(end[0], end[1]);\n            data.nodes.push(nodeI, nodeJ);\n\n            const name = `Beam_${data.beams.length + 1}`;\n            const beam = createBeam(name, nodeI.id, nodeJ.id);\n            data.beams.push(beam);\n\n            onChange(data);\n            setPoints([]);\n        }\n    }, [disabled, onChange, points, structure]);\n\n    useEffect(() => {\n        if (disabled) {\n            // 無効になったら描画中の線を消去\n            setPoints([]);\n        }\n    }, [disabled]);\n\n    return {\n        points,\n        onPointerDown: handlePointerDown,\n        onPointerMove: handlePointerMove,\n        onPointerUp: handlePointerUp,\n    };\n};\n","import { Layer, Line } from 'react-konva';\n\ninterface Props {\n    points: number[];\n}\n\nconst DrawLayer: React.VFC<Props> = ({ points }) => {\n    return (\n        <Layer>\n            <Line points={points} strokeWidth={3} stroke=\"blue\" />\n        </Layer>\n    );\n};\n\nexport default DrawLayer;\n","import { createContext, useCallback, useMemo } from 'react';\nimport { CanvasTool } from '../../../types/common';\nimport { Force, Node, Structure } from '../../../types/shape';\nimport { BeamProps, ForceProps } from '../types';\nimport { clone, createForce } from '../util';\n\ninterface Props {\n    children: React.ReactNode;\n    tool?: CanvasTool;\n    structure: Structure;\n    onChange?: (structure: Structure) => void;\n}\n\ntype AddForceFunction = (params: Omit<Force, 'id' | 'name'>) => void;\n\ninterface IStructureContext {\n    // 選択されているツール\n    tool: CanvasTool;\n    // 単位変換された構造データ\n    structure: Structure;\n    // Node の Map\n    nodes: Record<string, Node>;\n    // Beam の Map\n    beams: Record<string, BeamProps>;\n    // force の Map\n    forces: Record<string, ForceProps>;\n    // 集中荷重の追加\n    addForce: AddForceFunction;\n    // 構造データの更新\n    setStructure: (structure: Structure) => void;\n}\n\n// Context | React TypeScript Cheatsheets\n// https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/context/\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nexport const StructureContext = createContext<IStructureContext>(undefined!);\n\nconst StructureProvider: React.VFC<Props> = ({\n    children,\n    tool = 'select',\n    structure: source,\n    onChange,\n}) => {\n    const structure = useMemo(() => {\n        // TODO: 単位変換\n        return source;\n    }, [source]);\n\n    const nodes = useMemo(() => {\n        const map: Record<string, Node> = {};\n\n        structure.nodes.forEach((node) => {\n            map[node.id] = node;\n        });\n\n        return map;\n    }, [structure.nodes]);\n\n    const beams = useMemo(() => {\n        const map: Record<string, BeamProps> = {};\n\n        structure.beams.forEach(({ nodeI, nodeJ, ...beam }) => {\n            const item: BeamProps = {\n                ...beam,\n                nodeI: nodes[nodeI],\n                nodeJ: nodes[nodeJ],\n            };\n            map[beam.id] = item;\n        });\n\n        return map;\n    }, [nodes, structure.beams]);\n\n    const forces = useMemo(() => {\n        const { forces: items } = structure;\n        const map: Record<string, ForceProps> = {};\n\n        if (items.length > 0) {\n            const total = items.map((item) => item.force).reduce((p, c) => p + c);\n            const average = total / items.length;\n            items.forEach(({ beam, force: value, ...force }) => {\n                const forceRatio = value / average;\n                map[force.id] = {\n                    ...force,\n                    force: value,\n                    forceRatio,\n                    beam: beams[beam],\n                };\n            });\n        }\n\n        return map;\n    }, [beams, structure]);\n\n    const handleChange = useCallback(\n        (payload: Structure) => {\n            // TODO: 単位を元に戻す\n            onChange && onChange(payload);\n        },\n        [onChange]\n    );\n\n    const addForce = useCallback(\n        (params: Omit<Force, 'id' | 'name'>) => {\n            const data = clone(structure);\n            const name = `Force_${data.forces.length + 1}`;\n            const force = createForce({ name, ...params });\n            data.forces.push(force);\n            handleChange(data);\n        },\n        [handleChange, structure]\n    );\n\n    return (\n        <StructureContext.Provider\n            value={{\n                tool,\n                structure,\n                nodes,\n                beams,\n                forces,\n                addForce,\n                setStructure: handleChange,\n            }}\n        >\n            {children}\n        </StructureContext.Provider>\n    );\n};\n\nexport default StructureProvider;\n","import { KonvaEventObject } from 'konva/lib/Node';\nimport { useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport { Line } from 'react-konva';\nimport { Force } from '../../../types/shape';\nimport { StructureContext } from '../provider/StructureProvider';\nimport { BeamProps } from '../types';\nimport { round, Vector } from '../util';\n\ntype Props = BeamProps;\n\nconst createForceParams = (\n    beam: string,\n    vi: Vector,\n    vj: Vector,\n    vp: Vector\n): Omit<Force, 'id' | 'name'> => {\n    const beamLength = vi.distance(vj);\n    // クリック位置までの距離\n    const distance = vi.distance(vp);\n\n    return {\n        beam,\n        force: 10, // TODO: どうやって指定する？\n        distanceI: round(distance / beamLength),\n    };\n};\n\nconst Beam: React.VFC<Props> = ({ id: beam, nodeI, nodeJ }) => {\n    const { tool, addForce } = useContext(StructureContext);\n    const [points, setPoints] = useState<number[]>([]);\n    const viRef = useRef<Vector>(new Vector(0, 0));\n    const vjRef = useRef<Vector>(new Vector(0, 0));\n\n    /**\n     * beam をクリックすると該当位置に集中荷重を追加する\n     */\n    const handleClick = useCallback(\n        (event: KonvaEventObject<MouseEvent>) => {\n            // クリック位置\n            const point = event.target.getStage()?.getPointerPosition();\n            if (point) {\n                // 集中荷重の追加モードの場合\n                if (tool === 'force') {\n                    const vp = new Vector(point.x, point.y);\n                    const force = createForceParams(beam, viRef.current, vjRef.current, vp);\n                    // 追加\n                    addForce(force);\n                    // イベントの伝播を止める\n                    event.cancelBubble = true;\n                }\n            }\n        },\n        [addForce, beam, tool]\n    );\n\n    useEffect(() => {\n        setPoints([nodeI.x, nodeI.y, nodeJ.x, nodeJ.y]);\n        viRef.current.x = nodeI.x;\n        viRef.current.y = nodeI.y;\n        vjRef.current.x = nodeJ.x;\n        vjRef.current.y = nodeJ.y;\n    }, [nodeI.x, nodeI.y, nodeJ.x, nodeJ.y]);\n\n    return (\n        <Line\n            points={points}\n            stroke=\"black\"\n            strokeWidth={3}\n            onClick={handleClick}\n            onTap={handleClick}\n        />\n    );\n};\n\nexport default Beam;\n","import { useMemo } from 'react';\nimport { Arrow } from 'react-konva';\nimport Vector from 'victor';\nimport { ForceProps } from '../types';\nimport { lerp, verticalNormalizeVector } from '../util';\n\ntype Props = ForceProps;\n\nconst BaseLength = 30;\n\nconst Force: React.VFC<Props> = ({ beam, distanceI, forceRatio }) => {\n    const points = useMemo(() => {\n        const { nodeI, nodeJ } = beam;\n\n        // i端、j端\n        const vi = new Vector(nodeI.x, nodeI.y);\n        const vj = new Vector(nodeJ.x, nodeJ.y);\n        // 矢印のお尻\n        const tail = lerp(vi, vj, distanceI);\n        // 梁に直交する単位ベクトル\n        const vertical = verticalNormalizeVector(vi, vj);\n        // 矢印の頭\n        const head = tail.clone().add(vertical.multiplyScalar(BaseLength * forceRatio));\n\n        return [head.x, head.y, tail.x, tail.y];\n    }, [beam, distanceI, forceRatio]);\n\n    return (\n        <Arrow\n            points={points}\n            pointerLength={6}\n            pointerWidth={6}\n            fill=\"orange\"\n            stroke=\"orange\"\n            strokeWidth={2}\n        />\n    );\n};\n\nexport default Force;\n","import Vector from 'victor';\n\nexport { Vector };\n\nexport const lerp = (v1: Vector, v2: Vector, alpha: number): Vector => {\n    const dir = v2.clone().subtract(v1).normalize();\n    const distance = v1.distance(v2);\n    const mv = dir.multiplyScalar(distance * alpha);\n    return v1.clone().add(mv);\n};\n\nexport const verticalNormalizeVector = (v1: Vector, v2: Vector): Vector => {\n    const dir = v2.clone().subtract(v1).normalize();\n    const v = new Vector(dir.y, dir.x * -1).normalize();\n    return v;\n};\n","import { Circle } from 'react-konva';\nimport { Node as NodeProps } from '../../../types/shape';\n\ntype Props = NodeProps;\n\nconst Node: React.VFC<Props> = ({ x, y }) => {\n    return <Circle x={x} y={y} fill=\"black\" radius={4} />;\n};\n\nexport default Node;\n","import { useContext } from 'react';\nimport { Layer } from 'react-konva';\nimport { StructureContext } from '../provider/StructureProvider';\nimport { Beam, Force, Node } from '../shape';\n\nconst ShapeLayer: React.VFC = () => {\n    const { nodes, beams, forces } = useContext(StructureContext);\n\n    return (\n        <Layer>\n            {Object.entries(nodes).map(([key, node]) => (\n                <Node key={key} {...node} />\n            ))}\n            {Object.entries(beams).map(([key, beam]) => (\n                <Beam key={key} {...beam} />\n            ))}\n            {Object.entries(forces).map(([key, force]) => (\n                <Force key={key} {...force} />\n            ))}\n        </Layer>\n    );\n};\n\nexport default ShapeLayer;\n","import { Stage } from 'react-konva';\nimport { CanvasTool, DOMSize } from '../../types/common';\nimport { Structure } from '../../types/shape';\nimport { useDraw } from './hook/draw';\nimport DrawLayer from './layer/DrawLayer';\nimport ShapeLayer from './layer/ShapeLayer';\nimport StructureProvider from './provider/StructureProvider';\n\nexport interface CanvasProps {\n    tool: CanvasTool;\n    structure: Structure;\n    size: DOMSize;\n    readonly?: boolean;\n    onChange?: (structure: Structure) => void;\n}\n\nconst CanvasCore: React.VFC<CanvasProps> = ({\n    tool,\n    structure,\n    size,\n    readonly = false,\n    onChange,\n}) => {\n    const { points, ...handlers } = useDraw({\n        disabled: readonly || tool !== 'pen',\n        structure,\n        onChange,\n    });\n\n    return (\n        <Stage width={size.width} height={size.height} {...handlers}>\n            <StructureProvider structure={structure} tool={tool} onChange={onChange}>\n                <ShapeLayer />\n                <DrawLayer points={points} />\n            </StructureProvider>\n        </Stage>\n    );\n};\n\nexport default CanvasCore;\n","import { Box } from '@mui/material';\nimport { useEffect, useRef, useState } from 'react';\nimport { CanvasTool, DOMSize } from '../../types/common';\nimport CanvasCore, { CanvasProps } from './core';\n\ninterface Props extends Omit<CanvasProps, 'size' | 'tool'> {\n    tool?: CanvasTool;\n}\n\nconst Canvas: React.VFC<Props> = ({ tool = 'select', ...props }) => {\n    const [size, setSize] = useState<DOMSize>({ width: 0, height: 0 });\n    const containerRef = useRef<HTMLDivElement>(null);\n\n    // 要素のリサイズを監視\n    useEffect(() => {\n        const observer = new ResizeObserver((entries) => {\n            const { width, height } = entries[0].contentRect;\n            setSize({\n                width,\n                height,\n            });\n        });\n\n        if (containerRef.current) {\n            observer.observe(containerRef.current);\n        }\n\n        return () => {\n            observer.disconnect();\n        };\n    }, []);\n\n    return (\n        <Box\n            ref={containerRef}\n            sx={{ width: '100%', minHeight: '100%', backgroundColor: '#ffffff' }}\n        >\n            <CanvasCore size={size} tool={tool} {...props} />\n        </Box>\n    );\n};\n\nexport default Canvas;\n","import { Box } from '@mui/material';\nimport { useContext, useState } from 'react';\nimport { ConfigurationContext } from '../providers/ConfigurationProvider';\nimport { emptyStructure } from '../types/shape';\nimport Canvas from './Canvas';\n\nconst CanvasContainer: React.VFC = () => {\n    const { tool } = useContext(ConfigurationContext);\n    const [structure, setStructure] = useState(emptyStructure);\n\n    return (\n        <Box\n            sx={{\n                ml: 1,\n                mb: 1,\n                width: 'calc(100vw - 160px)',\n                border: (theme) => `1px solid ${theme.palette.divider}`,\n                borderRadius: 1,\n                overflow: 'hidden',\n            }}\n        >\n            <Canvas tool={tool} structure={structure} onChange={setStructure} />\n        </Box>\n    );\n};\n\nexport default CanvasContainer;\n","import { AppBar, Toolbar, Typography } from '@mui/material';\n\nconst Header: React.VFC = () => {\n    return (\n        <AppBar position=\"static\">\n            <Toolbar variant=\"dense\">\n                <Typography component=\"h1\" variant=\"h6\" color=\"inherit\">\n                    Drawing Sample\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    );\n};\n\nexport default Header;\n","export interface DOMSize {\n    width: number;\n    height: number;\n}\n\nexport const CanvasTools = ['select', 'pen', 'force', 'trapezoid'] as const;\nexport type CanvasTool = typeof CanvasTools[number];\nexport const isCanvasTool = (item: unknown): item is CanvasTool => {\n    if (typeof item === 'string') {\n        return CanvasTools.some((tool) => tool === item);\n    }\n    return false;\n};\n","import { ArrowDownward, Edit, PanToolAlt, Texture } from '@mui/icons-material';\nimport { Stack, ToggleButton, ToggleButtonGroup, Typography } from '@mui/material';\nimport { MouseEvent, ReactElement, useCallback, useContext } from 'react';\nimport { ConfigurationContext } from '../../providers/ConfigurationProvider';\nimport { CanvasTool, isCanvasTool } from '../../types/common';\n\ninterface Props {\n    tool: CanvasTool;\n    onChange: (tool: CanvasTool) => void;\n}\n\ninterface ButtonProps {\n    tool: CanvasTool;\n    icon: ReactElement;\n    label: string;\n}\n\nconst ToolboxButtons: Readonly<Record<CanvasTool, ButtonProps>> = {\n    select: {\n        tool: 'select',\n        icon: <PanToolAlt />,\n        label: '選択',\n    },\n    pen: {\n        tool: 'pen',\n        icon: <Edit />,\n        label: '梁要素の描画',\n    },\n    force: {\n        tool: 'force',\n        icon: <ArrowDownward />,\n        label: '集中荷重の追加',\n    },\n    trapezoid: {\n        tool: 'trapezoid',\n        icon: <Texture />,\n        label: '分布荷重の追加',\n    },\n};\n\nconst ToolboxCore: React.VFC<Props> = ({ tool, onChange }) => {\n    /**\n     * ツールの変更\n     */\n    const handleChange = useCallback(\n        (_: MouseEvent<HTMLElement>, newValue: string | null) => {\n            if (newValue !== null && isCanvasTool(newValue)) {\n                onChange(newValue);\n            }\n        },\n        [onChange]\n    );\n\n    return (\n        <Stack sx={{ width: 160 }} alignItems=\"flex-start\">\n            <Typography variant=\"caption\">Toolbox</Typography>\n            <ToggleButtonGroup\n                orientation=\"vertical\"\n                value={tool}\n                exclusive\n                fullWidth\n                onChange={handleChange}\n            >\n                {Object.entries(ToolboxButtons).map(([key, { icon, label }]) => (\n                    <ToggleButton\n                        key={key}\n                        value={key}\n                        sx={{ justifyContent: 'flex-start', alignItems: 'center' }}\n                    >\n                        {icon}\n                        <Typography variant=\"caption\" sx={{ ml: 1 }}>\n                            {label}\n                        </Typography>\n                    </ToggleButton>\n                ))}\n            </ToggleButtonGroup>\n        </Stack>\n    );\n};\n\nconst Toolbox: React.VFC = () => {\n    const { tool, setTool } = useContext(ConfigurationContext);\n    return <ToolboxCore tool={tool} onChange={setTool} />;\n};\n\nexport default Toolbox;\n","import { Box } from '@mui/material';\nimport { useCallback, useEffect, useState } from 'react';\nimport { DOMSize } from '../types/common';\nimport CanvasContainer from './CanvasContainer';\nimport Header from './Header';\nimport Toolbox from './Toolbox';\n\nconst Layout: React.VFC = () => {\n    const [windowRect, setWindowRect] = useState<DOMSize>({ width: 0, height: 0 });\n\n    const fitWindowSize = useCallback(() => {\n        const { innerHeight, innerWidth } = window;\n        setWindowRect({\n            height: innerHeight,\n            width: innerWidth,\n        });\n    }, []);\n\n    useEffect(() => {\n        fitWindowSize();\n        window.addEventListener('resize', fitWindowSize);\n\n        return () => {\n            window.removeEventListener('resize', fitWindowSize);\n        };\n    }, [fitWindowSize]);\n\n    return (\n        <Box sx={{ ...windowRect, overflow: 'hidden' }}>\n            <Header />\n            <Box\n                sx={{\n                    width: '100%',\n                    height: 'calc(100% - 48px)',\n                    display: 'flex',\n                    flexDirection: 'row',\n                    flexWrap: 'nowrap',\n                    alignItems: 'stretch',\n                    pt: 1,\n                    px: 1,\n                }}\n            >\n                <Toolbox />\n                <CanvasContainer />\n            </Box>\n        </Box>\n    );\n};\n\nexport default Layout;\n","import { createTheme, CssBaseline, ThemeProvider } from '@mui/material';\nimport React from 'react';\nimport ConfigurationProvider from '../providers/ConfigurationProvider';\nimport Layout from './Layout';\n\nconst theme = createTheme();\n\nconst App: React.VFC = () => {\n    return (\n        <ThemeProvider theme={theme}>\n            <ConfigurationProvider>\n                <CssBaseline />\n                <Layout />\n            </ConfigurationProvider>\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}