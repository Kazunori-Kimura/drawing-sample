{"version":3,"sources":["types/shape.ts","types/note.ts","providers/AppSettingsProvider.tsx","providers/ConfigurationProvider.tsx","providers/NoteSettingsProvider.tsx","components/Version.tsx","components/Header.tsx","components/Canvas/util/common.ts","components/Canvas/util/vector.ts","components/Note/layer/Draw.tsx","components/Note/nodes/CanvasHandle/HeaderMenu.tsx","components/Note/nodes/CanvasHandle/index.tsx","components/Note/layer/Frame.tsx","components/Note/layer/Grid.tsx","components/Note/nodes/CanvasContainer.tsx","components/Note/Page.tsx","hooks/useContextBridge.tsx","components/Note/index.tsx","components/MainContainer.tsx","types/common.ts","components/Toolbox/CanvasToolbox.tsx","components/Toolbox/NoteToolbox.tsx","components/Toolbox/index.tsx","components/Layout.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["emptyStructure","unit","force","length","nodes","beams","forces","trapezoids","NoteModes","PageSize","A3","width","height","A4","B4","B5","MinCanvasSize","defaultDrawSettings","stroke","strokeWidth","eraser","lineJoin","lineCap","defaultPageProps","size","drawings","structures","data","x","y","AppSettingsContext","createContext","undefined","AppSettingsProvider","children","useState","mode","setMode","page","setPage","selectedCanvasIndex","setCanvasIndex","canvasProps","setCanvasProps","editCanvas","useCallback","props","closeCanvas","Provider","value","onChangeMode","onChange","onSelectCanvas","ConfigurationContext","ConfigurationProvider","tool","setTool","NoteSettingsContext","NoteSettingsProvider","settings","setSettings","onChangeDrawSettings","hash","process","substring","date","version","Version","Typography","variant","sx","ml","Header","AppBar","position","Toolbar","component","color","clone","Vector","JSON","parse","stringify","Draw","points","map","index","lineProps","globalCompositeOperation","Background","styled","display","alignItems","padding","Spacer","flex","HeaderMenu","visible","top","left","onEdit","onCopy","onDelete","onCancel","anchorEl","setAnchorEl","handleClickMore","event","currentTarget","handleCloseMenu","divProps","style","IconButton","onClick","Menu","open","Boolean","onClose","MenuItem","CanvasHandle","draggable","selected","onSelect","rectRef","useRef","tfRef","isDragging","setDragging","useContext","pageSize","useMemo","visibleTransformer","useEffect","current","getLayer","batchDraw","handleChange","rect","newPage","d","handleDragStart","handleDragMove","cancelBubble","target","attrs","getSize","newX","newY","setPosition","handleDragEnd","_","getPosition","newRectProps","handleChangeBoundBox","oldBox","newBox","handleTransformEnd","scale","scaleX","scaleY","Math","max","handleEdit","getBoundingClientRect","ref","onTap","onDragStart","onDragMove","onDragEnd","onTransformEnd","rotateEnabled","boundBoxFunc","Frame","handleClick","type","structure","defaultLineProps","id","dash","listening","Grid","layerSize","horizontalLines","lines","count","push","verticalLines","CanvasContainer","console","log","getStage","getPointerPosition","fill","text","Page","viewBox","stageRef","noteMode","appMode","ContextBridge","contexts","cRef","React","context","reduceRight","acc","Context","i","useContextBridge","isDrawing","setPoints","modified","abs","handlePointerDown","point","handlePointerMove","state","handlePointerUp","onPointerDown","onPointerMove","onPointerUp","Note","containerRef","setViewBox","observer","ResizeObserver","entries","contentRect","observe","disconnect","Box","backgroundColor","overscrollBehavior","overflow","MainContainer","boxSizing","mb","border","theme","palette","divider","borderRadius","CanvasTools","ToolboxButtons","select","icon","PanToolAlt","label","pen","ArrowDownward","trapezoid","Texture","delete","Delete","CanvasToolboxCore","newValue","item","some","Stack","ToggleButtonGroup","orientation","exclusive","fullWidth","Object","key","ToggleButton","justifyContent","CanvasToolbox","DrawModes","NoteModeButtons","edit","DrawModeButtons","AutoFixNormal","NoteToolboxCore","handleChangeMode","handleChangeTool","handleChangeStrokeWidth","handleChangeStroke","checkValidity","mt","disabled","Slider","min","step","marks","valueLabelDisplay","TextField","margin","NoteToolbox","Toolbox","Layout","windowRect","setWindowRect","fitWindowSize","window","innerHeight","innerWidth","addEventListener","removeEventListener","flexDirection","flexWrap","pt","px","createTheme","App","ThemeProvider","CssBaseline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c540f4da.chunk.js","sourcesContent":["/**\n * 単位: 力\n */\nexport const ForceUnitValues = ['N', 'kN'] as const;\n\n/**\n * 単位: 長さ\n */\nexport const LengthUnitValues = ['mm', 'cm', 'm'] as const;\n\nexport type ForceUnitType = typeof ForceUnitValues[number];\nexport type LengthUnitType = typeof LengthUnitValues[number];\n\n/**\n * 単位\n */\nexport interface Unit {\n    force: ForceUnitType;\n    length: LengthUnitType;\n}\n\nexport const NodePinTypes = ['free', 'pin', 'pinX', 'pinZ', 'fixX', 'fix'] as const;\nexport type NodePinType = typeof NodePinTypes[number];\n\nexport const isNodePinType = (item: unknown): item is NodePinType => {\n    if (typeof item === 'string') {\n        return NodePinTypes.some((type) => type === item);\n    }\n    return false;\n};\n\nexport interface Node {\n    id: string;\n    x: number;\n    y: number;\n    pin?: NodePinType;\n}\n\nexport const isNode = (item: unknown): item is Node => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return (\n            typeof value.id === 'string' &&\n            typeof value.x === 'number' &&\n            typeof value.y === 'number'\n        );\n    }\n    return false;\n};\n\nexport interface Beam {\n    id: string;\n    name: string;\n    nodeI: string;\n    nodeJ: string;\n}\n\nexport interface Force {\n    id: string;\n    name: string;\n    beam: string;\n    force: number;\n    // i端からの距離 (0 〜 1)\n    distanceI: number;\n}\nexport const isForce = (item: unknown): item is Force => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return (\n            typeof value.id === 'string' &&\n            typeof value.name === 'string' &&\n            typeof value.beam === 'string' &&\n            typeof value.force === 'number' &&\n            typeof value.distanceI === 'number'\n        );\n    }\n    return false;\n};\n\nexport interface Trapezoid {\n    id: string;\n    name: string;\n    beam: string;\n    // kN/m\n    forceI: number;\n    // kN/m\n    forceJ: number;\n    // i端からの距離 (0 〜 1, distanceI + distanceJ <= 1)\n    distanceI: number;\n    // j端からの距離 (0 〜 1, distanceI + distanceJ <= 1)\n    distanceJ: number;\n    // 角度、デフォルト 90度、-179 〜 180 度の間で指定 (-180 = 180)\n    angle?: number;\n    // 全体座標系に垂直か、部材に垂直か デフォルト false\n    isGlobal?: boolean;\n}\n\nexport const isTrapezoid = (item: unknown): item is Trapezoid => {\n    if (item && typeof item === 'object') {\n        const value = item as Record<string, unknown>;\n        return (\n            typeof value.id === 'string' &&\n            typeof value.name === 'string' &&\n            typeof value.beam === 'string' &&\n            typeof value.forceI === 'number' &&\n            typeof value.distanceI === 'number' &&\n            typeof value.forceJ === 'number' &&\n            typeof value.distanceJ === 'number'\n        );\n    }\n    return false;\n};\n\nexport interface Structure {\n    unit: Unit;\n    nodes: Node[];\n    beams: Beam[];\n    forces: Force[];\n    trapezoids: Trapezoid[];\n}\n\nexport type StructureFieldType = keyof Omit<Structure, 'unit'>;\n\nexport const defaultUnit: Unit = {\n    force: 'kN',\n    length: 'm',\n};\n\nexport const emptyStructure: Structure = {\n    unit: defaultUnit,\n    nodes: [],\n    beams: [],\n    forces: [],\n    trapezoids: [],\n};\n","import { LineCap, LineJoin } from 'konva/lib/Shape';\nimport { DOMSize } from './common';\nimport { emptyStructure, Structure } from './shape';\n\nconst NoteModes = ['select', 'edit'] as const;\nexport type NoteMode = typeof NoteModes[number];\nexport const isNoteMode = (item: unknown): item is NoteMode => {\n    if (typeof item === 'string') {\n        return NoteModes.some((mode) => mode === item);\n    }\n    return false;\n};\n\nexport const PageSizeTypes = ['A4', 'A3', 'B5', 'B4'] as const;\nexport type PageSizeType = typeof PageSizeTypes[number];\n\nexport const PageSize: Record<PageSizeType, DOMSize> = {\n    A3: {\n        width: 0,\n        height: 0,\n    },\n    A4: {\n        width: 2970,\n        height: 2100,\n    },\n    B4: {\n        width: 0,\n        height: 0,\n    },\n    B5: {\n        width: 0,\n        height: 0,\n    },\n};\n\nexport interface StructureCanvasProps {\n    data: Structure;\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n}\n\nexport const MinCanvasSize: DOMSize = {\n    width: 160,\n    height: 90,\n};\n\nexport interface DrawingProps {\n    stroke: string;\n    strokeWidth: number;\n    eraser?: boolean;\n    points: number[];\n    lineJoin?: LineJoin;\n    lineCap?: LineCap;\n}\nexport type DrawSettings = Omit<DrawingProps, 'points'>;\nexport const defaultDrawSettings: DrawSettings = {\n    stroke: '#000000',\n    strokeWidth: 4,\n    eraser: false,\n    lineJoin: 'round',\n    lineCap: 'round',\n};\n\nexport interface PageProps {\n    size: PageSizeType;\n    drawings: DrawingProps[];\n    structures: StructureCanvasProps[];\n}\n\nexport const defaultPageProps: PageProps = {\n    size: 'A4',\n    drawings: [],\n    structures: [\n        {\n            data: emptyStructure,\n            x: 100,\n            y: 100,\n            ...MinCanvasSize,\n        },\n    ],\n};\n","import { createContext, Dispatch, SetStateAction, useCallback, useState } from 'react';\nimport { AppMode, ShapeBaseProps } from '../types/common';\nimport { defaultPageProps, PageProps } from '../types/note';\n\ninterface Props {\n    children: React.ReactNode;\n}\n\ninterface IAppSettingsContext {\n    mode: AppMode;\n    onChangeMode: Dispatch<SetStateAction<AppMode>>;\n    page: PageProps;\n    onChange: Dispatch<SetStateAction<PageProps>>;\n    selectedCanvasIndex?: number;\n    onSelectCanvas: Dispatch<SetStateAction<number | undefined>>;\n    canvasProps?: ShapeBaseProps;\n    editCanvas: (props: ShapeBaseProps) => void;\n    closeCanvas: VoidFunction;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nexport const AppSettingsContext = createContext<IAppSettingsContext>(undefined!);\n\nconst AppSettingsProvider: React.VFC<Props> = ({ children }) => {\n    const [mode, setMode] = useState<AppMode>('note');\n    const [page, setPage] = useState<PageProps>(defaultPageProps);\n    const [selectedCanvasIndex, setCanvasIndex] = useState<number>();\n    const [canvasProps, setCanvasProps] = useState<ShapeBaseProps>();\n\n    const editCanvas = useCallback((props: ShapeBaseProps) => {\n        setMode('canvas');\n        setCanvasProps(props);\n    }, []);\n\n    const closeCanvas = useCallback(() => {\n        setMode('note');\n        setCanvasProps(undefined);\n    }, []);\n\n    return (\n        <AppSettingsContext.Provider\n            value={{\n                mode,\n                onChangeMode: setMode,\n                page,\n                onChange: setPage,\n                selectedCanvasIndex,\n                onSelectCanvas: setCanvasIndex,\n                canvasProps,\n                editCanvas,\n                closeCanvas,\n            }}\n        >\n            {children}\n        </AppSettingsContext.Provider>\n    );\n};\n\nexport default AppSettingsProvider;\n","import { createContext, useState } from 'react';\nimport { CanvasTool } from '../types/common';\n\ninterface Props {\n    children: React.ReactNode;\n}\n\ninterface IConfigurationContext {\n    tool: CanvasTool;\n    setTool: (tool: CanvasTool) => void;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nexport const ConfigurationContext = createContext<IConfigurationContext>(undefined!);\n\nconst ConfigurationProvider: React.VFC<Props> = ({ children }) => {\n    const [tool, setTool] = useState<CanvasTool>('select');\n\n    return (\n        <ConfigurationContext.Provider value={{ tool, setTool }}>\n            {children}\n        </ConfigurationContext.Provider>\n    );\n};\n\nexport default ConfigurationProvider;\n","import { createContext, Dispatch, SetStateAction, useState } from 'react';\nimport { defaultDrawSettings, DrawSettings, NoteMode } from '../types/note';\n\ninterface Props {\n    children: React.ReactNode;\n}\n\ninterface INoteSettingsContext {\n    mode: NoteMode;\n    settings: DrawSettings;\n    onChangeMode: Dispatch<SetStateAction<NoteMode>>;\n    onChangeDrawSettings: Dispatch<SetStateAction<DrawSettings>>;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nexport const NoteSettingsContext = createContext<INoteSettingsContext>(undefined!);\n\nconst NoteSettingsProvider: React.VFC<Props> = ({ children }) => {\n    const [mode, setMode] = useState<NoteMode>('select');\n    const [settings, setSettings] = useState<DrawSettings>(defaultDrawSettings);\n\n    return (\n        <NoteSettingsContext.Provider\n            value={{ mode, settings, onChangeMode: setMode, onChangeDrawSettings: setSettings }}\n        >\n            {children}\n        </NoteSettingsContext.Provider>\n    );\n};\n\nexport default NoteSettingsProvider;\n","import { Typography } from '@mui/material';\n\nconst hash = process.env.REACT_APP_GIT_COMMIT_HASH?.substring(0, 7) ?? '';\nconst date = process.env.REACT_APP_GIT_COMMIT_DATE ?? '';\nconst version = process.env.REACT_APP_PACKAGE_VERSION ?? '';\n\nconst Version: React.VFC = () => {\n    return (\n        <Typography\n            variant=\"caption\"\n            sx={{ ml: 2 }}\n        >{`ver ${version} (${hash}: ${date})`}</Typography>\n    );\n};\n\nexport default Version;\n","import { AppBar, Toolbar, Typography } from '@mui/material';\nimport Version from './Version';\n\nconst Header: React.VFC = () => {\n    return (\n        <AppBar position=\"static\">\n            <Toolbar variant=\"dense\">\n                <Typography component=\"h1\" variant=\"h6\" color=\"inherit\">\n                    Drawing Sample\n                </Typography>\n                <Version />\n            </Toolbar>\n        </AppBar>\n    );\n};\n\nexport default Header;\n","import { Point } from '../types';\nimport { lerp, Vector } from './vector';\n\nexport const clone = <T>(data: T): T => {\n    return JSON.parse(JSON.stringify(data)) as T;\n};\n\nexport const round = (value: number, figure = 3): number => {\n    const n = 10 ** figure;\n    const result = Math.round(value * n) / n;\n    return result;\n};\n\nconst snapping = (value: number, snapSize = 25): number => {\n    const n = value / snapSize;\n    const i = Math.round(n) * snapSize;\n    return i;\n};\n\nexport const DEFAULT_SNAP_SIZE = 25;\n\nexport const snap = ([x, y]: [number, number], snapSize = DEFAULT_SNAP_SIZE): [number, number] => {\n    return [snapping(x, snapSize), snapping(y, snapSize)];\n};\n\nconst InsideArrowCount = 10;\nconst InsideArrowInterval = 25;\nconst InsideArrowMinInterval = 10;\n\n/**\n * 開始点から終了点まで等間隔に点を取る\n * @param start\n * @param end\n * @param direction\n * @returns\n */\nexport const getInsidePoints = (start: Vector, end: Vector, direction: Vector): Vector[] => {\n    const points: Vector[] = [];\n    // 2点間の距離\n    const distance = start.distance(end);\n    // 分割数\n    let count = InsideArrowCount;\n    // 間隔\n    let interval = distance / (count + 1);\n    while (interval < InsideArrowInterval && count > 0) {\n        count--;\n        interval = distance / (count + 1);\n    }\n\n    if (count > 0) {\n        // 始点から interval の間隔で count 個 点を取る\n        for (let i = 1; i <= count; i++) {\n            const point = start.clone().add(direction.clone().multiplyScalar(interval * i));\n            points.push(point);\n        }\n    } else {\n        // 半分にしてみる\n        interval = distance / 2;\n        if (interval >= InsideArrowMinInterval) {\n            // 半分の位置に点を置く\n            const point = lerp(start, end, 0.5);\n            points.push(point);\n        }\n    }\n\n    return points;\n};\n\n/**\n * 開始点からある方向に伸ばした線が対象となる線と交わる点を取得する\n * @param targetLine 対象となる Line [始点、終点、傾き、切片]\n * @param start 開始点\n * @param dir 方向\n * @returns 交点（なければ null）\n */\nexport const intercectPoint = (\n    targetLine: [Vector, Vector, number, number],\n    start: Vector,\n    dir: Vector\n): Point | null => {\n    const [pi, pj, slope1, intercept1] = targetLine;\n    let point: Point | null = null;\n    try {\n        // dir の傾き\n        const end: Vector = start.clone().add(dir);\n        const slope2 = end.x - start.x !== 0 ? (end.y - start.y) / (end.x - start.x) : NaN;\n        // dir の切片\n        const intercept2 = isNaN(slope2) ? NaN : start.y - slope2 * start.x;\n\n        if (slope1 === slope2) {\n            // 平行なので交点なし\n            return null;\n        }\n\n        if (!isNaN(slope1) && !isNaN(slope2)) {\n            // どちらも垂直でない\n            const px = (intercept2 - intercept1) / (slope1 - slope2);\n            const py = slope1 * px + intercept1;\n\n            point = [px, py];\n        } else if (isNaN(slope1)) {\n            // 対象の Line が垂直\n            const px = pi.x;\n            const py = px * slope2 + intercept2;\n\n            point = [px, py];\n        } else if (isNaN(slope2)) {\n            // dir が垂直\n            const px = start.x;\n            const py = px * slope1 + intercept1;\n\n            point = [px, py];\n        }\n\n        // 交点が Line の内側？\n        if (point) {\n            const [x, y] = point;\n            const rangeX = [pi.x, pj.x].sort((a, b) => a - b);\n            const rangeY = [pi.y, pj.y].sort((a, b) => a - b);\n            if (x >= rangeX[0] && x <= rangeX[1] && y >= rangeY[0] && y <= rangeY[1]) {\n                return point;\n            }\n        }\n        return null;\n    } catch (err) {\n        console.error(err);\n    }\n\n    return null;\n};\n","import Vector from 'victor';\n\nexport { Vector };\n\n// X方向のベクトル\nexport const vX = new Vector(1, 0);\n// Y方向のベクトル\nexport const vY = new Vector(0, 1);\n\n/**\n * v1 と v2 の間にある vp を取得する\n * @param v1\n * @param v2\n * @param alpha\n * @returns\n */\nexport const lerp = (v1: Vector, v2: Vector, alpha: number): Vector => {\n    if (alpha >= 1) {\n        return v2;\n    }\n    if (alpha <= 0) {\n        return v1;\n    }\n    const dir = v2.clone().subtract(v1).normalize();\n    const distance = v1.distance(v2);\n    const mv = dir.multiplyScalar(distance * alpha);\n    return v1.clone().add(mv);\n};\n\n/**\n * v1 と v2 に直交する単位ベクトルを返す\n * @param v1\n * @param v2\n * @returns\n */\nexport const verticalNormalizeVector = (v1: Vector, v2: Vector): Vector => {\n    const dir = v2.clone().subtract(v1).normalize();\n    const v = new Vector(dir.y, dir.x * -1).normalize();\n\n    const value = vY.dot(v);\n    if (value > 0) {\n        v.invert();\n    }\n\n    return v;\n};\n","import { Layer, Line } from 'react-konva';\nimport { DrawingProps, DrawSettings } from '../../../types/note';\n\ninterface Props {\n    drawings: DrawingProps[];\n    // 描画中のデータ\n    settings: DrawSettings;\n    points?: number[];\n}\n\nconst Draw: React.VFC<Props> = ({ drawings, settings, points }) => {\n    return (\n        <Layer>\n            {drawings.map(({ eraser = false, ...lineProps }, index) => (\n                <Line\n                    key={`note-drawing-${index}`}\n                    {...lineProps}\n                    globalCompositeOperation={eraser ? 'destination-out' : 'source-over'}\n                />\n            ))}\n            {points && (\n                <Line\n                    {...settings}\n                    points={points}\n                    globalCompositeOperation={settings.eraser ? 'destination-out' : 'source-over'}\n                />\n            )}\n        </Layer>\n    );\n};\n\nexport default Draw;\n","import CloseIcon from '@mui/icons-material/Close';\nimport EditIcon from '@mui/icons-material/Edit';\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport { IconButton, Menu, MenuItem, styled } from '@mui/material';\nimport { MouseEvent, MouseEventHandler, useCallback, useState } from 'react';\nimport { Html } from 'react-konva-utils';\nimport { AppMode } from '../../../../types/common';\n\ninterface Props {\n    visible?: boolean;\n    mode: AppMode;\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    onEdit?: MouseEventHandler<HTMLButtonElement>;\n    onCopy?: VoidFunction;\n    onDelete?: VoidFunction;\n    onCancel?: VoidFunction;\n}\n\nconst Background = styled('div')({\n    display: 'flex',\n    alignItems: 'center',\n    width: '100%',\n    padding: '0 8',\n});\nconst Spacer = styled('div')({\n    flex: 1,\n});\n\nconst HeaderMenu: React.VFC<Props> = ({\n    visible = false,\n    mode,\n    y: top,\n    x: left,\n    width,\n    onEdit,\n    onCopy,\n    onDelete,\n    onCancel,\n}) => {\n    const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\n\n    const handleClickMore = useCallback((event: MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget);\n    }, []);\n    const handleCloseMenu = useCallback(() => {\n        setAnchorEl(null);\n    }, []);\n\n    if (!visible) {\n        return null;\n    }\n\n    return (\n        <Html\n            divProps={{\n                style: {\n                    top: `${top - 42}px`,\n                    left: `${left}px`,\n                    width: `${width}px`,\n                },\n            }}\n        >\n            <Background>\n                {mode === 'canvas' && (\n                    <IconButton size=\"small\" onClick={onCancel}>\n                        <CloseIcon />\n                    </IconButton>\n                )}\n                {mode === 'note' && (\n                    <>\n                        <IconButton size=\"small\" onClick={onEdit}>\n                            <EditIcon />\n                        </IconButton>\n                        <Spacer />\n                        <IconButton size=\"small\" onClick={handleClickMore}>\n                            <MoreVertIcon />\n                        </IconButton>\n                    </>\n                )}\n            </Background>\n            <Menu anchorEl={anchorEl} open={Boolean(anchorEl)} onClose={handleCloseMenu}>\n                <MenuItem onClick={onCopy}>コピー</MenuItem>\n                <MenuItem onClick={onDelete}>削除</MenuItem>\n            </Menu>\n        </Html>\n    );\n};\n\nexport default HeaderMenu;\n","import Konva from 'konva';\nimport { KonvaEventObject } from 'konva/lib/Node';\nimport { Box } from 'konva/lib/shapes/Transformer';\nimport {\n    Dispatch,\n    MouseEvent,\n    SetStateAction,\n    useCallback,\n    useContext,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n} from 'react';\nimport { Rect, Transformer } from 'react-konva';\nimport { AppSettingsContext } from '../../../../providers/AppSettingsProvider';\nimport { ShapeBaseProps } from '../../../../types/common';\nimport {\n    MinCanvasSize,\n    PageProps,\n    PageSize,\n    PageSizeType,\n    StructureCanvasProps,\n} from '../../../../types/note';\nimport { clone } from '../../../Canvas/util';\nimport HeaderMenu from './HeaderMenu';\n\ninterface Props extends StructureCanvasProps {\n    // ページ情報\n    size: PageSizeType;\n    draggable?: boolean;\n    // キャンバス情報\n    index: number;\n    onChange: Dispatch<SetStateAction<PageProps>>;\n    // 選択状態\n    selected?: boolean;\n    onSelect: VoidFunction;\n}\n\nconst CanvasHandle: React.VFC<Props> = ({\n    size,\n    draggable = false,\n    index,\n    onChange,\n    selected = false,\n    onSelect,\n    data,\n    ...props\n}) => {\n    const rectRef = useRef<Konva.Rect>(null);\n    const tfRef = useRef<Konva.Transformer>(null);\n\n    const [isDragging, setDragging] = useState(false);\n\n    const { mode, editCanvas, closeCanvas } = useContext(AppSettingsContext);\n\n    const pageSize = useMemo(() => {\n        return PageSize[size];\n    }, [size]);\n\n    const visibleTransformer = useMemo(() => {\n        return draggable && selected;\n    }, [draggable, selected]);\n\n    // 選択時にサイズ変更を可能にする\n    useEffect(() => {\n        if (selected && tfRef.current && rectRef.current) {\n            tfRef.current.nodes([rectRef.current]);\n            // 強制描画\n            tfRef.current.getLayer()?.batchDraw();\n        }\n    }, [selected]);\n\n    /**\n     * 位置/サイズ変更の確定\n     */\n    const handleChange = useCallback(\n        (rect: ShapeBaseProps) => {\n            onChange((page) => {\n                const newPage = clone(page);\n                const d = newPage.structures[index].data;\n                newPage.structures[index] = {\n                    data: d,\n                    ...rect,\n                };\n\n                return newPage;\n            });\n        },\n        [index, onChange]\n    );\n\n    /**\n     * ドラッグ開始\n     */\n    const handleDragStart = useCallback(() => {\n        setDragging(true);\n    }, []);\n\n    /**\n     * 移動\n     */\n    const handleDragMove = useCallback(\n        (event: KonvaEventObject<Event>) => {\n            // イベントを伝播させない\n            event.cancelBubble = true;\n\n            if (rectRef.current) {\n                // ドラッグした位置\n                const { x, y } = event.target.attrs;\n                if (typeof x === 'number' && typeof y === 'number') {\n                    // 位置がページサイズの範囲内になるように x, y を補正\n                    const { width, height } = rectRef.current.getSize();\n                    let [newX, newY] = [x, y];\n\n                    if (newX < 0) {\n                        newX = 0;\n                    } else if (newX > pageSize.width - width) {\n                        newX = pageSize.width - width;\n                    }\n                    if (newY < 0) {\n                        newY = 0;\n                    } else if (newY > pageSize.height - height) {\n                        newY = pageSize.height - height;\n                    }\n\n                    if (x !== newX || y !== newY) {\n                        rectRef.current.setPosition({ x: newX, y: newY });\n                    }\n                }\n            }\n        },\n        [pageSize.height, pageSize.width]\n    );\n\n    /**\n     * 移動の確定\n     */\n    const handleDragEnd = useCallback(\n        (_: KonvaEventObject<Event>) => {\n            if (rectRef.current) {\n                // 現在位置を取得\n                const { x, y } = rectRef.current.getPosition();\n                const { width, height } = rectRef.current.getSize();\n                const newRectProps: ShapeBaseProps = {\n                    x,\n                    y,\n                    width,\n                    height,\n                };\n                // ドラッグ終了\n                setDragging(false);\n                // 更新\n                handleChange(newRectProps);\n            }\n        },\n        [handleChange]\n    );\n\n    /**\n     * サイズを最小値以下にできないように制限\n     */\n    const handleChangeBoundBox = useCallback((oldBox: Box, newBox: Box) => {\n        if (newBox.width < MinCanvasSize.width || newBox.height < MinCanvasSize.height) {\n            return oldBox;\n        }\n        return newBox;\n    }, []);\n\n    /**\n     * サイズ変更の確定\n     */\n    const handleTransformEnd = useCallback(() => {\n        if (rectRef.current) {\n            const rect = rectRef.current;\n            const { x: scaleX, y: scaleY } = rect.scale();\n            // reset scale\n            rect.scale({ x: 1, y: 1 });\n            const newRectProps: ShapeBaseProps = {\n                x: rect.x(),\n                y: rect.y(),\n                width: Math.max(MinCanvasSize.width, rect.width() * scaleX),\n                height: Math.max(MinCanvasSize.height, rect.height() * scaleY),\n            };\n\n            handleChange(newRectProps);\n        }\n    }, [handleChange]);\n\n    const handleEdit = useCallback(\n        (event: MouseEvent<HTMLButtonElement>) => {\n            // ボタンの位置\n            const { top, left } = event.currentTarget.getBoundingClientRect();\n\n            // 編集開始\n            const canvasProps: ShapeBaseProps = {\n                x: left,\n                y: top + 42,\n                width: props.width,\n                height: props.height,\n            };\n            editCanvas(canvasProps);\n        },\n        [editCanvas, props.height, props.width]\n    );\n\n    return (\n        <>\n            <Rect\n                ref={rectRef}\n                //fill=\"orange\"\n                stroke=\"black\"\n                strokeWidth={2}\n                draggable={draggable}\n                {...props}\n                onClick={onSelect}\n                onTap={onSelect}\n                onDragStart={handleDragStart}\n                onDragMove={handleDragMove}\n                onDragEnd={handleDragEnd}\n                onTransformEnd={handleTransformEnd}\n            />\n            <HeaderMenu\n                visible={selected && !isDragging}\n                mode={mode}\n                {...props}\n                onEdit={handleEdit}\n                onCancel={closeCanvas}\n            />\n            <Transformer\n                ref={tfRef}\n                visible={visibleTransformer}\n                rotateEnabled={false}\n                boundBoxFunc={handleChangeBoundBox}\n            />\n        </>\n    );\n};\n\nexport default CanvasHandle;\n","import { KonvaEventObject } from 'konva/lib/Node';\nimport { Dispatch, SetStateAction, useCallback, useContext, useMemo } from 'react';\nimport { Layer, Rect } from 'react-konva';\nimport { AppSettingsContext } from '../../../providers/AppSettingsProvider';\nimport { PageProps, PageSize } from '../../../types/note';\nimport CanvasHandle from '../nodes/CanvasHandle';\n\ninterface Props extends Pick<PageProps, 'size' | 'structures'> {\n    draggable?: boolean;\n    onChange: Dispatch<SetStateAction<PageProps>>;\n}\n\nconst Frame: React.VFC<Props> = ({ size, structures, draggable = false, onChange }) => {\n    const { selectedCanvasIndex, onSelectCanvas } = useContext(AppSettingsContext);\n\n    const pageSize = useMemo(() => {\n        return PageSize[size];\n    }, [size]);\n\n    const handleClick = useCallback(\n        (event: KonvaEventObject<Event>) => {\n            if (event.target.attrs.type === 'background') {\n                onSelectCanvas(undefined);\n            }\n        },\n        [onSelectCanvas]\n    );\n\n    return (\n        <Layer>\n            {/* クリックが空振りしたときに選択解除する */}\n            <Rect\n                x={0}\n                y={0}\n                {...pageSize}\n                attrs={{ type: 'background' }}\n                onClick={handleClick}\n                onTap={handleClick}\n            />\n            {structures.map((structure, index) => (\n                <CanvasHandle\n                    key={`handle-${index}`}\n                    size={size}\n                    draggable={draggable}\n                    index={index}\n                    onChange={onChange}\n                    selected={index === selectedCanvasIndex}\n                    onSelect={() => onSelectCanvas(index)}\n                    {...structure}\n                />\n            ))}\n        </Layer>\n    );\n};\n\nexport default Frame;\n","import { useMemo } from 'react';\nimport { Layer, Line } from 'react-konva';\nimport { PageSize, PageSizeType } from '../../../types/note';\n\ninterface LineProps {\n    id: string;\n    points: number[];\n    stroke: string;\n    strokeWidth: number;\n    dash: [number, number];\n    listening: boolean;\n}\n\nconst defaultLineProps: LineProps = {\n    id: '',\n    points: [],\n    stroke: '#c9e1ff',\n    strokeWidth: 1,\n    dash: [5, 3],\n    listening: false,\n};\n\nconst GridSize = 50;\n\ninterface Props {\n    size: PageSizeType;\n}\n\nconst Grid: React.VFC<Props> = ({ size }) => {\n    const layerSize = useMemo(() => {\n        return PageSize[size];\n    }, [size]);\n\n    const horizontalLines: LineProps[] = useMemo(() => {\n        const lines: LineProps[] = [];\n        let count = 1;\n        for (let y = 0; y <= layerSize.height; y += GridSize) {\n            lines.push({\n                ...defaultLineProps,\n                id: `Horizontal_${count}`,\n                points: [0, y, layerSize.width, y],\n            });\n            count++;\n        }\n        return lines;\n    }, [layerSize]);\n\n    const verticalLines: LineProps[] = useMemo(() => {\n        const lines: LineProps[] = [];\n        let count = 1;\n        for (let x = 0; x <= layerSize.width; x += GridSize) {\n            lines.push({\n                ...defaultLineProps,\n                id: `Vertical_${count}`,\n                points: [x, 0, x, layerSize.height],\n            });\n            count++;\n        }\n        return lines;\n    }, [layerSize]);\n\n    return (\n        <Layer>\n            {/* horizontal */}\n            {horizontalLines.map((props) => (\n                <Line key={props.id} {...props} />\n            ))}\n            {/* vertical */}\n            {verticalLines.map((props) => (\n                <Line key={props.id} {...props} />\n            ))}\n        </Layer>\n    );\n};\n\nexport default Grid;\n","import { KonvaEventObject } from 'konva/lib/Node';\nimport { useCallback } from 'react';\nimport { Layer, Rect, Text } from 'react-konva';\n\ninterface Props {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    visible?: boolean;\n}\n\nconst CanvasContainer: React.VFC<Props> = ({ visible = false, ...props }) => {\n    const handleClick = useCallback((event: KonvaEventObject<Event>) => {\n        console.log('hoge');\n        const position = event.target.getStage()?.getPointerPosition();\n        if (position) {\n            console.log(position);\n        }\n    }, []);\n\n    return (\n        <Layer x={props.x} y={props.y} visible={visible}>\n            <Rect\n                x={0}\n                y={0}\n                width={props.width}\n                height={props.height}\n                fill=\"#ccc\"\n                onClick={handleClick}\n            />\n            <Text x={0} y={0} text={`${JSON.stringify(props)}`} fill=\"black\" />\n        </Layer>\n    );\n};\n\nexport default CanvasContainer;\n","import Konva from 'konva';\nimport { KonvaEventObject } from 'konva/lib/Node';\nimport {\n    Dispatch,\n    SetStateAction,\n    useCallback,\n    useContext,\n    useMemo,\n    useRef,\n    useState,\n} from 'react';\nimport { Stage } from 'react-konva';\nimport { useContextBridge } from '../../hooks/useContextBridge';\nimport { AppSettingsContext } from '../../providers/AppSettingsProvider';\nimport { ConfigurationContext } from '../../providers/ConfigurationProvider';\nimport { NoteSettingsContext } from '../../providers/NoteSettingsProvider';\nimport { DOMSize } from '../../types/common';\nimport { PageProps, PageSize } from '../../types/note';\nimport { clone } from '../Canvas/util';\nimport Draw from './layer/Draw';\nimport Frame from './layer/Frame';\nimport Grid from './layer/Grid';\nimport CanvasContainer from './nodes/CanvasContainer';\n\ninterface Props extends PageProps {\n    viewBox: DOMSize;\n    onChange: Dispatch<SetStateAction<PageProps>>;\n}\n\nconst Page: React.VFC<Props> = ({ viewBox, size, drawings, structures, onChange }) => {\n    const stageRef = useRef<Konva.Stage>(null);\n    const { mode: noteMode, settings } = useContext(NoteSettingsContext);\n    const { mode: appMode } = useContext(AppSettingsContext);\n\n    // Stage 以降で使用する Context を Bridge する\n    const ContextBridge = useContextBridge(AppSettingsContext, ConfigurationContext);\n\n    // 描画用\n    const isDrawing = useRef<boolean>();\n    const [points, setPoints] = useState<number[]>([]);\n\n    const pageSize = useMemo(() => {\n        return PageSize[size];\n    }, [size]);\n\n    const draggable = useMemo(() => {\n        return appMode === 'note' && noteMode === 'select';\n    }, [appMode, noteMode]);\n\n    /**\n     * ページサイズの範囲で表示領域を移動する\n     */\n    const handleDragMove = useCallback(\n        (event: KonvaEventObject<Event>) => {\n            const { x, y } = event.target.attrs;\n            if (stageRef.current && typeof x === 'number' && typeof y === 'number') {\n                let [newX, newY] = [x, y];\n                let modified = false;\n\n                if (newX > 0) {\n                    newX = 0;\n                    modified = true;\n                } else if (Math.abs(newX) + viewBox.width > pageSize.width) {\n                    newX = viewBox.width - pageSize.width;\n                    modified = true;\n                }\n\n                if (newY > 0) {\n                    newY = 0;\n                    modified = true;\n                } else if (Math.abs(newY) + viewBox.height > pageSize.height) {\n                    newY = viewBox.height - pageSize.height;\n                    modified = true;\n                }\n\n                if (modified) {\n                    stageRef.current.setPosition({ x: newX, y: newY });\n                }\n            }\n        },\n        [pageSize.height, pageSize.width, viewBox.height, viewBox.width]\n    );\n\n    /**\n     * 描画の開始\n     */\n    const handlePointerDown = useCallback(\n        (event: KonvaEventObject<Event>) => {\n            if (noteMode !== 'edit') {\n                return;\n            }\n\n            const point = event.target.getStage()?.getPointerPosition();\n            if (stageRef.current && point) {\n                isDrawing.current = true;\n\n                const { x, y } = stageRef.current.getPosition();\n                setPoints([point.x + Math.abs(x), point.y + Math.abs(y)]);\n            }\n        },\n        [noteMode]\n    );\n\n    /**\n     * ポインタの移動時に位置を取得\n     */\n    const handlePointerMove = useCallback(\n        (event: KonvaEventObject<Event>) => {\n            if (noteMode !== 'edit') {\n                return;\n            }\n            if (!isDrawing.current) {\n                return;\n            }\n\n            const point = event.target.getStage()?.getPointerPosition();\n            if (stageRef.current && point) {\n                const { x, y } = stageRef.current.getPosition();\n                setPoints((state) => [...state, point.x + Math.abs(x), point.y + Math.abs(y)]);\n            }\n        },\n        [noteMode]\n    );\n\n    /**\n     * 描画の確定\n     */\n    const handlePointerUp = useCallback(\n        (_: KonvaEventObject<Event>) => {\n            if (noteMode !== 'edit') {\n                return;\n            }\n            if (!isDrawing.current) {\n                return;\n            }\n\n            isDrawing.current = false;\n            // 更新を確定\n            onChange((page) => {\n                const data = clone(page);\n                // 描画データを追加\n                data.drawings.push({\n                    ...settings,\n                    points,\n                });\n\n                return data;\n            });\n            // 現在の描画データをクリア\n            setPoints([]);\n        },\n        [noteMode, onChange, points, settings]\n    );\n\n    return (\n        <Stage\n            ref={stageRef}\n            width={viewBox.width}\n            height={viewBox.height}\n            draggable={draggable}\n            onDragMove={handleDragMove}\n            onPointerDown={handlePointerDown}\n            onPointerMove={handlePointerMove}\n            onPointerUp={handlePointerUp}\n        >\n            <ContextBridge>\n                <Grid size={size} />\n                {/* キャンバスの描画 */}\n                {structures.map((structure, index) => (\n                    <CanvasContainer key={`canvas_${index}`} {...structure} visible />\n                ))}\n                <Frame\n                    size={size}\n                    structures={structures}\n                    draggable={draggable}\n                    onChange={onChange}\n                />\n                <Draw drawings={drawings} settings={settings} points={points} />\n            </ContextBridge>\n        </Stage>\n    );\n};\n\nexport default Page;\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable react-hooks/rules-of-hooks */\nimport * as React from 'react';\n\n// https://github.com/pmndrs/drei/blob/master/src/core/useContextBridge.tsx\nexport const useContextBridge = (...contexts: Array<React.Context<any>>) => {\n    const cRef = React.useRef<Array<React.Context<any>>>([]);\n    cRef.current = contexts.map((context) => React.useContext(context));\n\n    return React.useMemo(\n        () =>\n            ({ children }: { children: React.ReactNode }): JSX.Element =>\n                contexts.reduceRight(\n                    (acc, Context, i) => (\n                        <Context.Provider value={cRef.current[i]} children={acc} />\n                    ),\n                    children\n                ) as unknown as JSX.Element,\n        [contexts]\n    );\n};\n","import { Box } from '@mui/material';\nimport { useContext, useEffect, useRef, useState } from 'react';\nimport { AppSettingsContext } from '../../providers/AppSettingsProvider';\nimport { DOMSize } from '../../types/common';\nimport Page from './Page';\n\nconst Note: React.VFC = () => {\n    // キャンバスの親要素\n    const containerRef = useRef<HTMLDivElement>(null);\n    // 表示領域\n    const [viewBox, setViewBox] = useState<DOMSize>({ width: 0, height: 0 });\n    // ページデータ\n    const { page, onChange } = useContext(AppSettingsContext);\n\n    // 要素のリサイズを監視\n    useEffect(() => {\n        const observer = new ResizeObserver((entries) => {\n            const { width, height } = entries[0].contentRect;\n            setViewBox({\n                width,\n                height,\n            });\n        });\n\n        if (containerRef.current) {\n            observer.observe(containerRef.current);\n        }\n\n        return () => {\n            observer.disconnect();\n        };\n    }, []);\n\n    return (\n        <Box\n            ref={containerRef}\n            sx={{\n                width: 'auto',\n                height: '100%',\n                backgroundColor: '#ffffff',\n                overscrollBehavior: 'contain',\n                overflow: 'hidden',\n            }}\n        >\n            <Page viewBox={viewBox} {...page} onChange={onChange} />\n        </Box>\n    );\n};\n\nexport default Note;\n","import { Box } from '@mui/material';\nimport { useContext } from 'react';\nimport { AppSettingsContext } from '../providers/AppSettingsProvider';\nimport Note from './Note';\n\nconst MainContainer: React.VFC = () => {\n    const { canvasProps } = useContext(AppSettingsContext);\n\n    return (\n        <>\n            <Box\n                sx={{\n                    boxSizing: 'border-box',\n                    ml: 1,\n                    mb: 1,\n                    flex: 1,\n                    border: (theme) => `1px solid ${theme.palette.divider}`,\n                    borderRadius: 1,\n                    overflow: 'hidden',\n                }}\n            >\n                <Note />\n            </Box>\n            {canvasProps && (\n                <Box\n                    sx={{\n                        position: 'absolute',\n                        top: canvasProps.y,\n                        left: canvasProps.x,\n                        width: canvasProps.width,\n                        height: canvasProps.height,\n                        backgroundColor: 'red',\n                    }}\n                >\n                    HOHOHO!!!\n                </Box>\n            )}\n        </>\n    );\n};\n\nexport default MainContainer;\n","// --- app 共通 ---\nexport interface DOMSize {\n    width: number;\n    height: number;\n}\n\nexport interface ShapePosition {\n    x: number;\n    y: number;\n}\n\nexport type ShapeBaseProps = DOMSize & ShapePosition;\n\nexport const AppModes = ['note', 'canvas'] as const;\nexport type AppMode = typeof AppModes[number];\n\n// --- canvas関係 ---\n\nexport const CanvasTools = ['select', 'pen', 'force', 'trapezoid', 'delete'] as const;\nexport type CanvasTool = typeof CanvasTools[number];\nexport const isCanvasTool = (item: unknown): item is CanvasTool => {\n    if (typeof item === 'string') {\n        return CanvasTools.some((tool) => tool === item);\n    }\n    return false;\n};\n\nexport const isNumberArray = (item: unknown): item is number[] => {\n    if (Array.isArray(item)) {\n        if (item.length === 0) {\n            return true;\n        }\n\n        return item.every((value) => typeof value === 'number');\n    }\n    return false;\n};\n","import { ArrowDownward, Delete, Edit, PanToolAlt, Texture } from '@mui/icons-material';\nimport { Stack, ToggleButton, ToggleButtonGroup, Typography } from '@mui/material';\nimport { MouseEvent, ReactElement, useCallback, useContext } from 'react';\nimport { ConfigurationContext } from '../../providers/ConfigurationProvider';\nimport { CanvasTool, isCanvasTool } from '../../types/common';\n\ninterface Props {\n    tool: CanvasTool;\n    onChange: (tool: CanvasTool) => void;\n}\n\ninterface ButtonProps {\n    tool: CanvasTool;\n    icon: ReactElement;\n    label: string;\n}\n\nconst ToolboxButtons: Readonly<Record<CanvasTool, ButtonProps>> = {\n    select: {\n        tool: 'select',\n        icon: <PanToolAlt />,\n        label: '選択',\n    },\n    pen: {\n        tool: 'pen',\n        icon: <Edit />,\n        label: '梁要素の描画',\n    },\n    force: {\n        tool: 'force',\n        icon: <ArrowDownward />,\n        label: '集中荷重の追加',\n    },\n    trapezoid: {\n        tool: 'trapezoid',\n        icon: <Texture />,\n        label: '分布荷重の追加',\n    },\n    delete: {\n        tool: 'delete',\n        icon: <Delete />,\n        label: '要素の削除',\n    },\n};\n\nconst CanvasToolboxCore: React.VFC<Props> = ({ tool, onChange }) => {\n    /**\n     * ツールの変更\n     */\n    const handleChange = useCallback(\n        (_: MouseEvent<HTMLElement>, newValue: string | null) => {\n            if (newValue !== null && isCanvasTool(newValue)) {\n                onChange(newValue);\n            }\n        },\n        [onChange]\n    );\n\n    return (\n        <Stack sx={{ width: 160 }} alignItems=\"flex-start\">\n            <Typography variant=\"caption\">Toolbox</Typography>\n            <ToggleButtonGroup\n                orientation=\"vertical\"\n                value={tool}\n                exclusive\n                fullWidth\n                onChange={handleChange}\n            >\n                {Object.entries(ToolboxButtons).map(([key, { icon, label }]) => (\n                    <ToggleButton\n                        key={key}\n                        value={key}\n                        sx={{ justifyContent: 'flex-start', alignItems: 'center' }}\n                    >\n                        {icon}\n                        <Typography variant=\"caption\" sx={{ ml: 1 }}>\n                            {label}\n                        </Typography>\n                    </ToggleButton>\n                ))}\n            </ToggleButtonGroup>\n        </Stack>\n    );\n};\n\nconst CanvasToolbox: React.VFC = () => {\n    const { tool, setTool } = useContext(ConfigurationContext);\n    return <CanvasToolboxCore tool={tool} onChange={setTool} />;\n};\n\nexport default CanvasToolbox;\n","import { AutoFixNormal, Edit, PanToolAlt } from '@mui/icons-material';\nimport {\n    Slider,\n    Stack,\n    TextField,\n    ToggleButton,\n    ToggleButtonGroup,\n    Typography,\n} from '@mui/material';\nimport {\n    ChangeEvent,\n    Dispatch,\n    MouseEvent,\n    ReactElement,\n    SetStateAction,\n    useCallback,\n    useContext,\n} from 'react';\nimport { NoteSettingsContext } from '../../providers/NoteSettingsProvider';\nimport { DrawSettings, isNoteMode, NoteMode } from '../../types/note';\n\ninterface Props {\n    mode: NoteMode;\n    settings: DrawSettings;\n    onChangeMode: Dispatch<SetStateAction<NoteMode>>;\n    onChangeDrawSettings: Dispatch<SetStateAction<DrawSettings>>;\n}\n\nconst DrawModes = ['pen', 'eraser'] as const;\ntype DrawMode = typeof DrawModes[number];\nconst isDrawMode = (item: unknown): item is DrawMode => {\n    if (typeof item === 'string') {\n        return DrawModes.some((mode) => mode === item);\n    }\n    return false;\n};\n\ninterface ButtonProps {\n    mode: NoteMode | DrawMode;\n    icon: ReactElement;\n    label: string;\n}\n\nconst NoteModeButtons: Readonly<Record<NoteMode, ButtonProps>> = {\n    select: {\n        mode: 'select',\n        icon: <PanToolAlt />,\n        label: '選択',\n    },\n    edit: {\n        mode: 'edit',\n        icon: <Edit />,\n        label: '描画',\n    },\n};\n\nconst DrawModeButtons: Readonly<Record<DrawMode, ButtonProps>> = {\n    pen: {\n        mode: 'pen',\n        icon: <Edit />,\n        label: 'ペンツール',\n    },\n    eraser: {\n        mode: 'eraser',\n        icon: <AutoFixNormal />,\n        label: '消しゴム',\n    },\n};\n\nconst MinStrokeWidth = 4;\nconst MaxStrokeWidth = 20;\nconst StrokeWidthStep = 4;\n\nconst NoteToolboxCore: React.VFC<Props> = ({\n    mode,\n    settings,\n    onChangeMode,\n    onChangeDrawSettings,\n}) => {\n    /**\n     * モードの変更\n     */\n    const handleChangeMode = useCallback(\n        (_: MouseEvent<HTMLElement>, newValue: string | null) => {\n            if (newValue !== null && isNoteMode(newValue)) {\n                onChangeMode(newValue);\n            }\n        },\n        [onChangeMode]\n    );\n\n    /**\n     * 描画ツールの選択\n     */\n    const handleChangeTool = useCallback(\n        (_: MouseEvent<HTMLElement>, newValue: string | null) => {\n            if (newValue !== null && isDrawMode(newValue)) {\n                onChangeDrawSettings((state) => ({\n                    ...state,\n                    eraser: newValue === 'eraser',\n                }));\n            }\n        },\n        [onChangeDrawSettings]\n    );\n\n    const handleChangeStrokeWidth = useCallback(\n        (_: Event, value: number | number[]) => {\n            if (typeof value === 'number') {\n                onChangeDrawSettings((state) => ({\n                    ...state,\n                    strokeWidth: value,\n                }));\n            }\n        },\n        [onChangeDrawSettings]\n    );\n\n    const handleChangeStroke = useCallback(\n        (event: ChangeEvent<HTMLInputElement>) => {\n            if (event.target.checkValidity()) {\n                const { value } = event.target;\n                onChangeDrawSettings((state) => ({\n                    ...state,\n                    stroke: value,\n                }));\n            }\n        },\n        [onChangeDrawSettings]\n    );\n\n    return (\n        <Stack sx={{ width: 160 }} alignItems=\"flex-start\">\n            <Typography variant=\"caption\">Toolbox</Typography>\n            {/* 選択 / 編集の切り替え */}\n            <ToggleButtonGroup\n                orientation=\"vertical\"\n                value={mode}\n                exclusive\n                fullWidth\n                onChange={handleChangeMode}\n            >\n                {Object.entries(NoteModeButtons).map(([key, { icon, label }]) => (\n                    <ToggleButton\n                        key={key}\n                        value={key}\n                        sx={{ justifyContent: 'flex-start', alignItems: 'center' }}\n                    >\n                        {icon}\n                        <Typography variant=\"caption\" sx={{ ml: 1 }}>\n                            {label}\n                        </Typography>\n                    </ToggleButton>\n                ))}\n            </ToggleButtonGroup>\n            <Typography variant=\"caption\" sx={{ mt: 1 }}>\n                描画ツール\n            </Typography>\n            {/* eraser */}\n            <ToggleButtonGroup\n                orientation=\"vertical\"\n                value={settings.eraser ? 'eraser' : 'pen'}\n                exclusive\n                fullWidth\n                disabled={mode === 'select'}\n                onChange={handleChangeTool}\n            >\n                {Object.entries(DrawModeButtons).map(([key, { icon, label }]) => (\n                    <ToggleButton\n                        key={key}\n                        value={key}\n                        sx={{ justifyContent: 'flex-start', alignItems: 'center' }}\n                    >\n                        {icon}\n                        <Typography variant=\"caption\" sx={{ ml: 1 }}>\n                            {label}\n                        </Typography>\n                    </ToggleButton>\n                ))}\n            </ToggleButtonGroup>\n            {/* strokeWidth */}\n            <Typography variant=\"caption\" sx={{ mt: 1 }}>\n                太さ\n            </Typography>\n            <Slider\n                sx={{ ml: 1, mb: 2, boxSizing: 'border-box', width: 140 }}\n                value={settings.strokeWidth}\n                min={MinStrokeWidth}\n                max={MaxStrokeWidth}\n                step={StrokeWidthStep}\n                marks\n                valueLabelDisplay=\"auto\"\n                disabled={mode === 'select'}\n                onChange={handleChangeStrokeWidth}\n            />\n            {/* stroke */}\n            <TextField\n                type=\"color\"\n                label=\"ペンの色\"\n                value={settings.stroke}\n                disabled={mode === 'select' || settings.eraser}\n                fullWidth\n                margin=\"dense\"\n                size=\"small\"\n                onChange={handleChangeStroke}\n            />\n        </Stack>\n    );\n};\n\nconst NoteToolbox: React.VFC = () => {\n    const props = useContext(NoteSettingsContext);\n    return <NoteToolboxCore {...props} />;\n};\n\nexport default NoteToolbox;\n","import { useContext } from 'react';\nimport { AppSettingsContext } from '../../providers/AppSettingsProvider';\nimport CanvasToolbox from './CanvasToolbox';\nimport NoteToolbox from './NoteToolbox';\n\nconst Toolbox: React.VFC = () => {\n    const { mode } = useContext(AppSettingsContext);\n    if (mode === 'canvas') {\n        return <CanvasToolbox />;\n    }\n    return <NoteToolbox />;\n};\n\nexport default Toolbox;\n","import { Box } from '@mui/material';\nimport { useCallback, useEffect, useState } from 'react';\nimport { DOMSize } from '../types/common';\nimport Header from './Header';\nimport MainContainer from './MainContainer';\nimport Toolbox from './Toolbox';\n\nconst Layout: React.VFC = () => {\n    const [windowRect, setWindowRect] = useState<DOMSize>({ width: 0, height: 0 });\n\n    const fitWindowSize = useCallback(() => {\n        const { innerHeight, innerWidth } = window;\n        setWindowRect({\n            height: innerHeight,\n            width: innerWidth,\n        });\n    }, []);\n\n    useEffect(() => {\n        fitWindowSize();\n        window.addEventListener('resize', fitWindowSize);\n\n        return () => {\n            window.removeEventListener('resize', fitWindowSize);\n        };\n    }, [fitWindowSize]);\n\n    return (\n        <Box sx={{ ...windowRect, overflow: 'hidden' }}>\n            <Header />\n            <Box\n                sx={{\n                    boxSizing: 'border-box',\n                    width: 'auto',\n                    height: 'calc(100% - 48px)',\n                    display: 'flex',\n                    flexDirection: 'row',\n                    flexWrap: 'nowrap',\n                    alignItems: 'stretch',\n                    pt: 1,\n                    px: 1,\n                }}\n            >\n                <Toolbox />\n                <MainContainer />\n            </Box>\n        </Box>\n    );\n};\n\nexport default Layout;\n","import { createTheme, CssBaseline, ThemeProvider } from '@mui/material';\nimport React from 'react';\nimport AppSettingsProvider from '../providers/AppSettingsProvider';\nimport ConfigurationProvider from '../providers/ConfigurationProvider';\nimport NoteSettingsProvider from '../providers/NoteSettingsProvider';\nimport Layout from './Layout';\n\nconst theme = createTheme();\n\nconst App: React.VFC = () => {\n    return (\n        <ThemeProvider theme={theme}>\n            <AppSettingsProvider>\n                <ConfigurationProvider>\n                    <NoteSettingsProvider>\n                        <CssBaseline />\n                        <Layout />\n                    </NoteSettingsProvider>\n                </ConfigurationProvider>\n            </AppSettingsProvider>\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}